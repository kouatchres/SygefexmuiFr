{"ast":null,"code":"var _jsxFileName = \"E:\\\\sygefexMui\\\\sygefexMui-frontend\\\\src\\\\components\\\\rank\\\\NewRankList.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport useTable from \"../utils/useTable\";\nimport { useApolloClient } from \"@apollo/react-hooks\";\nimport { Paper, TableBody, TableRow, TableCell } from \"@material-ui/core\";\nimport Popup from \"../utils/Popup\";\nimport Button from \"@material-ui/core/Button\";\nimport { getAllRanksQuery } from \"../queries&Mutations&Functions/Queries\";\nconst headCells = [{\n  id: \"rankName\",\n  label: \"Libelle Poste\"\n}, {\n  id: \"rankCode\",\n  label: \"Code Poste\"\n}, {\n  id: \"id\",\n  label: \"ID\"\n}];\n\nconst NewRankList = () => {\n  const client = useApolloClient();\n  const {\n    0: ranks,\n    1: setRanks\n  } = useState([]);\n  const {\n    TblContainer,\n    TblHead,\n    TblPagination,\n    recordsAfterPaginationAndSorting\n  } = useTable(ranks, headCells);\n\n  const loadRanksData = async () => {\n    const {\n      error,\n      data\n    } = await client.query({\n      query: getAllRanksQuery\n    });\n\n    const {\n      ranks\n    } = _objectSpread({}, data);\n\n    console.log(ranks);\n    setRanks(ranks);\n  };\n\n  useEffect(() => {\n    loadRanksData();\n    console.log(ranks);\n  }, []);\n  return __jsx(Paper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, __jsx(TblContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, __jsx(TblHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, recordsAfterPaginationAndSorting().map(item => __jsx(TableRow, {\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 15\n    }\n  }, \" \", __jsx(TableSortLabel, {\n    onClick: () => {\n      handleSortRequest(item.id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 17\n    }\n  }, \" \", item.rankName)), __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }, \" \", __jsx(TableSortLabel, {\n    onClick: () => {\n      handleSortRequest(item.id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, \" \", item.rankCode)), __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }, \" \", __jsx(TableSortLabel, {\n    onClick: () => {\n      handleSortRequest(item.id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, \" \", item.id)))))), __jsx(TblPagination, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default NewRankList;","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/rank/NewRankList.jsx"],"names":["React","useState","useEffect","useTable","useApolloClient","Paper","TableBody","TableRow","TableCell","Popup","Button","getAllRanksQuery","headCells","id","label","NewRankList","client","ranks","setRanks","TblContainer","TblHead","TblPagination","recordsAfterPaginationAndSorting","loadRanksData","error","data","query","console","log","map","item","handleSortRequest","rankName","rankCode"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport useTable from \"../utils/useTable\";\r\nimport { useApolloClient } from \"@apollo/react-hooks\";\r\nimport { Paper, TableBody, TableRow, TableCell } from \"@material-ui/core\";\r\nimport Popup from \"../utils/Popup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { getAllRanksQuery } from \"../queries&Mutations&Functions/Queries\";\r\n\r\nconst headCells = [\r\n  { id: \"rankName\", label: \"Libelle Poste\" },\r\n  { id: \"rankCode\", label: \"Code Poste\" },\r\n  { id: \"id\", label: \"ID\" },\r\n];\r\n\r\nconst NewRankList = () => {\r\n  const client = useApolloClient();\r\n  const [ranks, setRanks] = useState([]);\r\n  const {\r\n    TblContainer,\r\n    TblHead,\r\n    TblPagination,\r\n    recordsAfterPaginationAndSorting,\r\n  } = useTable(ranks, headCells);\r\n\r\n  const loadRanksData = async () => {\r\n    const { error, data } = await client.query({\r\n      query: getAllRanksQuery,\r\n    });\r\n    const { ranks } = { ...data };\r\n    console.log(ranks);\r\n\r\n    setRanks(ranks);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadRanksData();\r\n\r\n    console.log(ranks);\r\n  }, []);\r\n\r\n  return (\r\n    <Paper>\r\n      <TblContainer>\r\n        <TblHead />\r\n        <TableBody>\r\n          {recordsAfterPaginationAndSorting().map((item) => (\r\n            <TableRow key={item.id}>\r\n              <TableCell>\r\n                {\" \"}\r\n                <TableSortLabel\r\n                  onClick={() => {\r\n                    handleSortRequest(item.id);\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  {item.rankName}\r\n                </TableSortLabel>\r\n              </TableCell>\r\n              <TableCell>\r\n                {\" \"}\r\n                <TableSortLabel\r\n                  onClick={() => {\r\n                    handleSortRequest(item.id);\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  {item.rankCode}\r\n                </TableSortLabel>\r\n              </TableCell>\r\n              <TableCell>\r\n                {\" \"}\r\n                <TableSortLabel\r\n                  onClick={() => {\r\n                    handleSortRequest(item.id);\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                  {item.id}\r\n                </TableSortLabel>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </TblContainer>\r\n      <TblPagination />\r\n    </Paper>\r\n  );\r\n};\r\nexport default NewRankList;\r\n"]},"metadata":{},"sourceType":"module"}