{"ast":null,"code":"var _jsxFileName = \"E:\\\\sygefexMui\\\\sygefexMui-frontend\\\\src\\\\components\\\\rank\\\\NewRankList.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport useTable from \"../utils/useTable\";\nimport { useApolloClient } from \"@apollo/react-hooks\";\nimport { Paper, Typography, TableBody, TableRow, TableCell, Grid, Toolbar, InputAdornment } from \"@material-ui/core\";\nimport Popup from \"../utils/Popup\";\nimport Button from \"@material-ui/core/Button\";\nimport Search from \"@material-ui/icons/Search\";\nimport { ErrorMessage, Formik, Form, Field } from \"formik\";\nimport { TextField } from \"material-ui-formik-components/TextField\";\nimport { getAllRanksQuery } from \"../queries&Mutations&Functions/Queries\";\nconst headCells = [{\n  id: \"rankName\",\n  label: \"Libelle Poste\"\n}, {\n  id: \"rankCode\",\n  label: \"Code Poste\"\n}, {\n  id: \"id\",\n  label: \"ID\"\n}];\n\nconst NewRankList = () => {\n  const client = useApolloClient();\n  const {\n    0: ranks,\n    1: setRanks\n  } = useState([]);\n  const {\n    0: filterFn,\n    1: setFilterFn\n  } = useState({\n    fn: items => {\n      return items;\n    }\n  });\n  const {\n    TblContainer,\n    TblHead,\n    TblPagination,\n    recordsAfterPagingAndSorting\n  } = useTable(ranks, headCells, filterFn);\n\n  const loadRanksData = async () => {\n    const {\n      error,\n      data\n    } = await client.query({\n      query: getAllRanksQuery\n    });\n\n    const {\n      ranks\n    } = _objectSpread({}, data);\n\n    console.log(ranks);\n    setRanks(ranks);\n  };\n\n  useEffect(() => {\n    loadRanksData();\n    console.log(ranks);\n  }, []);\n\n  const handleSearch = e => {\n    const target = e.target;\n    setFilterFn({\n      fn: items => {\n        if (target.value == \"\") {\n          return items;\n        } else {\n          items.filterFn(x => x.rankName.toLowerCase().includes(target.value));\n        }\n      }\n    });\n  };\n\n  return __jsx(Formik, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, ({\n    isSubmitting\n  }) => {\n    return __jsx(Paper, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }, __jsx(TblContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }, __jsx(Toolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 15\n      }\n    }, __jsx(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 8,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 19\n      }\n    }, __jsx(Field, {\n      component: TextField,\n      autocomplete: \"off\",\n      name: \"search\",\n      type: \"search\",\n      label: \"Search\",\n      fullWidth: true,\n      onChange: handleSearch,\n      variant: \"outlined\",\n      inputProps: {\n        startAdornment: __jsx(InputAdornment, {\n          position: \"start\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 27\n          }\n        }, __jsx(Search, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 29\n          }\n        }))\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    })), __jsx(Grid, {\n      item: true,\n      xs: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 19\n      }\n    }, __jsx(Button, {\n      onClick: submitForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 21\n      }\n    }, \"AddNew\")))), __jsx(TblHead, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 15\n      }\n    }), __jsx(TableBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 15\n      }\n    }, recordsAfterPagingAndSorting().map(item => __jsx(TableRow, {\n      key: item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 19\n      }\n    }, __jsx(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }\n    }, item.rankName), __jsx(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    }, item.rankCode), __jsx(TableCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 21\n      }\n    }, item.id))))), __jsx(TblPagination, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    }));\n  });\n};\n\nexport default NewRankList;","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/rank/NewRankList.jsx"],"names":["React","useState","useEffect","useTable","useApolloClient","Paper","Typography","TableBody","TableRow","TableCell","Grid","Toolbar","InputAdornment","Popup","Button","Search","ErrorMessage","Formik","Form","Field","TextField","getAllRanksQuery","headCells","id","label","NewRankList","client","ranks","setRanks","filterFn","setFilterFn","fn","items","TblContainer","TblHead","TblPagination","recordsAfterPagingAndSorting","loadRanksData","error","data","query","console","log","handleSearch","e","target","value","x","rankName","toLowerCase","includes","isSubmitting","startAdornment","submitForm","map","item","rankCode"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport useTable from \"../utils/useTable\";\r\nimport { useApolloClient } from \"@apollo/react-hooks\";\r\nimport {\r\n  Paper,\r\n  Typography,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Grid,\r\n  Toolbar,\r\n  InputAdornment,\r\n} from \"@material-ui/core\";\r\nimport Popup from \"../utils/Popup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport { ErrorMessage, Formik, Form, Field } from \"formik\";\r\nimport { TextField } from \"material-ui-formik-components/TextField\";\r\n\r\nimport { getAllRanksQuery } from \"../queries&Mutations&Functions/Queries\";\r\n\r\nconst headCells = [\r\n  { id: \"rankName\", label: \"Libelle Poste\" },\r\n  { id: \"rankCode\", label: \"Code Poste\" },\r\n  { id: \"id\", label: \"ID\" },\r\n];\r\n\r\nconst NewRankList = () => {\r\n  const client = useApolloClient();\r\n  const [ranks, setRanks] = useState([]);\r\n  const [filterFn, setFilterFn] = useState({\r\n    fn: (items) => {\r\n      return items;\r\n    },\r\n  });\r\n\r\n  const {\r\n    TblContainer,\r\n    TblHead,\r\n    TblPagination,\r\n    recordsAfterPagingAndSorting,\r\n  } = useTable(ranks, headCells, filterFn);\r\n\r\n  const loadRanksData = async () => {\r\n    const { error, data } = await client.query({\r\n      query: getAllRanksQuery,\r\n    });\r\n    const { ranks } = { ...data };\r\n    console.log(ranks);\r\n\r\n    setRanks(ranks);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadRanksData();\r\n\r\n   \r\n    console.log(ranks);\r\n  }, []);\r\n\r\n   const handleSearch = (e) => {\r\n     const target = e.target;\r\n     setFilterFn({\r\n       fn: (items) => {\r\n         if (target.value == \"\") {\r\n           return items;\r\n         } else {\r\n           items.filterFn((x) =>\r\n             x.rankName.toLowerCase().includes(target.value)\r\n           );\r\n         }\r\n       },\r\n     });\r\n   };\r\n\r\n  return (\r\n    <Formik>\r\n      {({ isSubmitting }) => {\r\n        return (\r\n          <Paper>\r\n            <TblContainer>\r\n              <Toolbar>\r\n                <Grid container>\r\n                  <Grid item xs={8}>\r\n                    <Field\r\n                      component={TextField}\r\n                      autocomplete=\"off\"\r\n                      name=\"search\"\r\n                      type=\"search\"\r\n                      label=\"Search\"\r\n                      fullWidth\r\n                      onChange={handleSearch}\r\n                      variant=\"outlined\"\r\n                      inputProps={{\r\n                        startAdornment: (\r\n                          <InputAdornment position=\"start\">\r\n                            <Search />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Button onClick={submitForm}>AddNew</Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Toolbar>\r\n              <TblHead />\r\n              <TableBody>\r\n                {recordsAfterPagingAndSorting().map((item) => (\r\n                  <TableRow key={item.id}>\r\n                    <TableCell>{item.rankName}</TableCell>\r\n                    <TableCell>{item.rankCode}</TableCell>\r\n                    <TableCell>{item.id}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </TblContainer>\r\n            <TblPagination />\r\n          </Paper>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\nexport default NewRankList;\r\n"]},"metadata":{},"sourceType":"module"}