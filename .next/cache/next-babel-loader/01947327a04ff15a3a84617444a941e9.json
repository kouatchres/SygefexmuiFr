{"ast":null,"code":"import _toConsumableArray from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\sygefexMui\\\\sygefexMui-frontend\\\\src\\\\components\\\\region\\\\RegionList.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { forwardRef, useEffect, useState } from \"react\";\nimport MaterialTable from \"material-table\";\nimport AddBox from \"@material-ui/icons/AddBox\";\nimport { Paper } from \"@material-ui/core\";\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\nimport Check from \"@material-ui/icons/Check\";\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\nimport Clear from \"@material-ui/icons/Clear\";\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\nimport Edit from \"@material-ui/icons/Edit\";\nimport FilterList from \"@material-ui/icons/FilterList\";\nimport FirstPage from \"@material-ui/icons/FirstPage\";\nimport LastPage from \"@material-ui/icons/LastPage\";\nimport Remove from \"@material-ui/icons/Remove\";\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\nimport Search from \"@material-ui/icons/Search\";\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useApolloClient } from \"@apollo/react-hooks\";\nimport { getAllRegionsQuery } from \"../queries&Mutations&Functions/Queries\";\nimport tableIcons from \"../utils/icons/tableIcons\"; // const tableIcons = {\n//   Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\n//   Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\n//   Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n//   Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\n//   DetailPanel: forwardRef((props, ref) => (\n//     <ChevronRight {...props} ref={ref} />\n//   )),\n//   Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\n//   Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\n//   Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\n//   FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\n//   LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\n//   NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\n//   PreviousPage: forwardRef((props, ref) => (\n//     <ChevronLeft {...props} ref={ref} />\n//   )),\n//   ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\n//   Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\n//   SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\n//   ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\n//   ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\n// };\n\nvar useStyles = makeStyles({\n  stickyActionsColumn: {\n    \"& table:first-child\": {\n      \"& tr\": {\n        \"& td:first-child, th:first-child\": {\n          backgroundColor: \"#f5f5f5\",\n          position: \"sticky\",\n          left: 0,\n          zIndex: 10\n        },\n        \"& th:first-child\": {\n          zIndex: 10\n        }\n      }\n    }\n  },\n  stickyHeader: {\n    \"& table:first-child\": {\n      \"& tr\": _defineProperty({\n        \"& th\": {\n          backgroundColor: \"#5aa193\",\n          position: \"sticky\",\n          top: \"4rem\",\n          zIndex: 10\n        }\n      }, \"& th\", {\n        zIndex: 10\n      })\n    }\n  }\n});\n\nvar RegionList = function RegionList() {\n  _s();\n\n  var classes = useStyles();\n  var client = useApolloClient();\n\n  var _useState = useState({\n    columns: [{\n      field: \"regName\",\n      title: \"Region Name\"\n    }, {\n      field: \"regCode\",\n      title: \"Region Code\"\n    }, {\n      field: \"id\",\n      title: \"ID\"\n    }],\n    data: []\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var loadRegionData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$client$query, error, data, _data, regions;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return client.query({\n                query: getAllRegionsQuery\n              });\n\n            case 2:\n              _yield$client$query = _context.sent;\n              error = _yield$client$query.error;\n              data = _yield$client$query.data;\n              error && __jsx(Error, {\n                error: error,\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 106,\n                  columnNumber: 16\n                }\n              });\n              _data = _objectSpread({}, data), regions = _data.regions;\n              console.log(regions);\n              console.log(regions);\n              setState(function (prev) {\n                return _objectSpread(_objectSpread({}, prev), {}, {\n                  data: regions\n                });\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadRegionData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    loadRegionData();\n  }, []);\n  console.dir(state.data);\n  return __jsx(Paper, {\n    style: {\n      marginTop: \"2rem\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: classes.stickyHeader,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, __jsx(MaterialTable, {\n    icons: tableIcons,\n    title: \"Liste de Regions\",\n    columns: state.columns,\n    data: state.data,\n    options: {\n      paging: true,\n      pageSize: 10,\n      // make initial page size\n      emptyRowsWhenPaging: false,\n      //to make page size fix in case of less data rows\n      pageSizeOptions: [5, 10, 20] // rows selection options\n\n    },\n    editable: {\n      onRowAdd: function onRowAdd(newData) {\n        return new Promise(function (resolve) {\n          setTimeout(function () {\n            resolve();\n            setState(function (prevState) {\n              var data = _toConsumableArray(prevState.data);\n\n              data.push(newData);\n              return _objectSpread(_objectSpread({}, prevState), {}, {\n                data: data\n              });\n            });\n          }, 400);\n        });\n      },\n      onRowUpdate: function onRowUpdate(newData, oldData) {\n        return new Promise(function (resolve) {\n          setTimeout(function () {\n            resolve();\n\n            if (oldData) {\n              setState(function (prevState) {\n                var data = _toConsumableArray(prevState.data);\n\n                data[data.indexOf(oldData)] = newData;\n                return _objectSpread(_objectSpread({}, prevState), {}, {\n                  data: data\n                });\n              });\n            }\n          }, 400);\n        });\n      },\n      onRowDelete: function onRowDelete(oldData) {\n        return new Promise(function (resolve) {\n          setTimeout(function () {\n            resolve();\n            setState(function (prevState) {\n              var data = _toConsumableArray(prevState.data);\n\n              data.splice(data.indexOf(oldData), 1);\n              return _objectSpread(_objectSpread({}, prevState), {}, {\n                data: data\n              });\n            });\n          }, 400);\n        });\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  })));\n};\n\n_s(RegionList, \"MiL3oH621az5uCUuyVk4csKc79g=\", false, function () {\n  return [useStyles, useApolloClient];\n});\n\n_c = RegionList;\nexport default RegionList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegionList\");","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/region/RegionList.jsx"],"names":["React","forwardRef","useEffect","useState","MaterialTable","AddBox","Paper","ArrowDownward","Check","ChevronLeft","ChevronRight","Clear","DeleteOutline","Edit","FilterList","FirstPage","LastPage","Remove","SaveAlt","Search","ViewColumn","makeStyles","useApolloClient","getAllRegionsQuery","tableIcons","useStyles","stickyActionsColumn","backgroundColor","position","left","zIndex","stickyHeader","top","RegionList","classes","client","columns","field","title","data","state","setState","loadRegionData","query","error","regions","console","log","prev","dir","marginTop","paging","pageSize","emptyRowsWhenPaging","pageSizeOptions","onRowAdd","newData","Promise","resolve","setTimeout","prevState","push","onRowUpdate","oldData","indexOf","onRowDelete","splice"],"mappings":"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","sourcesContent":["import React, { forwardRef, useEffect, useState } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport AddBox from \"@material-ui/icons/AddBox\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport ArrowDownward from \"@material-ui/icons/ArrowDownward\";\r\nimport Check from \"@material-ui/icons/Check\";\r\nimport ChevronLeft from \"@material-ui/icons/ChevronLeft\";\r\nimport ChevronRight from \"@material-ui/icons/ChevronRight\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport DeleteOutline from \"@material-ui/icons/DeleteOutline\";\r\nimport Edit from \"@material-ui/icons/Edit\";\r\nimport FilterList from \"@material-ui/icons/FilterList\";\r\nimport FirstPage from \"@material-ui/icons/FirstPage\";\r\nimport LastPage from \"@material-ui/icons/LastPage\";\r\nimport Remove from \"@material-ui/icons/Remove\";\r\nimport SaveAlt from \"@material-ui/icons/SaveAlt\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport ViewColumn from \"@material-ui/icons/ViewColumn\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useApolloClient } from \"@apollo/react-hooks\";\r\nimport { getAllRegionsQuery } from \"../queries&Mutations&Functions/Queries\";\r\nimport tableIcons from \"../utils/icons/tableIcons\"\r\n\r\n// const tableIcons = {\r\n//   Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n//   Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n//   Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n//   Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n//   DetailPanel: forwardRef((props, ref) => (\r\n//     <ChevronRight {...props} ref={ref} />\r\n//   )),\r\n//   Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n//   Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n//   Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n//   FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n//   LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n//   NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n//   PreviousPage: forwardRef((props, ref) => (\r\n//     <ChevronLeft {...props} ref={ref} />\r\n//   )),\r\n//   ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n//   Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n//   SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n//   ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n//   ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />),\r\n// };\r\n\r\nconst useStyles = makeStyles({\r\n  stickyActionsColumn: {\r\n    \"& table:first-child\": {\r\n      \"& tr\": {\r\n        \"& td:first-child, th:first-child\": {\r\n          backgroundColor: \"#f5f5f5\",\r\n          position: \"sticky\",\r\n          left: 0,\r\n          zIndex: 10,\r\n        },\r\n        \"& th:first-child\": {\r\n          zIndex: 10,\r\n        },\r\n      },\r\n    },\r\n  },\r\n  stickyHeader: {\r\n    \"& table:first-child\": {\r\n      \"& tr\": {\r\n        \"& th\": {\r\n          backgroundColor: \"#5aa193\",\r\n          position: \"sticky\",\r\n          top: \"4rem\",\r\n          zIndex: 10,\r\n        },\r\n        \"& th\": {\r\n          zIndex: 10,\r\n        },\r\n      },\r\n    },\r\n  },\r\n});\r\n\r\nconst RegionList = () => {\r\n  const classes = useStyles();\r\n  const client = useApolloClient();\r\n\r\n  const [state, setState] = useState({\r\n    columns: [\r\n      {\r\n        field: \"regName\",\r\n        title: \"Region Name\",\r\n      },\r\n      {\r\n        field: \"regCode\",\r\n        title: \"Region Code\",\r\n      },\r\n      { field: \"id\", title: \"ID\" },\r\n    ],\r\n    data: [],\r\n  });\r\n\r\n\r\n  const loadRegionData = async () => {\r\n    const { error, data } = await client.query({\r\n      query: getAllRegionsQuery,\r\n    });\r\n    {\r\n      error && <Error error={error} />;\r\n    }\r\n    const { regions } = { ...data };\r\n    console.log(regions);\r\n    console.log(regions);\r\n    setState((prev) => ({ ...prev, data: regions }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadRegionData();\r\n  }, []);\r\n  console.dir(state.data);\r\n  return (\r\n    <Paper style={{ marginTop: \"2rem\" }}>\r\n      <div className={classes.stickyHeader}>\r\n        <MaterialTable\r\n          icons={tableIcons}\r\n          title=\"Liste de Regions\"\r\n          columns={state.columns}\r\n          data={state.data}\r\n          options={{\r\n            paging: true,\r\n            pageSize: 10, // make initial page size\r\n            emptyRowsWhenPaging: false, //to make page size fix in case of less data rows\r\n            pageSizeOptions: [5, 10, 20], // rows selection options\r\n          }}\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                  resolve();\r\n                  setState((prevState) => {\r\n                    const data = [...prevState.data];\r\n                    data.push(newData);\r\n                    return {\r\n                      ...prevState,\r\n                      data,\r\n                    };\r\n                  });\r\n                }, 400);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                  resolve();\r\n                  if (oldData) {\r\n                    setState((prevState) => {\r\n                      const data = [...prevState.data];\r\n                      data[data.indexOf(oldData)] = newData;\r\n                      return {\r\n                        ...prevState,\r\n                        data,\r\n                      };\r\n                    });\r\n                  }\r\n                }, 400);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                  resolve();\r\n                  setState((prevState) => {\r\n                    const data = [...prevState.data];\r\n                    data.splice(data.indexOf(oldData), 1);\r\n                    return {\r\n                      ...prevState,\r\n                      data,\r\n                    };\r\n                  });\r\n                }, 400);\r\n              }),\r\n          }}\r\n        />\r\n      </div>\r\n    </Paper>\r\n  );\r\n};\r\nexport default RegionList;\r\n"]},"metadata":{},"sourceType":"module"}