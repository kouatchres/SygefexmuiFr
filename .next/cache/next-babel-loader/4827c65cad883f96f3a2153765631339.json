{"ast":null,"code":"var _jsxFileName = \"E:\\\\sygefexMui\\\\sygefexMui-frontend\\\\src\\\\components\\\\muiTableCustomize\\\\MuiTableCust.jsx\";\nvar __jsx = React.createElement;\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport { render } from \"react-dom\";\nimport { Button, TextField, Paper } from \"@material-ui/core\";\nimport { Edit as EditIcon, Add as AddIcon } from \"@material-ui/icons\";\nimport MaterialTable from \"material-table\";\nimport MyDialog from \"./MyDialog.jsx\";\nimport tableIcons from \"./TableIcons.jsx\";\n\nconst rando = max => Math.floor(Math.random() * max);\n\nconst words = [\"Paper\", \"Rock\", \"Scissors\"];\nconst rawData = [];\n\nfor (let i = 0; i < 100; i++) {\n  rawData.push({\n    id: rando(300),\n    word: words[i % words.length]\n  });\n}\n\nconst columns = [{\n  title: \"Id\",\n  field: \"id\"\n}, {\n  title: \"Word\",\n  field: \"word\"\n}];\n\nconst App = () => {\n  const {\n    0: data,\n    1: setData\n  } = useState(rawData);\n  const {\n    0: isDialogOpen,\n    1: setIsDialogOpen\n  } = useState(false);\n  const {\n    0: dialogWord,\n    1: setDialogWord\n  } = useState(\"\");\n  const {\n    0: dialogId,\n    1: setDialogId\n  } = useState(\"\");\n\n  const handleDialogClose = event => {\n    setIsDialogOpen(false);\n  };\n\n  const handleId = event => {\n    setDialogId(event.target.value);\n  };\n\n  const handleWord = event => {\n    setDialogWord(event.target.value);\n  };\n\n  const handleAddNewRow = event => {\n    if (!dialogId || !dialogWord) return;\n    setData( // Here you can add the new row to whatever index you want\n    [{\n      id: dialogId,\n      word: dialogWord\n    }, ...data]);\n  };\n\n  useEffect(() => {\n    // Closes dialog after saving\n    if (isDialogOpen) {\n      setIsDialogOpen(false);\n    }\n  }, [data], [isDialogOpen]);\n  useEffect(() => {\n    // Clears the inputs if `isDialogOpen` equals `false`\n    if (!isDialogOpen) {\n      setDialogId(\"\");\n      setDialogWord(\"\");\n    }\n  }, [isDialogOpen]);\n  const actions = [{\n    icon: () => __jsx(AddIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 19\n      }\n    }),\n    tooltip: \"Add User\",\n    isFreeAction: true,\n    onClick: (event, rowData) => {\n      setIsDialogOpen(true);\n    }\n  }, {\n    icon: () => __jsx(EditIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 19\n      }\n    }),\n    tooltip: \"Edit User\",\n    onClick: (event, rowData) => {\n      setIsDialogOpen(true);\n    }\n  }];\n  return __jsx(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, __jsx(MaterialTable, {\n    data: data,\n    columns: columns,\n    actions: actions,\n    title: \"Custom Add Row\",\n    icons: tableIcons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }), __jsx(MyDialog, {\n    title: \"Add User\",\n    isOpen: isDialogOpen,\n    onClose: handleDialogClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, __jsx(Paper, {\n    style: {\n      padding: \"2em\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, __jsx(TextField, {\n    defaultValue: dialogId,\n    value: dialogId,\n    onInput: handleId,\n    label: \"Id\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 11\n    }\n  }, __jsx(TextField, {\n    value: dialogWord,\n    onInput: handleWord,\n    label: \"Word\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    style: {\n      marginTop: \"3em\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    onClick: handleAddNewRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, \"Save\"), __jsx(Button, {\n    onClick: handleDialogClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }, \"Cancel\")))));\n};\n\ne;","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/muiTableCustomize/MuiTableCust.jsx"],"names":["React","Fragment","useState","useEffect","render","Button","TextField","Paper","Edit","EditIcon","Add","AddIcon","MaterialTable","MyDialog","tableIcons","rando","max","Math","floor","random","words","rawData","i","push","id","word","length","columns","title","field","App","data","setData","isDialogOpen","setIsDialogOpen","dialogWord","setDialogWord","dialogId","setDialogId","handleDialogClose","event","handleId","target","value","handleWord","handleAddNewRow","actions","icon","tooltip","isFreeAction","onClick","rowData","padding","marginTop","e"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\nimport { render } from \"react-dom\";\r\n\r\nimport { Button, TextField, Paper } from \"@material-ui/core\";\r\nimport { Edit as EditIcon, Add as AddIcon } from \"@material-ui/icons\";\r\nimport MaterialTable from \"material-table\";\r\n\r\nimport MyDialog from \"./MyDialog.jsx\";\r\nimport tableIcons from \"./TableIcons.jsx\";\r\n\r\nconst rando = max => Math.floor(Math.random() * max);\r\n\r\nconst words = [\"Paper\", \"Rock\", \"Scissors\"];\r\n\r\nconst rawData = [];\r\nfor (let i = 0; i < 100; i++) {\r\n  rawData.push({ id: rando(300), word: words[i % words.length] });\r\n}\r\n\r\nconst columns = [\r\n  { title: \"Id\", field: \"id\" },\r\n  { title: \"Word\", field: \"word\" }\r\n];\r\n\r\nconst App = () => {\r\n  const [data, setData] = useState(rawData);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [dialogWord, setDialogWord] = useState(\"\");\r\n  const [dialogId, setDialogId] = useState(\"\");\r\n\r\n  const handleDialogClose = event => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  const handleId = event => {\r\n    setDialogId(event.target.value);\r\n  };\r\n\r\n  const handleWord = event => {\r\n    setDialogWord(event.target.value);\r\n  };\r\n\r\n  const handleAddNewRow = event => {\r\n    if (!dialogId || !dialogWord) return;\r\n\r\n    setData(\r\n      // Here you can add the new row to whatever index you want\r\n      [{ id: dialogId, word: dialogWord }, ...data]\r\n    );\r\n  };\r\n\r\n  useEffect(\r\n    () => {\r\n      // Closes dialog after saving\r\n      if (isDialogOpen) {\r\n        setIsDialogOpen(false);\r\n      }\r\n    },\r\n    [data],\r\n    [isDialogOpen]\r\n  );\r\n\r\n  useEffect(() => {\r\n    // Clears the inputs if `isDialogOpen` equals `false`\r\n    if (!isDialogOpen) {\r\n      setDialogId(\"\");\r\n      setDialogWord(\"\");\r\n    }\r\n  }, [isDialogOpen]);\r\n\r\n  const actions = [\r\n    {\r\n      icon: () => <AddIcon />,\r\n      tooltip: \"Add User\",\r\n      isFreeAction: true,\r\n      onClick: (event, rowData) => {\r\n        setIsDialogOpen(true);\r\n      }\r\n    },\r\n    {\r\n      icon: () => <EditIcon />,\r\n      tooltip: \"Edit User\",\r\n      onClick: (event, rowData) => {\r\n        setIsDialogOpen(true);\r\n      }\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <Fragment>\r\n      <MaterialTable\r\n        data={data}\r\n        columns={columns}\r\n        actions={actions}\r\n        title=\"Custom Add Row\"\r\n        icons={tableIcons}\r\n      />\r\n\r\n      <MyDialog\r\n        title=\"Add User\"\r\n        isOpen={isDialogOpen}\r\n        onClose={handleDialogClose}\r\n      >\r\n        <Paper style={{ padding: \"2em\" }}>\r\n          <div>\r\n            <TextField\r\n              defaultValue={dialogId}\r\n              value={dialogId}\r\n              onInput={handleId}\r\n              label=\"Id\"\r\n            />\r\n          </div>\r\n          <div>\r\n            <TextField value={dialogWord} onInput={handleWord} label=\"Word\" />\r\n          </div>\r\n          <div style={{ marginTop: \"3em\" }}>\r\n            <Button onClick={handleAddNewRow}>Save</Button>\r\n            <Button onClick={handleDialogClose}>Cancel</Button>\r\n          </div>\r\n        </Paper>\r\n      </MyDialog>\r\n    </Fragment>\r\n  );\r\n};\r\ne"]},"metadata":{},"sourceType":"module"}