{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import useTable from \"../utils/useTable\";\n// import { useApolloClient } from \"@apollo/react-hooks\";\n// import {\n//   Paper,\n//   Typography,\n//   TableBody,\n//   TableRow,\n//   TableCell,\n//   Grid,\n//   Toolbar,\n//   InputAdornment,\n// } from \"@material-ui/core\";\n// import Popup from \"../utils/Popup\";\n// import Button from \"@material-ui/core/Button\";\n// import Search from \"@material-ui/icons/Search\";\n// import { ErrorMessage, Formik, Form, Field } from \"formik\";\n// import { TextField } from \"material-ui-formik-components/TextField\";\n// import { getAllRanksQuery } from \"../queries&Mutations&Functions/Queries\";\n// const headCells = [\n//   { id: \"rankName\", label: \"Libelle Poste\" },\n//   { id: \"rankCode\", label: \"Code Poste\" },\n//   { id: \"id\", label: \"ID\" },\n// ];\n// const NewRankList = () => {\n//   const client = useApolloClient();\n//   const [ranks, setRanks] = useState([]);\n//   const [filterFn, setFilterFn] = useState({\n//     fn: (items) => {\n//       return items;\n//     },\n//   });\n//   const {\n//     TblContainer,\n//     TblHead,\n//     TblPagination,\n//     recordsAfterPagingAndSorting,\n//   } = useTable(ranks, headCells, filterFn);\n//   const loadRanksData = async () => {\n//     const { error, data } = await client.query({\n//       query: getAllRanksQuery,\n//     });\n//     const { ranks } = { ...data };\n//     console.log(ranks);\n//     setRanks(ranks);\n//   };\n//   useEffect(() => {\n//     loadRanksData();\n//     console.log(ranks);\n//   }, []);\n//   const handleSearch = (e) => {\n//     const target = e.target;\n//     setFilterFn({\n//       fn: (items) => {\n//         if (target.value == \"\") {\n//           return items;\n//         } else {\n//           items.filterFn((x) =>\n//             x.rankName.toLowerCase().includes(target.value)\n//           );\n//         }\n//       },\n//     });\n//   };\n//   return (\n//     <Formik>\n//       {({ submitForm, isSubmitting }) => {\n//         return (\n//           <Paper>\n//             <TblContainer>\n//               <Toolbar>\n//                 <Grid container>\n//                   <Grid item xs={8}>\n//                     <Field\n//                       component={TextField}\n//                       autocomplete=\"off\"\n//                       name=\"search\"\n//                       type=\"search\"\n//                       label=\"Search\"\n//                       fullWidth\n//                       onChange={handleSearch}\n//                       variant=\"outlined\"\n//                       inputProps={{\n//                         startAdornment: (\n//                           <InputAdornment position=\"start\">\n//                             <Search />\n//                           </InputAdornment>\n//                         ),\n//                       }}\n//                     />\n//                   </Grid>\n//                   <Grid item xs={4}>\n//                     <Button onClick={submitForm}>AddNew</Button>\n//                   </Grid>\n//                 </Grid>\n//               </Toolbar>\n//               <TblHead />\n//               <TableBody>\n//                 {recordsAfterPagingAndSorting().map((item) => (\n//                   <TableRow key={item.id}>\n//                     <TableCell>{item.rankName}</TableCell>\n//                     <TableCell>{item.rankCode}</TableCell>\n//                     <TableCell>{item.id}</TableCell>\n//                   </TableRow>\n//                 ))}\n//               </TableBody>\n//             </TblContainer>\n//             <TblPagination />\n//           </Paper>\n//         );\n//       }}\n//     </Formik>\n//   );\n// };\n// export default NewRankList;","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/rank/NewRankList.jsx"],"names":[],"mappingssourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import useTable from \"../utils/useTable\";\r\n// import { useApolloClient } from \"@apollo/react-hooks\";\r\n// import {\r\n//   Paper,\r\n//   Typography,\r\n//   TableBody,\r\n//   TableRow,\r\n//   TableCell,\r\n//   Grid,\r\n//   Toolbar,\r\n//   InputAdornment,\r\n// } from \"@material-ui/core\";\r\n// import Popup from \"../utils/Popup\";\r\n// import Button from \"@material-ui/core/Button\";\r\n// import Search from \"@material-ui/icons/Search\";\r\n// import { ErrorMessage, Formik, Form, Field } from \"formik\";\r\n// import { TextField } from \"material-ui-formik-components/TextField\";\r\n\r\n// import { getAllRanksQuery } from \"../queries&Mutations&Functions/Queries\";\r\n\r\n// const headCells = [\r\n//   { id: \"rankName\", label: \"Libelle Poste\" },\r\n//   { id: \"rankCode\", label: \"Code Poste\" },\r\n//   { id: \"id\", label: \"ID\" },\r\n// ];\r\n\r\n// const NewRankList = () => {\r\n//   const client = useApolloClient();\r\n//   const [ranks, setRanks] = useState([]);\r\n//   const [filterFn, setFilterFn] = useState({\r\n//     fn: (items) => {\r\n//       return items;\r\n//     },\r\n//   });\r\n\r\n//   const {\r\n//     TblContainer,\r\n//     TblHead,\r\n//     TblPagination,\r\n//     recordsAfterPagingAndSorting,\r\n//   } = useTable(ranks, headCells, filterFn);\r\n\r\n//   const loadRanksData = async () => {\r\n//     const { error, data } = await client.query({\r\n//       query: getAllRanksQuery,\r\n//     });\r\n//     const { ranks } = { ...data };\r\n//     console.log(ranks);\r\n\r\n//     setRanks(ranks);\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     loadRanksData();\r\n//     console.log(ranks);\r\n//   }, []);\r\n\r\n//   const handleSearch = (e) => {\r\n//     const target = e.target;\r\n//     setFilterFn({\r\n//       fn: (items) => {\r\n//         if (target.value == \"\") {\r\n//           return items;\r\n//         } else {\r\n//           items.filterFn((x) =>\r\n//             x.rankName.toLowerCase().includes(target.value)\r\n//           );\r\n//         }\r\n//       },\r\n//     });\r\n//   };\r\n\r\n//   return (\r\n//     <Formik>\r\n//       {({ submitForm, isSubmitting }) => {\r\n//         return (\r\n//           <Paper>\r\n//             <TblContainer>\r\n//               <Toolbar>\r\n//                 <Grid container>\r\n//                   <Grid item xs={8}>\r\n//                     <Field\r\n//                       component={TextField}\r\n//                       autocomplete=\"off\"\r\n//                       name=\"search\"\r\n//                       type=\"search\"\r\n//                       label=\"Search\"\r\n//                       fullWidth\r\n//                       onChange={handleSearch}\r\n//                       variant=\"outlined\"\r\n//                       inputProps={{\r\n//                         startAdornment: (\r\n//                           <InputAdornment position=\"start\">\r\n//                             <Search />\r\n//                           </InputAdornment>\r\n//                         ),\r\n//                       }}\r\n//                     />\r\n//                   </Grid>\r\n//                   <Grid item xs={4}>\r\n//                     <Button onClick={submitForm}>AddNew</Button>\r\n//                   </Grid>\r\n//                 </Grid>\r\n//               </Toolbar>\r\n//               <TblHead />\r\n//               <TableBody>\r\n//                 {recordsAfterPagingAndSorting().map((item) => (\r\n//                   <TableRow key={item.id}>\r\n//                     <TableCell>{item.rankName}</TableCell>\r\n//                     <TableCell>{item.rankCode}</TableCell>\r\n//                     <TableCell>{item.id}</TableCell>\r\n//                   </TableRow>\r\n//                 ))}\r\n//               </TableBody>\r\n//             </TblContainer>\r\n//             <TblPagination />\r\n//           </Paper>\r\n//         );\r\n//       }}\r\n//     </Formik>\r\n//   );\r\n// };\r\n// export default NewRankList;\r\n"]},"metadata":{},"sourceType":"script"}