{"ast":null,"code":"import _slicedToArray from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\sygefexMui\\\\sygefexMui-frontend\\\\src\\\\components\\\\phaseRank\\\\RegPhaseRank.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Error from \"../ErrorMessage.js\";\nimport { ErrorMessage, Formik, Form, Field } from \"formik\";\nimport { Select } from \"material-ui-formik-components/Select\";\nimport { useApolloClient, useMutation } from \"@apollo/react-hooks\";\nimport { Grid, Typography, Paper, Button, LinearProgress, CircularProgress } from \"@material-ui/core\";\nimport { getObjectFromID, removeTypename } from \"../queries&Mutations&Functions/Functions\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport * as Yup from \"yup\";\nimport Notification from \"../utils/Notification\";\nimport { createPhaseRankMutation } from \"../queries&Mutations&Functions/Mutations\";\nimport { getAllPhasesQuery, getAllRanksQuery } from \"../queries&Mutations&Functions/Queries\";\nvar useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\" // fontSize: 100,\n\n  },\n  pageStyled: {\n    display: \"grid\",\n    placeItems: \"center\",\n    marginTop: \"2rem\",\n    padding: \"1rem\",\n    minWidth: \"40%\"\n  },\n  titleStyled: {\n    display: \"grid\",\n    placeItems: \"center\"\n  },\n  centerAll: {\n    minWidth: \"40%\",\n    display: \"grid\",\n    placeItems: \"center\"\n  }\n});\nvar validationSchema = Yup.object().shape({});\n\nvar RegPhaseRank = function RegPhaseRank() {\n  _s();\n\n  var client = useApolloClient();\n  var classes = useStyles();\n  var initialValues = {\n    phase: \"\",\n    rank: \"\"\n  };\n\n  var _useState = useState({\n    phases: [],\n    ranks: []\n  }),\n      state = _useState[0],\n      setState = _useState[1];\n\n  var _useState2 = useState({\n    isOpen: false,\n    message: \"\",\n    type: \"\"\n  }),\n      notify = _useState2[0],\n      setNotify = _useState2[1];\n\n  var loadPhasesData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$client$query, data, allPhases, refinedPhase;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return client.query({\n                query: getAllPhasesQuery\n              });\n\n            case 2:\n              _yield$client$query = _context.sent;\n              data = _yield$client$query.data;\n              allPhases = data && data.phases;\n              console.log(allPhases);\n              refinedPhase = allPhases && removeTypename(allPhases);\n              setState(function (prev) {\n                return _objectSpread(_objectSpread({}, prev), {}, {\n                  phases: refinedPhase\n                });\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadPhasesData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var getPhasesOptions = state.phases && state.phases.map(function (item) {\n    return {\n      value: item.id,\n      label: item.phaseName\n    };\n  });\n  useEffect(function () {\n    loadPhasesData();\n  }, []);\n\n  var loadRanksData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _yield$client$query2, data, AllRanks, refinedRank;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return client.query({\n                query: getAllRanksQuery\n              });\n\n            case 2:\n              _yield$client$query2 = _context2.sent;\n              data = _yield$client$query2.data;\n              AllRanks = data && data.ranks;\n              refinedRank = AllRanks && removeTypename(AllRanks);\n              setState(function (prev) {\n                return _objectSpread(_objectSpread({}, prev), {}, {\n                  ranks: refinedRank\n                });\n              });\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function loadRanksData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var getRanksOptions = state.ranks && state.ranks.map(function (item) {\n    return {\n      value: item.id,\n      label: item.rankName\n    };\n  });\n  useEffect(function () {\n    loadRanksData();\n  }, []);\n  console.log(getObjectFromID(state.phase));\n\n  var _useMutation = useMutation(createPhaseRankMutation),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      createPhaseRank = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      loading = _useMutation2$.loading,\n      error = _useMutation2$.error;\n\n  return __jsx(Formik, {\n    method: \"POST\",\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(values, _ref3) {\n        var setSubmitting, resetForm, res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                setSubmitting = _ref3.setSubmitting, resetForm = _ref3.resetForm;\n                _context3.next = 3;\n                return createPhaseRank({\n                  variables: _objectSpread(_objectSpread({}, values), {}, {\n                    phase: state.phases && getObjectFromID(values.phase),\n                    rank: state.ranks && getObjectFromID(values.rank)\n                  })\n                });\n\n              case 3:\n                res = _context3.sent;\n                setNotify({\n                  isOpen: true,\n                  message: \"Opération réussie\",\n                  type: \"success\"\n                });\n                setTimeout(function () {\n                  console.log(JSON.stringify(values, null, 2));\n                  console.log(res);\n                  resetForm(true);\n                  setSubmitting(false);\n                }, 200);\n\n              case 6:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x, _x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }, function (_ref5) {\n    var submitForm = _ref5.submitForm,\n        isSubmitting = _ref5.isSubmitting;\n    return __jsx(\"div\", {\n      className: classes.centerAll,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 11\n      }\n    }, __jsx(Paper, {\n      className: classes.pageStyled,\n      elevation: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 13\n      }\n    }, __jsx(Form, {\n      \"aria-busy\": isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 15\n      }\n    }, (isSubmitting || loading) && __jsx(LinearProgress, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 47\n      }\n    }), __jsx(Grid, {\n      className: classes.centerAll,\n      container: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }, __jsx(Grid, {\n      container: true,\n      className: classes.centerAll,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 19\n      }\n    }, __jsx(Grid, {\n      item: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 21\n      }\n    }, __jsx(Typography, {\n      className: classes.titleStyled,\n      color: \"primary\",\n      gutterBottom: true,\n      variant: \"body2\",\n      component: \"h2\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 23\n      }\n    }, \"Postes des Phases de l'Examen\"))), __jsx(Grid, {\n      item: true,\n      className: classes.centerAll,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 19\n      }\n    }, __jsx(Field, {\n      name: \"phase\",\n      component: Select,\n      type: \"text\",\n      fullWidth: true,\n      label: \"Phase de l'examen\",\n      variant: \"outlined\",\n      options: getPhasesOptions,\n      disabled: isSubmitting || loading,\n      helpertext: __jsx(ErrorMessage, {\n        name: \"phase\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 35\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 21\n      }\n    }), __jsx(Field, {\n      name: \"rank\",\n      component: Select,\n      type: \"text\",\n      fullWidth: true,\n      label: \"Rang\",\n      variant: \"outlined\",\n      disabled: isSubmitting || loading,\n      options: getRanksOptions,\n      helpertext: __jsx(ErrorMessage, {\n        name: \"rank\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 35\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }\n    }), __jsx(Notification, {\n      notify: notify,\n      setNotify: setNotify,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }\n    }), __jsx(Button, {\n      disabled: isSubmitting,\n      onClick: submitForm,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }\n    }, (isSubmitting || loading) && __jsx(CircularProgress, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 53\n      }\n    }), isSubmitting || loading ? \"validation en cours\" : \"Valide Phase\"))))));\n  });\n};\n\n_s(RegPhaseRank, \"MmVZ7XDun0dWbfZoy6Iwovm0h1I=\", false, function () {\n  return [useApolloClient, useStyles, useMutation];\n});\n\n_c = RegPhaseRank;\nexport default RegPhaseRank;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegPhaseRank\");","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/phaseRank/RegPhaseRank.jsx"],"names":["React","useState","useEffect","Error","ErrorMessage","Formik","Form","Field","Select","useApolloClient","useMutation","Grid","Typography","Paper","Button","LinearProgress","CircularProgress","getObjectFromID","removeTypename","makeStyles","Yup","Notification","createPhaseRankMutation","getAllPhasesQuery","getAllRanksQuery","useStyles","root","display","flexDirection","pageStyled","placeItems","marginTop","padding","minWidth","titleStyled","centerAll","validationSchema","object","shape","RegPhaseRank","client","classes","initialValues","phase","rank","phases","ranks","state","setState","isOpen","message","type","notify","setNotify","loadPhasesData","query","data","allPhases","console","log","refinedPhase","prev","getPhasesOptions","map","item","value","id","label","phaseName","loadRanksData","AllRanks","refinedRank","getRanksOptions","rankName","createPhaseRank","loading","error","values","setSubmitting","resetForm","variables","res","setTimeout","JSON","stringify","submitForm","isSubmitting"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from \"react\";\r\nimport Error from \"../ErrorMessage.js\";\r\nimport { ErrorMessage, Formik, Form, Field } from \"formik\";\r\nimport { Select } from \"material-ui-formik-components/Select\";\r\nimport {useApolloClient, useMutation} from \"@apollo/react-hooks\"\r\n\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Paper,\r\n  Button,\r\n  LinearProgress,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  getObjectFromID,\r\n  removeTypename,\r\n} from \"../queries&Mutations&Functions/Functions\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport * as Yup from \"yup\";\r\nimport Notification from \"../utils/Notification\";\r\nimport { createPhaseRankMutation } from \"../queries&Mutations&Functions/Mutations\";\r\nimport { getAllPhasesQuery,getAllRanksQuery   } from \"../queries&Mutations&Functions/Queries\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    // fontSize: 100,\r\n  },\r\n  \r\n  pageStyled: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    marginTop: \"2rem\",\r\n    padding: \"1rem\",\r\n    minWidth: \"40%\",\r\n  },\r\n  \r\n  titleStyled: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n  },\r\n  \r\n  centerAll: {\r\n    minWidth: \"40%\",\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n  },\r\n});\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  });\r\n\r\nconst RegPhaseRank = () => {\r\n\r\n  const client = useApolloClient()\r\n  const classes = useStyles();\r\n  const initialValues = {\r\n    phase: \"\",\r\n    rank: \"\",\r\n  };\r\n\r\nconst [state, setState]= useState({phases:[], ranks:[]})\r\n  \r\n  const [notify, setNotify] = useState({\r\n    isOpen: false,\r\n    message: \"\",\r\n    type: \"\",\r\n  });\r\n  \r\nconst loadPhasesData=async()=>{\r\n  const {data}=await client.query({\r\n    query:getAllPhasesQuery,\r\n  })\r\n\r\n  const allPhases = data && data.phases;\r\n  console.log(allPhases);\r\n  const refinedPhase = allPhases && removeTypename(allPhases);\r\n  setState((prev)=>({...prev, phases:refinedPhase}))\r\n}\r\n\r\n  const getPhasesOptions =\r\n    state.phases &&\r\n    state.phases.map((item) => ({\r\n      value: item.id,\r\n      label: item.phaseName,\r\n    }));\r\nuseEffect(()=>{\r\nloadPhasesData()\r\n}, [])\r\n\r\n\r\n\r\nconst loadRanksData=async()=>{\r\n  const {data}=await client.query({\r\n    query:getAllRanksQuery,\r\n  })\r\nconst AllRanks = data && data.ranks;\r\n  const refinedRank = AllRanks && removeTypename(AllRanks);\r\n  setState((prev)=>({...prev, ranks:refinedRank}))\r\n}\r\n\r\n  const getRanksOptions =\r\n    state.ranks &&\r\n    state.ranks.map((item) => ({\r\n      value: item.id,\r\n      label: item.rankName,\r\n    }));\r\n\r\n\r\nuseEffect(()=>{\r\nloadRanksData()\r\n}, [])\r\n\r\n\r\nconsole.log(getObjectFromID(state.phase))\r\n  const [createPhaseRank, { loading, error }] = useMutation(\r\n    createPhaseRankMutation\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      method=\"POST\"\r\n      initialValues={initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n         const res = await createPhaseRank({\r\n          variables: {\r\n            ...values,\r\n            phase: state.phases && getObjectFromID(values.phase),\r\n            rank: state.ranks && getObjectFromID(values.rank),\r\n          },\r\n        });\r\n\r\n setNotify({\r\n            isOpen: true,\r\n            message: \"Opération réussie\",\r\n            type: \"success\",\r\n          });\r\n\r\n        setTimeout(() => {\r\n          console.log(JSON.stringify(values, null, 2));\r\n          console.log(res);\r\n           \r\n          resetForm(true);\r\n          setSubmitting(false);\r\n        }, 200);\r\n      }}\r\n    >\r\n      {({ submitForm, isSubmitting }) => {\r\n        return (\r\n          <div className={classes.centerAll}>\r\n            <Paper className={classes.pageStyled} elevation={3}>\r\n              <Form aria-busy={isSubmitting}>\r\n                {(isSubmitting || loading) && <LinearProgress />}\r\n                <Grid className={classes.centerAll} container>\r\n                  <Grid container className={classes.centerAll}>\r\n                    <Grid item>\r\n                      <Typography\r\n                        className={classes.titleStyled}\r\n                        color=\"primary\"\r\n                        gutterBottom\r\n                        variant=\"body2\"\r\n                        component=\"h2\"\r\n                      >\r\n                       Postes des Phases de l'Examen\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item className={classes.centerAll}>\r\n                    <Field\r\n                      name=\"phase\"\r\n                      component={Select}\r\n                      type=\"text\"\r\n                      fullWidth\r\n                      label=\"Phase de l'examen\"\r\n                      variant=\"outlined\"\r\n                        options={getPhasesOptions}\r\n                      disabled={isSubmitting || loading}\r\n                      helpertext={<ErrorMessage name=\"phase\" />}\r\n                    />\r\n                    <Field\r\n                      name=\"rank\"\r\n                      component={Select}\r\n                      type=\"text\"\r\n                      fullWidth\r\n                      label=\"Rang\"\r\n                      variant=\"outlined\"\r\n                      disabled={isSubmitting || loading}\r\n                        options={getRanksOptions}\r\n\r\n                      helpertext={<ErrorMessage name=\"rank\" />}\r\n                    />\r\n                <Notification notify={notify} setNotify={setNotify} />\r\n\r\n                    <Button disabled={isSubmitting} onClick={submitForm}>\r\n                      {(isSubmitting || loading) && <CircularProgress />}\r\n                      {isSubmitting || loading\r\n                        ? \"validation en cours\"\r\n                        : \"Valide Phase\"}\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            </Paper>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\nexport default RegPhaseRank;\r\n"]},"metadata":{},"sourceType":"module"}