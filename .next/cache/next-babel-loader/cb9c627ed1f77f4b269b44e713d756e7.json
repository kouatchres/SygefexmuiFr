{"ast":null,"code":"var _jsxFileName = \"E:\\\\sygefexMui\\\\sygefexMui-frontend\\\\src\\\\components\\\\phaseRank\\\\RegPhaseRank.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Error from \"../ErrorMessage.js\";\nimport { ErrorMessage, Formik, Form, Field } from \"formik\";\nimport { Select } from \"material-ui-formik-components/Select\";\nimport { useApolloClient, useMutation } from \"@apollo/react-hooks\";\nimport { Grid, Typography, Paper, Button, LinearProgress, CircularProgress } from \"@material-ui/core\";\nimport { getObjectFromID, removeTypename } from \"../queries&Mutations&Functions/Functions\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport * as Yup from \"yup\";\nimport Notification from \"../utils/Notification\";\nimport { createPhaseRankMutation } from \"../queries&Mutations&Functions/Mutations\";\nimport { getAllPhasesQuery, getAllRanksQuery } from \"../queries&Mutations&Functions/Queries\";\nconst useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\" // fontSize: 100,\n\n  },\n  divStyled: {\n    display: \"grid\",\n    placeItems: \"center\",\n    top: \"2rem\",\n    height: \"90vh\"\n  },\n  pageStyled: {\n    display: \"grid\",\n    placeItems: \"center\",\n    marginTop: \"2rem\",\n    padding: \"1rem\",\n    minWidth: \"40%\",\n    maxWidth: \"40%\"\n  },\n  listStyled: {\n    display: \"grid\",\n    placeItems: \"center\",\n    listStyleType: \"none\",\n    margin: 0,\n    padding: 0,\n    paddingTop: \"0.1rem\"\n  },\n  titleStyled: {\n    display: \"grid\",\n    placeItems: \"center\"\n  },\n  allControls: {\n    display: \"grid\",\n    placeItems: \"center\",\n    paddingTop: \"0.2rem\",\n    border: \"0.05rem solid #1254ac\",\n    // width: \"20vw\",\n    borderRadius: \"0.5rem\" // marginTop: \"2rem\",\n\n  },\n  centerAll: {\n    display: \"grid\",\n    placeItems: \"center\"\n  }\n});\nconst validationSchema = Yup.object().shape({// phaseName: Yup.string().required(\"Libelle phase Obligatoire\"),\n  // phaseCode: Yup.string().required(\"Code phase Obligatoire\"),\n});\n\nconst Login = () => {\n  const client = useApolloClient();\n  const classes = useStyles();\n  const initialValues = {\n    phase: \"\",\n    rank: \"\"\n  };\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    phases: [],\n    ranks: []\n  });\n  const {\n    0: notify,\n    1: setNotify\n  } = useState({\n    isOpen: false,\n    message: \"\",\n    type: \"\"\n  });\n\n  const loadPhasesData = async () => {\n    const {\n      data\n    } = await client.query({\n      query: getAllPhasesQuery\n    });\n    const allPhases = data && data.phases;\n    console.log(allPhases);\n    const refinedPhase = allPhases && removeTypename(allPhases);\n    setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      phases: refinedPhase\n    }));\n  };\n\n  const getPhasesOptions = state.phases && state.phases.map(item => ({\n    value: item.id,\n    label: item.phaseName\n  }));\n  useEffect(() => {\n    loadPhasesData();\n  }, []);\n\n  const loadRanksData = async () => {\n    const {\n      data\n    } = await client.query({\n      query: getAllRanksQuery\n    });\n    const AllRanks = data && data.ranks;\n    const refinedRank = AllRanks && removeTypename(AllRanks);\n    setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      ranks: refinedRank\n    }));\n  };\n\n  const getRanksOptions = state.ranks && state.ranks.map(item => ({\n    value: item.id,\n    label: item.rankName\n  }));\n  useEffect(() => {\n    loadRanksData();\n  }, []);\n  const [createPhaseRank, {\n    loading,\n    Error: errMut\n  }] = useMutation(createPhaseRankMutation);\n  return __jsx(Formik, {\n    method: \"POST\",\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: async (values, {\n      setSubmitting,\n      resetForm\n    }) => {\n      const res = await createPhaseRank({\n        variables: _objectSpread(_objectSpread({}, values), {}, {\n          phase: state.phases && getObjectFromID(values.phase.value),\n          rank: state.ranks && getObjectFromID(values.rank.value)\n        })\n      });\n      setTimeout(() => {\n        console.log(JSON.stringify(values, null, 2));\n        console.log(res);\n        setNotify({\n          isOpen: true,\n          message: \"Opération réussie\",\n          type: \"success\"\n        });\n        resetForm(true);\n        setSubmitting(false);\n      }, 200);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, ({\n    submitForm,\n    isSubmitting\n  }) => {\n    return __jsx(\"div\", {\n      className: classes.centerAll,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }\n    }, __jsx(Paper, {\n      className: classes.pageStyled,\n      elevation: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    }, __jsx(Form, {\n      \"aria-busy\": isSubmitting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 15\n      }\n    }, (isSubmitting || loading) && __jsx(LinearProgress, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 47\n      }\n    }), __jsx(Grid, {\n      className: classes.centerAll,\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 17\n      }\n    }, __jsx(Grid, {\n      container: true,\n      className: classes.centerAll,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 19\n      }\n    }, __jsx(Grid, {\n      item: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 21\n      }\n    }, __jsx(Typography, {\n      className: classes.titleStyled,\n      color: \"primary\",\n      gutterBottom: true,\n      variant: \"body2\",\n      component: \"h6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 23\n      }\n    }, \"Postes des Phases de l'Examen\"))), __jsx(Grid, {\n      item: true,\n      className: classes.centerAll,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 19\n      }\n    }, __jsx(Field, {\n      name: \"phase\",\n      component: Select,\n      type: \"text\",\n      fullWidth: true,\n      label: \"La Phase de l'examen\",\n      variant: \"outlined\",\n      options: getPhasesOptions,\n      disabled: isSubmitting || loading,\n      helpertext: __jsx(ErrorMessage, {\n        name: \"phase\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 35\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 21\n      }\n    }), __jsx(Field, {\n      name: \"rank\",\n      component: Select,\n      type: \"text\",\n      fullWidth: true,\n      label: \"Rang\",\n      variant: \"outlined\",\n      disabled: isSubmitting || loading,\n      options: getRanksOptions,\n      helpertext: __jsx(ErrorMessage, {\n        name: \"rank\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 35\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 21\n      }\n    }), __jsx(Notification, {\n      notify: notify,\n      setNotify: setNotify,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }\n    }), __jsx(Button, {\n      disabled: isSubmitting,\n      onClick: submitForm,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 21\n      }\n    }, (isSubmitting || loading) && __jsx(CircularProgress, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 53\n      }\n    }), isSubmitting || loading ? \"Création en cours\" : \"Poste a la Phase\"))))));\n  });\n};\n\nexport default Login;","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/phaseRank/RegPhaseRank.jsx"],"names":["React","useState","useEffect","Error","ErrorMessage","Formik","Form","Field","Select","useApolloClient","useMutation","Grid","Typography","Paper","Button","LinearProgress","CircularProgress","getObjectFromID","removeTypename","makeStyles","Yup","Notification","createPhaseRankMutation","getAllPhasesQuery","getAllRanksQuery","useStyles","root","display","flexDirection","divStyled","placeItems","top","height","pageStyled","marginTop","padding","minWidth","maxWidth","listStyled","listStyleType","margin","paddingTop","titleStyled","allControls","border","borderRadius","centerAll","validationSchema","object","shape","Login","client","classes","initialValues","phase","rank","state","setState","phases","ranks","notify","setNotify","isOpen","message","type","loadPhasesData","data","query","allPhases","console","log","refinedPhase","prev","getPhasesOptions","map","item","value","id","label","phaseName","loadRanksData","AllRanks","refinedRank","getRanksOptions","rankName","createPhaseRank","loading","errMut","values","setSubmitting","resetForm","res","variables","setTimeout","JSON","stringify","submitForm","isSubmitting"],"mappings":"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","sourcesContent":["import React,{useState, useEffect} from \"react\";\r\nimport Error from \"../ErrorMessage.js\";\r\nimport { ErrorMessage, Formik, Form, Field } from \"formik\";\r\nimport { Select } from \"material-ui-formik-components/Select\";\r\nimport {useApolloClient, useMutation} from \"@apollo/react-hooks\"\r\n\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Paper,\r\n  Button,\r\n  LinearProgress,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  getObjectFromID,\r\n  removeTypename,\r\n} from \"../queries&Mutations&Functions/Functions\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport * as Yup from \"yup\";\r\nimport Notification from \"../utils/Notification\";\r\nimport { createPhaseRankMutation } from \"../queries&Mutations&Functions/Mutations\";\r\nimport { getAllPhasesQuery,getAllRanksQuery   } from \"../queries&Mutations&Functions/Queries\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    // fontSize: 100,\r\n  },\r\n  divStyled: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    top: \"2rem\",\r\n    height: \"90vh\",\r\n  },\r\n  pageStyled: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    marginTop: \"2rem\",\r\n    padding: \"1rem\",\r\n    minWidth: \"40%\",\r\n    maxWidth: \"40%\",\r\n  },\r\n  listStyled: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    listStyleType: \"none\",\r\n    margin: 0,\r\n    padding: 0,\r\n    paddingTop: \"0.1rem\",\r\n  },\r\n  titleStyled: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n  },\r\n\r\n  allControls: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    paddingTop: \"0.2rem\",\r\n    border: \"0.05rem solid #1254ac\",\r\n    // width: \"20vw\",\r\n    borderRadius: \"0.5rem\",\r\n    // marginTop: \"2rem\",\r\n  },\r\n  centerAll: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n  },\r\n});\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  // phaseName: Yup.string().required(\"Libelle phase Obligatoire\"),\r\n\r\n  // phaseCode: Yup.string().required(\"Code phase Obligatoire\"),\r\n});\r\n\r\nconst Login = () => {\r\n\r\n  const client = useApolloClient()\r\n\r\n\r\n\r\n  const classes = useStyles();\r\n  const initialValues = {\r\n    phase: \"\",\r\n    rank: \"\",\r\n  };\r\n\r\nconst [state, setState]= useState({phases:[], ranks:[]})\r\n  \r\n  const [notify, setNotify] = useState({\r\n    isOpen: false,\r\n    message: \"\",\r\n    type: \"\",\r\n  });\r\n  \r\nconst loadPhasesData=async()=>{\r\n  const {data}=await client.query({\r\n    query:getAllPhasesQuery,\r\n  })\r\n\r\n  const allPhases = data && data.phases;\r\n  console.log(allPhases);\r\n  const refinedPhase = allPhases && removeTypename(allPhases);\r\n  setState((prev)=>({...prev, phases:refinedPhase}))\r\n}\r\n\r\n  const getPhasesOptions =\r\n    state.phases &&\r\n    state.phases.map((item) => ({\r\n      value: item.id,\r\n      label: item.phaseName,\r\n    }));\r\nuseEffect(()=>{\r\nloadPhasesData()\r\n}, [])\r\n\r\n\r\n\r\nconst loadRanksData=async()=>{\r\n  const {data}=await client.query({\r\n    query:getAllRanksQuery,\r\n  })\r\nconst AllRanks = data && data.ranks;\r\n  const refinedRank = AllRanks && removeTypename(AllRanks);\r\n  setState((prev)=>({...prev, ranks:refinedRank}))\r\n}\r\n\r\n  const getRanksOptions =\r\n    state.ranks &&\r\n    state.ranks.map((item) => ({\r\n      value: item.id,\r\n      label: item.rankName,\r\n    }));\r\nuseEffect(()=>{\r\nloadRanksData()\r\n}, [])\r\n\r\n\r\n\r\n  const [createPhaseRank, { loading, Error: errMut }] = useMutation(\r\n    createPhaseRankMutation\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      method=\"POST\"\r\n      initialValues={initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n         const res = await createPhaseRank({\r\n          variables: {\r\n            ...values,\r\n            phase: state.phases && getObjectFromID(values.phase.value),\r\n            rank: state.ranks && getObjectFromID(values.rank.value),\r\n          },\r\n        });\r\n        setTimeout(() => {\r\n          console.log(JSON.stringify(values, null, 2));\r\n          console.log(res);\r\nsetNotify({\r\n            isOpen: true,\r\n            message: \"Opération réussie\",\r\n            type: \"success\",\r\n          });\r\n          resetForm(true);\r\n          setSubmitting(false);\r\n        }, 200);\r\n      }}\r\n    >\r\n      {({ submitForm, isSubmitting }) => {\r\n        return (\r\n          <div className={classes.centerAll}>\r\n            <Paper className={classes.pageStyled} elevation={3}>\r\n              <Form aria-busy={isSubmitting}>\r\n                {(isSubmitting || loading) && <LinearProgress />}\r\n                <Grid className={classes.centerAll} container>\r\n                  <Grid container className={classes.centerAll}>\r\n                    <Grid item>\r\n                      <Typography\r\n                        className={classes.titleStyled}\r\n                        color=\"primary\"\r\n                        gutterBottom\r\n                        variant=\"body2\"\r\n                        component=\"h6\"\r\n                      >\r\n                       Postes des Phases de l'Examen\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item className={classes.centerAll}>\r\n                    <Field\r\n                      name=\"phase\"\r\n                      component={Select}\r\n                      type=\"text\"\r\n                      fullWidth\r\n                      label=\"La Phase de l'examen\"\r\n                      variant=\"outlined\"\r\n                        options={getPhasesOptions}\r\n                      disabled={isSubmitting || loading}\r\n                      helpertext={<ErrorMessage name=\"phase\" />}\r\n                    />\r\n                    <Field\r\n                      name=\"rank\"\r\n                      component={Select}\r\n                      type=\"text\"\r\n                      fullWidth\r\n                      label=\"Rang\"\r\n                      variant=\"outlined\"\r\n                      disabled={isSubmitting || loading}\r\n                        options={getRanksOptions}\r\n\r\n                      helpertext={<ErrorMessage name=\"rank\" />}\r\n                    />\r\n                <Notification notify={notify} setNotify={setNotify} />\r\n\r\n                    <Button disabled={isSubmitting} onClick={submitForm}>\r\n                      {(isSubmitting || loading) && <CircularProgress />}\r\n                      {isSubmitting || loading\r\n                        ? \"Création en cours\"\r\n                        : \"Poste a la Phase\"}\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            </Paper>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\nexport default Login;\r\n"]},"metadata":{},"sourceType":"module"}