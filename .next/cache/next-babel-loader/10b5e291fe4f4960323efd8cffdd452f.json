{"ast":null,"code":"import _slicedToArray from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\sygefexMui\\\\sygefexMui-frontend\\\\src\\\\components\\\\region\\\\DeleteRegion.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { StyledButton, ButtonStyled } from '../utils/FormInputs';\nimport { getAllRegionsQuery } from \"../queries&Mutations&Functions/Queries\";\nimport { deleteRegionMutation } from \"../queries&Mutations&Functions/Mutations\";\n\nvar DeleteRegion = function DeleteRegion(_ref) {\n  _s();\n\n  var id = _ref.id,\n      others = _objectWithoutProperties(_ref, [\"id\"]);\n\n  var updateCache = function updateCache(cache, payload) {\n    // manually update the cache so that the data are all the same\n    // 1. read the cache for the data we want\n    var data = cache && cache.readQuery({\n      query: getAllRegionsQuery\n    });\n    cache && cache.writeQuery({\n      query: getAllRegionsQuery,\n      data: {\n        regions: data.regions.filter(function (item) {\n          return item.id !== payload.data.deleteRegion.id;\n        })\n      }\n    });\n    console.log(\"getting payload\");\n    console.log(payload);\n  };\n\n  var _useMutation = useMutation(deleteRegionMutation, {\n    variables: {\n      id: id\n    },\n    update: updateCache()\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      deleteRegion = _useMutation2[0];\n\n  return __jsx(ButtonStyled, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, __jsx(StyledButton, {\n    onClick: function onClick() {\n      if (confirm(\"Do you want to delete this Region ?\")) {\n        deleteRegion();\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, others.children));\n};\n\n_s(DeleteRegion, \"i2YjJdLvnXlaMjLt6+VdQwT5FF8=\", false, function () {\n  return [useMutation];\n});\n\n_c = DeleteRegion;\nexport default DeleteRegion;\n\nvar _c;\n\n$RefreshReg$(_c, \"DeleteRegion\");","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/region/DeleteRegion.jsx"],"names":["React","useMutation","StyledButton","ButtonStyled","getAllRegionsQuery","deleteRegionMutation","DeleteRegion","id","others","updateCache","cache","payload","data","readQuery","query","writeQuery","regions","filter","item","deleteRegion","console","log","variables","update","confirm","children"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,YAAT,EAAuBC,YAAvB,QAA2C,qBAA3C;AACA,SAASC,kBAAT,QAAmC,wCAAnC;AACA,SAASC,oBAAT,QAAqC,0CAArC;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,OAAuB;AAAA;;AAAA,MAApBC,EAAoB,QAApBA,EAAoB;AAAA,MAAbC,MAAa;;AAC1C,MAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,KAAD,EAAQC,OAAR,EAAoB;AACtC;AACA;AACA,QAAMC,IAAI,GAAGF,KAAK,IAAIA,KAAK,CAACG,SAAN,CAAgB;AAAEC,MAAAA,KAAK,EAAEV;AAAT,KAAhB,CAAtB;AACAM,IAAAA,KAAK,IAAIA,KAAK,CAACK,UAAN,CAAiB;AACxBD,MAAAA,KAAK,EAAEV,kBADiB;AAExBQ,MAAAA,IAAI,EAAE;AACJI,QAAAA,OAAO,EAAEJ,IAAI,CAACI,OAAL,CAAaC,MAAb,CACP,UAAAC,IAAI;AAAA,iBAAIA,IAAI,CAACX,EAAL,KAAYI,OAAO,CAACC,IAAR,CAAaO,YAAb,CAA0BZ,EAA1C;AAAA,SADG;AADL;AAFkB,KAAjB,CAAT;AAQAa,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAYV,OAAZ;AACD,GAdD;;AAD0C,qBAiBnBV,WAAW,CAACI,oBAAD,EAAuB;AACvDiB,IAAAA,SAAS,EAAE;AAAEf,MAAAA,EAAE,EAAFA;AAAF,KAD4C;AAEvDgB,IAAAA,MAAM,EAAEd,WAAW;AAFoC,GAAvB,CAjBQ;AAAA;AAAA,MAiBnCU,YAjBmC;;AAuB1C,SACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AACE,IAAA,OAAO,EAAE,mBAAM;AACb,UAAIK,OAAO,CAAC,qCAAD,CAAX,EAAoD;AAClDL,QAAAA,YAAY;AACb;AACF,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOGX,MAAM,CAACiB,QAPV,CADF,CADF;AAaD,CApCD;;GAAMnB,Y;UAiBmBL,W;;;KAjBnBK,Y;AAsCN,eAAeA,YAAf","sourcesContent":["import React from \"react\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { StyledButton, ButtonStyled } from '../utils/FormInputs'\r\nimport { getAllRegionsQuery } from \"../queries&Mutations&Functions/Queries\";\r\nimport { deleteRegionMutation } from \"../queries&Mutations&Functions/Mutations\";\r\n\r\nconst DeleteRegion = ({ id, ...others }) => {\r\n  const updateCache = (cache, payload) => {\r\n    // manually update the cache so that the data are all the same\r\n    // 1. read the cache for the data we want\r\n    const data = cache && cache.readQuery({ query: getAllRegionsQuery });\r\n    cache && cache.writeQuery({\r\n      query: getAllRegionsQuery,\r\n      data: {\r\n        regions: data.regions.filter(\r\n          item => item.id !== payload.data.deleteRegion.id,\r\n        ),\r\n      },\r\n    });\r\n    console.log(\"getting payload\");\r\n    console.log(payload);\r\n  };\r\n\r\n  const [deleteRegion] = useMutation(deleteRegionMutation, {\r\n    variables: { id },\r\n    update: updateCache()\r\n  }\r\n\r\n  )\r\n  return (\r\n    <ButtonStyled>\r\n      <StyledButton\r\n        onClick={() => {\r\n          if (confirm(\"Do you want to delete this Region ?\")) {\r\n            deleteRegion();\r\n          }\r\n        }}\r\n      >\r\n        {others.children}\r\n      </StyledButton >\r\n    </ButtonStyled >\r\n  );\r\n}\r\n\r\nexport default DeleteRegion;\r\n"]},"metadata":{},"sourceType":"module"}