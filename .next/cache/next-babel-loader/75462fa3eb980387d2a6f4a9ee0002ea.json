{"ast":null,"code":"import _defineProperty from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\sygefexMui\\\\sygefexMui-frontend\\\\src\\\\components\\\\subDivision\\\\UpdateSubDivision.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect } from \"react\";\nimport Error from \"../ErrorMessage.js\";\nimport useForm from \"../utils/useForm\";\nimport { Formik, Form } from \"formik\";\nimport { StyledPage } from \"../styles/StyledPage\";\nimport { singleSubDivisionQuery } from \"../queries&Mutations&Functions/Queries\";\nimport { updateSubDivisionMutation } from \"../queries&Mutations&Functions/Mutations\";\nimport * as Yup from \"yup\";\nimport { useMutation, useApolloClient } from \"@apollo/react-hooks\";\nimport { StyledButton, ButtonStyled, StyledForm, SygexInput } from \"../utils/FormInputs\";\nvar validationSchema = Yup.object().shape({\n  subDivName: Yup.string().required(\"Nom du arrondissement Obligatoire\"),\n  subDivCode: Yup.string().required(\"Code du arrondissement Obligatoire\")\n});\n\nvar UpdateSubDivision = function UpdateSubDivision(props) {\n  _s();\n\n  var _useForm = useForm({\n    subDivName: \"\",\n    subDivCode: \"\"\n  }),\n      _useForm2 = _slicedToArray(_useForm, 2),\n      state = _useForm2[0],\n      setState = _useForm2[1];\n\n  var client = useApolloClient();\n\n  var loadSubDivData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$client$query, data, error, getSubDivData, subDivName, subDivCode;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return client.query({\n                query: singleSubDivisionQuery,\n                variables: {\n                  id: props.id\n                }\n              });\n\n            case 2:\n              _yield$client$query = _context.sent;\n              data = _yield$client$query.data;\n              error = _yield$client$query.error;\n              getSubDivData = data.subDivision;\n              subDivName = getSubDivData.subDivName, subDivCode = getSubDivData.subDivCode;\n              setState({\n                subDivName: subDivName,\n                subDivCode: subDivCode\n              });\n              return _context.abrupt(\"return\", getSubDivData);\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadSubDivData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    loadSubDivData();\n  }, []);\n  console.log(state);\n\n  var _useMutation = useMutation(updateSubDivisionMutation, {\n    variables: {\n      id: props.id\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      updateSubDivision = _useMutation2[0];\n\n  return __jsx(Formik, {\n    initialValues: state || initialValues,\n    validationSchema: validationSchema,\n    enableReinitialize: true,\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values, _ref2) {\n        var setSubmitting, resetForm, res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                setSubmitting = _ref2.setSubmitting, resetForm = _ref2.resetForm;\n                _context2.next = 3;\n                return updateSubDivision({\n                  variables: _objectSpread({}, values)\n                });\n\n              case 3:\n                res = _context2.sent;\n                setTimeout(function () {\n                  console.log(JSON.stringify(values, null, 2));\n                  console.log(res);\n                  resetForm(true);\n                  setSubmitting(false);\n                }, 200);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, function (_ref4) {\n    var values = _ref4.values,\n        isSubmitting = _ref4.isSubmitting;\n    return __jsx(StyledPage, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, __jsx(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }\n    }, \"Modification d'Info Arrondissement\"), __jsx(StyledForm, {\n      disabled: isSubmitting,\n      \"aria-busy\": isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }\n    }, __jsx(SygexInput, {\n      type: \"text\",\n      id: \"subDivName\",\n      name: \"subDivName\",\n      label: \"Nom Arrondissement\",\n      required: true,\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 15\n      }\n    }), __jsx(SygexInput, {\n      type: \"text\",\n      id: \"subDivCode\",\n      name: \"subDivCode\",\n      label: \"Code Arrondissement\",\n      required: true,\n      disabled: isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }\n    }), __jsx(ButtonStyled, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }, __jsx(StyledButton, {\n      type: \"submit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    }, \"Valid\", isSubmitting ? \"ation en cours\" : \"er\")))));\n  });\n};\n\n_s(UpdateSubDivision, \"RUekxAGBfOe/xyicqHH9a+T+r4g=\", false, function () {\n  return [useForm, useApolloClient, useMutation];\n});\n\n_c = UpdateSubDivision;\nexport default UpdateSubDivision;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateSubDivision\");","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/subDivision/UpdateSubDivision.jsx"],"names":["React","useEffect","Error","useForm","Formik","Form","StyledPage","singleSubDivisionQuery","updateSubDivisionMutation","Yup","useMutation","useApolloClient","StyledButton","ButtonStyled","StyledForm","SygexInput","validationSchema","object","shape","subDivName","string","required","subDivCode","UpdateSubDivision","props","state","setState","client","loadSubDivData","query","variables","id","data","error","getSubDivData","subDivision","console","log","updateSubDivision","initialValues","values","setSubmitting","resetForm","res","setTimeout","JSON","stringify","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport Error from \"../ErrorMessage.js\";\r\nimport useForm from \"../utils/useForm\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { StyledPage } from \"../styles/StyledPage\";\r\nimport { singleSubDivisionQuery } from \"../queries&Mutations&Functions/Queries\";\r\nimport { updateSubDivisionMutation } from \"../queries&Mutations&Functions/Mutations\";\r\nimport * as Yup from \"yup\";\r\nimport { useMutation, useApolloClient } from \"@apollo/react-hooks\";\r\nimport {\r\n  StyledButton,\r\n  ButtonStyled,\r\n  StyledForm,\r\n  SygexInput,\r\n} from \"../utils/FormInputs\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  subDivName: Yup.string().required(\"Nom du arrondissement Obligatoire\"),\r\n  subDivCode: Yup.string().required(\"Code du arrondissement Obligatoire\"),\r\n});\r\n\r\nconst UpdateSubDivision = (props) => {\r\n  const [state, setState] = useForm({ subDivName: \"\", subDivCode: \"\" });\r\n  const client = useApolloClient();\r\n\r\n  const loadSubDivData = async () => {\r\n    const { data, error } = await client.query({\r\n      query: singleSubDivisionQuery,\r\n      variables: { id: props.id },\r\n    });\r\n\r\n    const getSubDivData = data.subDivision;\r\n    const { subDivName, subDivCode } = getSubDivData;\r\n    setState({ subDivName: subDivName, subDivCode: subDivCode });\r\n    return getSubDivData;\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadSubDivData();\r\n  }, []);\r\n  console.log(state);\r\n  const [updateSubDivision] = useMutation(updateSubDivisionMutation, {\r\n    variables: { id: props.id },\r\n  });\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={state || initialValues}\r\n      validationSchema={validationSchema}\r\n      enableReinitialize={true}\r\n      onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n        const res = await updateSubDivision({\r\n          variables: { ...values },\r\n        });\r\n        setTimeout(() => {\r\n          console.log(JSON.stringify(values, null, 2));\r\n          console.log(res);\r\n          resetForm(true);\r\n          setSubmitting(false);\r\n        }, 200);\r\n      }}\r\n    >\r\n      {({ values, isSubmitting }) => (\r\n        <StyledPage>\r\n          <h4>Modification d'Info Arrondissement</h4>\r\n          <StyledForm disabled={isSubmitting} aria-busy={isSubmitting}>\r\n            <Form>\r\n              <SygexInput\r\n                type=\"text\"\r\n                id=\"subDivName\"\r\n                name=\"subDivName\"\r\n                label=\"Nom Arrondissement\"\r\n                required\r\n                disabled={isSubmitting}\r\n              />\r\n              <SygexInput\r\n                type=\"text\"\r\n                id=\"subDivCode\"\r\n                name=\"subDivCode\"\r\n                label=\"Code Arrondissement\"\r\n                required\r\n                disabled={isSubmitting}\r\n              />\r\n              <ButtonStyled>\r\n                <StyledButton type=\"submit\">\r\n                  Valid{isSubmitting ? \"ation en cours\" : \"er\"}\r\n                </StyledButton>\r\n              </ButtonStyled>\r\n            </Form>\r\n          </StyledForm>\r\n        </StyledPage>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default UpdateSubDivision;\r\n"]},"metadata":{},"sourceType":"module"}