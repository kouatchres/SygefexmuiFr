{"ast":null,"code":"var _jsxFileName = \"E:\\\\sygefexMui\\\\sygefexMui-frontend\\\\src\\\\components\\\\rank\\\\NewRankList.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport useTable from \"../utils/useTable\";\nimport { useApolloClient } from \"@apollo/react-hooks\";\nimport { Paper, TableBody, TableRow, TableCell } from \"@material-ui/core\";\nimport Popup from \"../utils/Popup\";\nimport Button from \"@material-ui/core/Button\";\nimport { getAllRanksQuery } from \"../queries&Mutations&Functions/Queries\";\nconst headCells = [{\n  id: \"rankName\",\n  label: \"Libelle Poste\"\n}, {\n  id: \"rankCode\",\n  label: \"Code Poste\"\n}, {\n  id: \"id\",\n  label: \"ID\"\n}];\n\nconst NewRankList = () => {\n  const client = useApolloClient();\n  const {\n    0: ranks,\n    1: setRanks\n  } = useState([]);\n  const {\n    TblContainer\n  } = useTable(records, headCells);\n\n  const loadRanksData = async () => {\n    const {\n      error,\n      data\n    } = await client.query({\n      query: getAllRanksQuery\n    });\n\n    const {\n      ranks\n    } = _objectSpread({}, data);\n\n    console.log(ranks);\n    setRanks(ranks);\n  };\n\n  useEffect(() => {\n    loadRanksData();\n    console.log(ranks);\n  }, []);\n  return __jsx(Paper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, __jsx(TblContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }, __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, ranks && ranks.map(item => __jsx(TableRow, {\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 15\n    }\n  }, __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, item.rankName), __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, item.rankCode), __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }, item.id))))));\n};\n\nexport default NewRankList;","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/rank/NewRankList.jsx"],"names":["React","useState","useEffect","useTable","useApolloClient","Paper","TableBody","TableRow","TableCell","Popup","Button","getAllRanksQuery","headCells","id","label","NewRankList","client","ranks","setRanks","TblContainer","records","loadRanksData","error","data","query","console","log","map","item","rankName","rankCode"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,KAAT,EAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,SAArC,QAAsD,mBAAtD;AACA,OAAOC,KAAP,MAAkB,gBAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,gBAAT,QAAiC,wCAAjC;AAIA,MAAMC,SAAS,GAAC,CACd;AAAEC,EAAAA,EAAE,EAAC,UAAL;AAAiBC,EAAAA,KAAK,EAAC;AAAvB,CADc,EAEd;AAAED,EAAAA,EAAE,EAAC,UAAL;AAAiBC,EAAAA,KAAK,EAAC;AAAvB,CAFc,EAGd;AAAED,EAAAA,EAAE,EAAC,IAAL;AAAWC,EAAAA,KAAK,EAAC;AAAjB,CAHc,CAAhB;;AAMA,MAAMC,WAAW,GAAG,MAAM;AACxB,QAAMC,MAAM,GAAGZ,eAAe,EAA9B;AACA,QAAM;AAAA,OAACa,KAAD;AAAA,OAAQC;AAAR,MAAoBjB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAEkB,IAAAA;AAAF,MAAmBhB,QAAQ,CAACiB,OAAD,EAAUR,SAAV,CAAjC;;AAEA,QAAMS,aAAa,GAAG,YAAY;AAChC,UAAM;AAAEC,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAkB,MAAMP,MAAM,CAACQ,KAAP,CAAa;AACzCA,MAAAA,KAAK,EAAEb;AADkC,KAAb,CAA9B;;AAGA,UAAM;AAAEM,MAAAA;AAAF,0BAAiBM,IAAjB,CAAN;;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AAEAC,IAAAA,QAAQ,CAAED,KAAF,CAAR;AACD,GARD;;AAUAf,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,aAAa;AAEbI,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAZ;AACD,GAJQ,EAIN,EAJM,CAAT;AAMA,SACE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,IACJA,KAAK,CAACU,GAAN,CAAWC,IAAD,IACR,MAAC,QAAD;AAAU,IAAA,GAAG,EAAEA,IAAI,CAACf,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYe,IAAI,CAACC,QAAjB,CADF,EAEE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYD,IAAI,CAACE,QAAjB,CAFF,EAGE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAYF,IAAI,CAACf,EAAjB,CAHF,CADF,CAFJ,CADF,CADF,CADF;AAgBD,CArCD;;AAsCA,eAAeE,WAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport useTable from \"../utils/useTable\";\r\nimport { useApolloClient } from \"@apollo/react-hooks\";\r\nimport { Paper, TableBody, TableRow, TableCell } from \"@material-ui/core\";\r\nimport Popup from \"../utils/Popup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { getAllRanksQuery } from \"../queries&Mutations&Functions/Queries\";\r\n\r\n\r\n\r\nconst headCells=[\r\n  { id:\"rankName\", label:\"Libelle Poste\"},\r\n  { id:\"rankCode\", label:\"Code Poste\"},\r\n  { id:\"id\", label:\"ID\"},\r\n]\r\n\r\nconst NewRankList = () => {\r\n  const client = useApolloClient();\r\n  const [ranks, setRanks] = useState([]);\r\n  const { TblContainer } = useTable(records, headCells);\r\n\r\n  const loadRanksData = async () => {\r\n    const { error, data } = await client.query({\r\n      query: getAllRanksQuery,\r\n    });\r\n    const { ranks } = { ...data };\r\n    console.log(ranks);\r\n\r\n    setRanks( ranks );\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadRanksData();\r\n\r\n    console.log(ranks);\r\n  }, []);\r\n\r\n  return (\r\n    <Paper>\r\n      <TblContainer>\r\n        <TableBody>\r\n          {ranks &&\r\n            ranks.map((item) => (\r\n              <TableRow key={item.id}>\r\n                <TableCell>{item.rankName}</TableCell>\r\n                <TableCell>{item.rankCode}</TableCell>\r\n                <TableCell>{item.id}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n        </TableBody>\r\n      </TblContainer>\r\n    </Paper>\r\n  );\r\n};\r\nexport default NewRankList;\r\n"]},"metadata":{},"sourceType":"module"}