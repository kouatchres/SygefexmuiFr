{"ast":null,"code":"import _regeneratorRuntime from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\sygefexMui\\\\sygefexMui-frontend\\\\src\\\\components\\\\rank\\\\NewRankList.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport useTable from \"../utils/useTable\";\nimport { useApolloClient } from \"@apollo/react-hooks\";\nimport { Paper, Typography, TableBody, TableRow, TableCell, Grid, InputAdornment } from \"@material-ui/core\";\nimport Popup from \"../utils/Popup\";\nimport Button from \"@material-ui/core/Button\";\nimport Search from \"@material-ui/icons/Search\";\nimport { ErrorMessage, Formik, Form, Field } from \"formik\";\nimport { TextField } from \"material-ui-formik-components/TextField\";\nimport { getAllRanksQuery } from \"../queries&Mutations&Functions/Queries\";\nvar headCells = [{\n  id: \"rankName\",\n  label: \"Libelle Poste\"\n}, {\n  id: \"rankCode\",\n  label: \"Code Poste\"\n}, {\n  id: \"id\",\n  label: \"ID\"\n}];\n\nvar NewRankList = function NewRankList() {\n  _s();\n\n  var client = useApolloClient();\n\n  var _useState = useState([]),\n      ranks = _useState[0],\n      setRanks = _useState[1];\n\n  var _useState2 = useState({\n    fn: function fn(items) {\n      return items;\n    }\n  }),\n      filterFn = _useState2[0],\n      setFilterFn = _useState2[1];\n\n  var _useTable = useTable(ranks, headCells, filterFn),\n      TblContainer = _useTable.TblContainer,\n      TblHead = _useTable.TblHead,\n      TblPagination = _useTable.TblPagination,\n      recordsAfterPagingAndSorting = _useTable.recordsAfterPagingAndSorting;\n\n  var loadRanksData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$client$query, error, data, _data, ranks;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return client.query({\n                query: getAllRanksQuery\n              });\n\n            case 2:\n              _yield$client$query = _context.sent;\n              error = _yield$client$query.error;\n              data = _yield$client$query.data;\n              _data = _objectSpread({}, data), ranks = _data.ranks;\n              console.log(ranks);\n              setRanks(ranks);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadRanksData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    loadRanksData();\n\n    var handleSearch = function handleSearch(e) {\n      var target = e.target;\n      setFilterFn({\n        fn: function fn(items) {\n          if (target.value == \"\") {\n            return items;\n          } else {\n            items.filterFn(function (x) {\n              return x.rankName.tolo.includes(target.value);\n            });\n          }\n        }\n      });\n    };\n\n    console.log(ranks);\n  }, []);\n  return __jsx(Formik, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, function (_ref2) {\n    var isSubmitting = _ref2.isSubmitting;\n    return __jsx(Paper, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }\n    }, __jsx(TblContainer, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }\n    }, __jsx(Toolbar, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }\n    }, __jsx(Grid, {\n      container: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, __jsx(Grid, {\n      item: true,\n      xs: 8,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 19\n      }\n    }, __jsx(Field, {\n      component: TextField,\n      autocomplete: \"off\",\n      name: \"search\",\n      type: \"search\",\n      label: \"Search\",\n      fullWidth: true,\n      onChange: handleSearch,\n      variant: \"outlined\",\n      inputProps: {\n        startAdornment: __jsx(InputAdornment, {\n          position: \"start\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 27\n          }\n        }, __jsx(Search, {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 29\n          }\n        }))\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }\n    })), __jsx(Grid, {\n      item: true,\n      xs: 4,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 19\n      }\n    }, __jsx(Button, {\n      onClick: submitForm,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }\n    }, \"AddNew\")))), __jsx(TblHead, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 15\n      }\n    }), __jsx(TableBody, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 15\n      }\n    }, recordsAfterPagingAndSorting().map(function (item) {\n      return __jsx(TableRow, {\n        key: item.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 19\n        }\n      }, __jsx(TableCell, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 21\n        }\n      }, item.rankName), __jsx(TableCell, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }\n      }, item.rankCode), __jsx(TableCell, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 21\n        }\n      }, item.id));\n    }))), __jsx(TblPagination, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 13\n      }\n    }));\n  });\n};\n\n_s(NewRankList, \"xZk/DwrYD9Wbr3NMHhAM7BDqiVQ=\", false, function () {\n  return [useApolloClient, useTable];\n});\n\n_c = NewRankList;\nexport default NewRankList;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewRankList\");","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/rank/NewRankList.jsx"],"names":["React","useState","useEffect","useTable","useApolloClient","Paper","Typography","TableBody","TableRow","TableCell","Grid","InputAdornment","Popup","Button","Search","ErrorMessage","Formik","Form","Field","TextField","getAllRanksQuery","headCells","id","label","NewRankList","client","ranks","setRanks","fn","items","filterFn","setFilterFn","TblContainer","TblHead","TblPagination","recordsAfterPagingAndSorting","loadRanksData","query","error","data","console","log","handleSearch","e","target","value","x","rankName","tolo","includes","isSubmitting","startAdornment","submitForm","map","item","rankCode"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport useTable from \"../utils/useTable\";\r\nimport { useApolloClient } from \"@apollo/react-hooks\";\r\nimport {\r\n  Paper,\r\n  Typography,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Grid,\r\n  InputAdornment,\r\n} from \"@material-ui/core\";\r\nimport Popup from \"../utils/Popup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Search from \"@material-ui/icons/Search\";\r\nimport { ErrorMessage, Formik, Form, Field } from \"formik\";\r\nimport { TextField } from \"material-ui-formik-components/TextField\";\r\n\r\nimport { getAllRanksQuery } from \"../queries&Mutations&Functions/Queries\";\r\n\r\nconst headCells = [\r\n  { id: \"rankName\", label: \"Libelle Poste\" },\r\n  { id: \"rankCode\", label: \"Code Poste\" },\r\n  { id: \"id\", label: \"ID\" },\r\n];\r\n\r\nconst NewRankList = () => {\r\n  const client = useApolloClient();\r\n  const [ranks, setRanks] = useState([]);\r\n  const [filterFn, setFilterFn] = useState({fn:items=>{return items}});\r\n\r\n  const {\r\n    TblContainer,\r\n    TblHead,\r\n    TblPagination,\r\n    recordsAfterPagingAndSorting,\r\n  } = useTable(ranks, headCells,filterFn);\r\n\r\n  const loadRanksData = async () => {\r\n    const { error, data } = await client.query({\r\n      query: getAllRanksQuery,\r\n    });\r\n    const { ranks } = { ...data };\r\n    console.log(ranks);\r\n\r\n    setRanks(ranks);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadRanksData();\r\n\r\n    const handleSearch=(e)=>{\r\nconst target = e.target\r\nsetFilterFn({\r\n  fn:items=>{\r\n    if(target.value==\"\"){\r\n      return items\r\n    }else{\r\n      items.filterFn(x=> x.rankName.tolo.includes(target.value))\r\n    }\r\n  }\r\n})\r\n    }\r\n\r\n    console.log(ranks);\r\n  }, []);\r\n\r\n  return (\r\n    <Formik>\r\n      {({ isSubmitting }) => {\r\n        return (\r\n          <Paper>\r\n            <TblContainer>\r\n              <Toolbar>\r\n                <Grid container>\r\n\r\n                  <Grid item xs={8}>\r\n\r\n                    <Field\r\n                      component={TextField}\r\n                      autocomplete=\"off\"\r\n                      name=\"search\"\r\n                      type=\"search\"\r\n                      label=\"Search\"\r\n                      fullWidth\r\n                      onChange={handleSearch}\r\n                      variant=\"outlined\"\r\n                      inputProps={{\r\n                        startAdornment: (\r\n                          <InputAdornment position=\"start\">\r\n                            <Search />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Button onClick={submitForm}>AddNew</Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Toolbar>\r\n              <TblHead />\r\n              <TableBody>\r\n                {recordsAfterPagingAndSorting().map((item) => (\r\n                  <TableRow key={item.id}>\r\n                    <TableCell>{item.rankName}</TableCell>\r\n                    <TableCell>{item.rankCode}</TableCell>\r\n                    <TableCell>{item.id}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </TblContainer>\r\n            <TblPagination />\r\n          </Paper>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\nexport default NewRankList;\r\n"]},"metadata":{},"sourceType":"module"}