{"ast":null,"code":"import _slicedToArray from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\sygefexMui\\\\sygefexMui-frontend\\\\src\\\\components\\\\subDivision\\\\NewSubDivision.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport Error from \"../ErrorMessage.js\";\nimport * as Yup from \"yup\";\nimport { TextField } from \"material-ui-formik-components/TextField\";\nimport { Select } from \"material-ui-formik-components/Select\";\nimport { ErrorMessage, Formik, Form, Field } from \"formik\";\nimport { Grid, Typography, Paper, Button, LinearProgress, CircularProgress } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useMutation, useApolloClient, useQuery } from \"@apollo/react-hooks\";\nimport { getDivisionsOfARegionQuery, getAllRegionsQuery, getAllSubDivisionsQuery } from \"../queries&Mutations&Functions/Queries\";\nimport Notification from \"../utils/Notification\";\nimport { getObjectFromID } from \"../queries&Mutations&Functions/Functions\";\nimport { createSubDivisionMutation } from \"../queries&Mutations&Functions/Mutations\";\nvar useStyles = makeStyles({\n  root: {\n    display: \"flex\",\n    flexDirection: \"column\" // fontSize: 100,\n\n  },\n  divStyled: {\n    display: \"grid\",\n    placeItems: \"center\",\n    top: \"2rem\",\n    height: \"90vh\"\n  },\n  pageStyled: {\n    display: \"grid\",\n    placeItems: \"center\",\n    marginTop: \"2rem\",\n    padding: \"1rem\",\n    minWidth: \"30vw\"\n  },\n  titleStyled: {\n    display: \"grid\",\n    placeItems: \"center\"\n  },\n  centerAll: {\n    display: \"grid\",\n    placeItems: \"center\",\n    minWidth: \"30vw\"\n  }\n});\nvar validationSchema = Yup.object().shape({\n  division: Yup.string().required(\"Choissisez un département\"),\n  subDivName: Yup.string().required(\"Nom arrondissement Obligatoire\"),\n  subDivCode: Yup.string().required(\"Code arrondissement Obligatoire\")\n});\n\nvar NewSubDivision = function NewSubDivision() {\n  _s();\n\n  var classes = useStyles();\n  var client = useApolloClient();\n\n  var _useState = useState([]),\n      regions = _useState[0],\n      setRegions = _useState[1];\n\n  var _useState2 = useState([]),\n      divisions = _useState2[0],\n      setDivisions = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      regionID = _useState3[0],\n      setRegionID = _useState3[1];\n\n  var _useState4 = useState({\n    isOpen: false,\n    message: \"\",\n    type: \"\"\n  }),\n      notify = _useState4[0],\n      setNotify = _useState4[1];\n\n  var initialValues = {\n    subDivName: \"\",\n    subDivCode: \"\",\n    division: \"\"\n  };\n\n  var handleRegionIDChange = function handleRegionIDChange(e) {\n    console.log(e.target);\n    setRegionID(e.target.value);\n  };\n\n  var loadRegionData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$client$query, error, data, loading;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return client.query({\n                query: getAllRegionsQuery\n              });\n\n            case 2:\n              _yield$client$query = _context.sent;\n              error = _yield$client$query.error;\n              data = _yield$client$query.data;\n              loading = _yield$client$query.loading;\n              console.log(data.regions);\n              setRegions(data.regions);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadRegionData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    loadRegionData();\n  }, []);\n  console.log({\n    regionID: regionID\n  }); // const refinedRegion = removeTypename(regions)\n\n  var getRegionsOptions = regions && regions.map(function (item) {\n    return {\n      value: item.id,\n      label: item.regName\n    };\n  });\n\n  var loadDivisionData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var _yield$client$query2, error, data, loading, _data$region, division;\n\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return client.query({\n                skip: regionID && !regionID,\n                query: getDivisionsOfARegionQuery,\n                variables: {\n                  id: regionID\n                }\n              });\n\n            case 2:\n              _yield$client$query2 = _context2.sent;\n              error = _yield$client$query2.error;\n              data = _yield$client$query2.data;\n              loading = _yield$client$query2.loading;\n              loading && __jsx(CircularProgress, {\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 110,\n                  columnNumber: 18\n                }\n              });\n              console.dir(data);\n              _data$region = _objectSpread({}, data.region), division = _data$region.division;\n              console.log(division);\n              setDivisions(division);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function loadDivisionData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    loadDivisionData();\n  }, [regionID]);\n  console.log(divisions);\n  var getDivOptions = divisions && divisions.map(function (item) {\n    return {\n      value: item.id,\n      label: item.divName\n    };\n  });\n  console.dir(getDivOptions);\n\n  var updateCache = function updateCache(cache, _ref3) {\n    var res = _ref3.res;\n    // Fetch the subDivs from the cache\n    var existingSubDivs = cache.readQuery({\n      query: getAllSubDivisionsQuery\n    }); // Add the new subDivs to the cache\n\n    var insertedSubDiv = res.insert_todos.returning[0];\n    cache.writeQuery({\n      query: getAllSubDivisionsQuery,\n      data: {\n        subDivision: [insertedSubDiv].concat(_toConsumableArray(existingSubDivs.subDivision))\n      }\n    });\n  };\n\n  var _useMutation = useMutation(createSubDivisionMutation, {\n    update: updateCache()\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 2),\n      createSubDivision = _useMutation2[0],\n      _useMutation2$ = _useMutation2[1],\n      loading = _useMutation2$.loading,\n      error = _useMutation2$.error;\n\n  return __jsx(Formik, {\n    method: \"POST\",\n    initialValues: initialValues,\n    validationSchema: validationSchema,\n    onSubmit: /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(values, _ref4) {\n        var setSubmitting, resetForm, res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                setSubmitting = _ref4.setSubmitting, resetForm = _ref4.resetForm;\n                _context3.next = 3;\n                return createSubDivision({\n                  variables: _objectSpread(_objectSpread({}, values), {}, {\n                    division: values.division && getObjectFromID(values.division)\n                  })\n                });\n\n              case 3:\n                res = _context3.sent;\n                setTimeout(function () {\n                  console.log(JSON.stringify(values, null, 2));\n                  console.log(res); // updateCache(cache,res.data.)\n\n                  setNotify({\n                    isOpen: true,\n                    message: \"Nouvel arrondissement créé avec success\",\n                    type: \"success\"\n                  });\n                  resetForm(true);\n                  setSubmitting(false);\n                }, 400);\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function (_x, _x2) {\n        return _ref5.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }, function (_ref6) {\n    var submitForm = _ref6.submitForm,\n        setFieldValue = _ref6.setFieldValue,\n        isSubmitting = _ref6.isSubmitting;\n    return __jsx(\"div\", {\n      className: classes.centerAll,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    }, __jsx(Paper, {\n      className: classes.pageStyled,\n      elevation: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }\n    }, __jsx(Form, {\n      \"aria-busy\": isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 15\n      }\n    }, (isSubmitting || loading) && __jsx(LinearProgress, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 47\n      }\n    }), __jsx(Grid, {\n      className: classes.centerAll,\n      container: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }, __jsx(Grid, {\n      container: true,\n      className: classes.centerAll,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 19\n      }\n    }, __jsx(Grid, {\n      item: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 21\n      }\n    }, __jsx(Error, {\n      error: error,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 23\n      }\n    }), __jsx(Typography, {\n      className: classes.titleStyled,\n      color: \"primary\",\n      gutterBottom: true,\n      variant: \"h5\",\n      component: \"h6\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 23\n      }\n    }, \"Nouvel Arrondissement\"))), __jsx(Grid, {\n      container: true,\n      className: classes.centerAll,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 19\n      }\n    }, __jsx(Grid, {\n      item: true,\n      className: classes.centerAll,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 21\n      }\n    }, __jsx(Field, {\n      variant: \"outlined\",\n      name: \"regionID\",\n      label: \"La R\\xE9gion\",\n      onChange: handleRegionIDChange,\n      component: Select,\n      disabled: isSubmitting,\n      helpertext: __jsx(ErrorMessage, {\n        name: \"regionID\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 37\n        }\n      }),\n      options: getRegionsOptions,\n      fullWidth: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 23\n      }\n    }), __jsx(Field, {\n      variant: \"outlined\",\n      name: \"division\",\n      label: \"Le D\\xE9partement\",\n      component: Select,\n      placeholder: \"le D\\xE9partement\",\n      disabled: isSubmitting,\n      helpertext: __jsx(ErrorMessage, {\n        name: \"division\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 37\n        }\n      }),\n      options: getDivOptions,\n      fullWidth: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 23\n      }\n    }), __jsx(Field, {\n      name: \"subDivName\",\n      type: \"text\",\n      component: TextField,\n      label: \"Nom Arrondissement\",\n      fullWidth: true,\n      variant: \"outlined\",\n      disabled: isSubmitting || loading,\n      helpertext: __jsx(ErrorMessage, {\n        name: \"subDivName\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 37\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 23\n      }\n    }), __jsx(Field, {\n      name: \"subDivCode\",\n      type: \"text\",\n      component: TextField,\n      label: \"Code Arrondissement\",\n      fullWidth: true,\n      variant: \"outlined\",\n      disabled: isSubmitting || loading,\n      helpertext: __jsx(ErrorMessage, {\n        name: \"subDivCode\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 37\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 23\n      }\n    }), __jsx(Notification, {\n      notify: notify,\n      setNotify: setNotify,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 23\n      }\n    }), __jsx(Button, {\n      disabled: isSubmitting,\n      onClick: submitForm,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 23\n      }\n    }, (isSubmitting || loading) && __jsx(CircularProgress, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 55\n      }\n    }), \"Valid\", isSubmitting ? \"ation en cours\" : \"er\")))))));\n  });\n};\n\n_s(NewSubDivision, \"mkgi48B3fVXc0C3eH+HptqFqU6Y=\", false, function () {\n  return [useStyles, useApolloClient, useMutation];\n});\n\n_c = NewSubDivision;\nexport default NewSubDivision;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewSubDivision\");","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/subDivision/NewSubDivision.jsx"],"names":["React","useState","useEffect","Error","Yup","TextField","Select","ErrorMessage","Formik","Form","Field","Grid","Typography","Paper","Button","LinearProgress","CircularProgress","makeStyles","useMutation","useApolloClient","useQuery","getDivisionsOfARegionQuery","getAllRegionsQuery","getAllSubDivisionsQuery","Notification","getObjectFromID","createSubDivisionMutation","useStyles","root","display","flexDirection","divStyled","placeItems","top","height","pageStyled","marginTop","padding","minWidth","titleStyled","centerAll","validationSchema","object","shape","division","string","required","subDivName","subDivCode","NewSubDivision","classes","client","regions","setRegions","divisions","setDivisions","regionID","setRegionID","isOpen","message","type","notify","setNotify","initialValues","handleRegionIDChange","e","console","log","target","value","loadRegionData","query","error","data","loading","getRegionsOptions","map","item","id","label","regName","loadDivisionData","skip","variables","dir","region","getDivOptions","divName","updateCache","cache","res","existingSubDivs","readQuery","insertedSubDiv","insert_todos","returning","writeQuery","subDivision","update","createSubDivision","values","setSubmitting","resetForm","setTimeout","JSON","stringify","submitForm","setFieldValue","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Error from \"../ErrorMessage.js\";\r\nimport * as Yup from \"yup\";\r\nimport { TextField } from \"material-ui-formik-components/TextField\";\r\nimport { Select } from \"material-ui-formik-components/Select\";\r\nimport { ErrorMessage, Formik, Form, Field } from \"formik\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Paper,\r\n  Button,\r\n  LinearProgress,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { useMutation, useApolloClient, useQuery } from \"@apollo/react-hooks\";\r\nimport {\r\n  getDivisionsOfARegionQuery,\r\n  getAllRegionsQuery,\r\n  getAllSubDivisionsQuery,\r\n} from \"../queries&Mutations&Functions/Queries\";\r\nimport Notification from \"../utils/Notification\";\r\n\r\nimport { getObjectFromID } from \"../queries&Mutations&Functions/Functions\";\r\nimport { createSubDivisionMutation } from \"../queries&Mutations&Functions/Mutations\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    // fontSize: 100,\r\n  },\r\n  divStyled: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    top: \"2rem\",\r\n    height: \"90vh\",\r\n  },\r\n  pageStyled: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    marginTop: \"2rem\",\r\n    padding: \"1rem\",\r\n    minWidth: \"30vw\",\r\n  },\r\n\r\n  titleStyled: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n  },\r\n\r\n  centerAll: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    minWidth: \"30vw\",\r\n  },\r\n});\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  division: Yup.string().required(\"Choissisez un département\"),\r\n  subDivName: Yup.string().required(\"Nom arrondissement Obligatoire\"),\r\n  subDivCode: Yup.string().required(\"Code arrondissement Obligatoire\"),\r\n});\r\n\r\nconst NewSubDivision = () => {\r\n  const classes = useStyles();\r\n  const client = useApolloClient();\r\n  const [regions, setRegions] = useState([]);\r\n  const [divisions, setDivisions] = useState([]);\r\n  const [regionID, setRegionID] = useState(\"\");\r\n\r\n  const [notify, setNotify] = useState({\r\n    isOpen: false,\r\n    message: \"\",\r\n    type: \"\",\r\n  });\r\n  const initialValues = {\r\n    subDivName: \"\",\r\n    subDivCode: \"\",\r\n    division: \"\",\r\n  };\r\n  const handleRegionIDChange = (e) => {\r\n    console.log(e.target);\r\n    setRegionID(e.target.value);\r\n  };\r\n  const loadRegionData = async () => {\r\n    const { error, data, loading } = await client.query({\r\n      query: getAllRegionsQuery,\r\n    });\r\n    console.log(data.regions);\r\n\r\n    setRegions(data.regions);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadRegionData();\r\n  }, []);\r\n  console.log({ regionID });\r\n  // const refinedRegion = removeTypename(regions)\r\n  const getRegionsOptions =\r\n    regions && regions.map((item) => ({ value: item.id, label: item.regName }));\r\n\r\n  const loadDivisionData = async () => {\r\n    const { error, data, loading } = await client.query({\r\n      skip: regionID && !regionID,\r\n      query: getDivisionsOfARegionQuery,\r\n      variables: { id: regionID },\r\n    });\r\n    {\r\n      loading && <CircularProgress />;\r\n    }\r\n    console.dir(data);\r\n    const { division } = { ...data.region };\r\n    console.log(division);\r\n    setDivisions(division);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadDivisionData();\r\n  }, [regionID]);\r\n\r\n  console.log(divisions);\r\n\r\n  const getDivOptions =\r\n    divisions &&\r\n    divisions.map((item) => ({ value: item.id, label: item.divName }));\r\n\r\n  console.dir(getDivOptions);\r\n\r\n  const updateCache = (cache, { res }) => {\r\n    // Fetch the subDivs from the cache\r\n    const existingSubDivs = cache.readQuery({\r\n      query: getAllSubDivisionsQuery,\r\n    });\r\n    // Add the new subDivs to the cache\r\n    const insertedSubDiv = res.insert_todos.returning[0];\r\n    cache.writeQuery({\r\n      query: getAllSubDivisionsQuery,\r\n      data: { subDivision: [insertedSubDiv, ...existingSubDivs.subDivision] },\r\n    });\r\n  };\r\n\r\n  const [createSubDivision, { loading, error }] = useMutation(\r\n    createSubDivisionMutation,\r\n    {\r\n      update: updateCache(),\r\n    }\r\n  );\r\n\r\n  return (\r\n    <Formik\r\n      method=\"POST\"\r\n      initialValues={initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n        const res = await createSubDivision({\r\n          variables: {\r\n            ...values,\r\n            division: values.division && getObjectFromID(values.division),\r\n          },\r\n        });\r\n        setTimeout(() => {\r\n          console.log(JSON.stringify(values, null, 2));\r\n          console.log(res);\r\n          // updateCache(cache,res.data.)\r\n          setNotify({\r\n            isOpen: true,\r\n            message: \"Nouvel arrondissement créé avec success\",\r\n            type: \"success\",\r\n          });\r\n          resetForm(true);\r\n          setSubmitting(false);\r\n        }, 400);\r\n      }}\r\n    >\r\n      {({ submitForm, setFieldValue, isSubmitting }) => {\r\n        return (\r\n          <div className={classes.centerAll}>\r\n            <Paper className={classes.pageStyled} elevation={3}>\r\n              <Form aria-busy={isSubmitting}>\r\n                {(isSubmitting || loading) && <LinearProgress />}\r\n                <Grid className={classes.centerAll} container>\r\n                  <Grid container className={classes.centerAll}>\r\n                    <Grid item>\r\n                      <Error error={error} />\r\n                      <Typography\r\n                        className={classes.titleStyled}\r\n                        color=\"primary\"\r\n                        gutterBottom\r\n                        variant=\"h5\"\r\n                        component=\"h6\"\r\n                      >\r\n                        Nouvel Arrondissement\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid container className={classes.centerAll}>\r\n                    <Grid item className={classes.centerAll}>\r\n                      <Field\r\n                        variant=\"outlined\"\r\n                        name=\"regionID\"\r\n                        label=\"La Région\"\r\n                        onChange={handleRegionIDChange}\r\n                        component={Select}\r\n                        disabled={isSubmitting}\r\n                        helpertext={<ErrorMessage name=\"regionID\" />}\r\n                        options={getRegionsOptions}\r\n                        fullWidth\r\n                      />\r\n                      <Field\r\n                        variant=\"outlined\"\r\n                        name=\"division\"\r\n                        label=\"Le Département\"\r\n                        component={Select}\r\n                        placeholder=\"le Département\"\r\n                        disabled={isSubmitting}\r\n                        helpertext={<ErrorMessage name=\"division\" />}\r\n                        options={getDivOptions}\r\n                        fullWidth\r\n                      />\r\n\r\n                      <Field\r\n                        name=\"subDivName\"\r\n                        type=\"text\"\r\n                        component={TextField}\r\n                        label=\"Nom Arrondissement\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        disabled={isSubmitting || loading}\r\n                        helpertext={<ErrorMessage name=\"subDivName\" />}\r\n                      />\r\n                      <Field\r\n                        name=\"subDivCode\"\r\n                        type=\"text\"\r\n                        component={TextField}\r\n                        label=\"Code Arrondissement\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        disabled={isSubmitting || loading}\r\n                        helpertext={<ErrorMessage name=\"subDivCode\" />}\r\n                      />\r\n                      <Notification notify={notify} setNotify={setNotify} />\r\n\r\n                      <Button disabled={isSubmitting} onClick={submitForm}>\r\n                        {(isSubmitting || loading) && <CircularProgress />}\r\n                        Valid{isSubmitting ? \"ation en cours\" : \"er\"}\r\n                      </Button>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            </Paper>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\nexport default NewSubDivision;\r\n"]},"metadata":{},"sourceType":"module"}