{"ast":null,"code":"var _jsxFileName = \"E:\\\\sygefexMui\\\\sygefexMui-frontend\\\\src\\\\components\\\\division\\\\DivisionList.jsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport MaterialTable, { MTableToolbar } from \"material-table\";\nimport { Paper } from \"@material-ui/core\";\nimport { useApolloClient } from \"@apollo/react-hooks\";\nimport { getAllRegionsAndDivisionsQuery } from \"../queries&Mutations&Functions/Queries\";\nimport tableIcons from \"../utils/icons/tableIcons\";\nimport Popup from \"../utils/Popup\";\nimport Button from \"@material-ui/core/Button\";\nimport NewDivision from \"./NewDivision\";\n\nconst DivisionList = () => {\n  const client = useApolloClient();\n  const {\n    openPopup,\n    setOpenPopup\n  } = useState(false);\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    columns: [{\n      field: \"regName\",\n      title: \"Region Name\"\n    }, {\n      field: \"regCode\",\n      title: \"Region Code\",\n      grouping: false\n    }, {\n      field: \"divName\",\n      title: \"Division Name\"\n    }, {\n      field: \"divCode\",\n      title: \"Division Code\",\n      grouping: false\n    }],\n    data: []\n  });\n\n  const loadDivisionData = async () => {\n    const {\n      error,\n      data\n    } = await client.query({\n      query: getAllRegionsAndDivisionsQuery\n    });\n\n    const {\n      regions\n    } = _objectSpread({}, data);\n\n    const getDivisions = regions.map(item => {\n      const divInfos = item.division.map(division => _objectSpread({\n        regName: item.regName,\n        regCode: item.regCode\n      }, division));\n      return divInfos;\n    });\n    setState(prev => _objectSpread(_objectSpread({}, prev), {}, {\n      data: getDivisions.flat(1)\n    }));\n  };\n\n  useEffect(() => {\n    loadDivisionData();\n    console.log(state.data);\n  }, []);\n  console.dir(state.data);\n  return __jsx(Paper, {\n    style: {\n      marginTop: \"2rem\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, __jsx(Toolbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: () => clg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, \"Add New Item\")), __jsx(MaterialTable, {\n    stickyHeader: true,\n    style: {\n      position: \"sticky\",\n      top: 0\n    },\n    components: {\n      Toolbar: props => __jsx(\"div\", {\n        style: {\n          backgroundColor: \"#a2463c\",\n          borderTopRightRadius: \"0.5rem\",\n          borderTopLeftRadius: \"0.5rem\",\n          color: \"#fff\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }\n      }, __jsx(MTableToolbar, _extends({\n        innerRef: ref => myTable = ref\n      }, props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 17\n        }\n      })), __jsx(Button, {\n        onClick: () => myTable.setState({\n          showAddRow: !newMenuMealsRef.state.showAddRow\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }\n      }, \"Add New Item\"))\n    },\n    icons: tableIcons,\n    title: \"Users List\",\n    columns: state.columns,\n    data: state.data,\n    options: {\n      actionsColumnIndex: -1,\n      grouping: true,\n      paging: true,\n      pageSize: 50,\n      // make initial page size\n      emptyRowsWhenPaging: false,\n      //to make page size fix in case of less data rows\n      pageSizeOptions: [25, 50, 75, 100, 150],\n      // rows selection options\n      headerStyle: {\n        color: \"#fff\",\n        paddingTop: \"0.5rem\",\n        paddingBottom: \"0.5rem\",\n        backgroundColor: \"#01579b\",\n        maxHeight: \"0.5rem !important\"\n      },\n      rowStyle: {\n        color: \"#000\"\n      }\n    },\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.push(newData);\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              data\n            });\n          });\n        }, 400);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            setState(prevState => {\n              const data = [...prevState.data];\n              data[data.indexOf(oldData)] = newData;\n              return _objectSpread(_objectSpread({}, prevState), {}, {\n                data\n              });\n            });\n          }\n        }, 400);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.splice(data.indexOf(oldData), 1);\n            return _objectSpread(_objectSpread({}, prevState), {}, {\n              data\n            });\n          });\n        }, 400);\n      })\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default DivisionList;","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/division/DivisionList.jsx"],"names":["React","useEffect","useState","MaterialTable","MTableToolbar","Paper","useApolloClient","getAllRegionsAndDivisionsQuery","tableIcons","Popup","Button","NewDivision","DivisionList","client","openPopup","setOpenPopup","state","setState","columns","field","title","grouping","data","loadDivisionData","error","query","regions","getDivisions","map","item","divInfos","division","regName","regCode","prev","flat","console","log","dir","marginTop","clg","position","top","Toolbar","props","backgroundColor","borderTopRightRadius","borderTopLeftRadius","color","ref","myTable","showAddRow","newMenuMealsRef","actionsColumnIndex","paging","pageSize","emptyRowsWhenPaging","pageSizeOptions","headerStyle","paddingTop","paddingBottom","maxHeight","rowStyle","onRowAdd","newData","Promise","resolve","setTimeout","prevState","push","onRowUpdate","oldData","indexOf","onRowDelete","splice"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport MaterialTable, { MTableToolbar } from \"material-table\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport { useApolloClient } from \"@apollo/react-hooks\";\r\nimport { getAllRegionsAndDivisionsQuery } from \"../queries&Mutations&Functions/Queries\";\r\nimport tableIcons from \"../utils/icons/tableIcons\";\r\nimport Popup from \"../utils/Popup\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport NewDivision from \"./NewDivision\";\r\n\r\nconst DivisionList = () => {\r\n  const client = useApolloClient();\r\n\r\n  const { openPopup, setOpenPopup } = useState(false);\r\n  const [state, setState] = useState({\r\n    columns: [\r\n      {\r\n        field: \"regName\",\r\n        title: \"Region Name\",\r\n      },\r\n      {\r\n        field: \"regCode\",\r\n        title: \"Region Code\",\r\n        grouping: false,\r\n      },\r\n      { field: \"divName\", title: \"Division Name\" },\r\n      { field: \"divCode\", title: \"Division Code\", grouping: false },\r\n    ],\r\n    data: [],\r\n  });\r\n\r\n  const loadDivisionData = async () => {\r\n    const { error, data } = await client.query({\r\n      query: getAllRegionsAndDivisionsQuery,\r\n    });\r\n    const { regions } = { ...data };\r\n\r\n    const getDivisions = regions.map((item) => {\r\n      const divInfos = item.division.map((division) => ({\r\n        regName: item.regName,\r\n        regCode: item.regCode,\r\n        ...division,\r\n      }));\r\n      return divInfos;\r\n    });\r\n\r\n    setState((prev) => ({ ...prev, data: getDivisions.flat(1) }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadDivisionData();\r\n\r\n    console.log(state.data);\r\n  }, []);\r\n\r\n  console.dir(state.data);\r\n  return (\r\n    <Paper style={{ marginTop: \"2rem\" }}>\r\n      <div>\r\n        <Toolbar>\r\n          <Button\r\n            onClick={() =>\r\n             clg\r\n            }\r\n          >\r\n            Add New Item\r\n          </Button>\r\n        </Toolbar>\r\n        <MaterialTable\r\n          stickyHeader\r\n          style={{ position: \"sticky\", top: 0 }}\r\n          components={{\r\n            Toolbar: (props) => (\r\n              <div\r\n                style={{\r\n                  backgroundColor: \"#a2463c\",\r\n                  borderTopRightRadius: \"0.5rem\",\r\n                  borderTopLeftRadius: \"0.5rem\",\r\n                  color: \"#fff\",\r\n                }}\r\n              >\r\n                <MTableToolbar innerRef={(ref) => (myTable = ref)} {...props} />\r\n                <Button\r\n                  onClick={() =>\r\n                    myTable.setState({\r\n                      showAddRow: !newMenuMealsRef.state.showAddRow,\r\n                    })\r\n                  }\r\n                >\r\n                  Add New Item\r\n                </Button>\r\n              </div>\r\n            ),\r\n          }}\r\n          icons={tableIcons}\r\n          title=\"Users List\"\r\n          columns={state.columns}\r\n          data={state.data}\r\n          options={{\r\n            actionsColumnIndex: -1,\r\n            grouping: true,\r\n            paging: true,\r\n            pageSize: 50, // make initial page size\r\n            emptyRowsWhenPaging: false, //to make page size fix in case of less data rows\r\n            pageSizeOptions: [25, 50, 75, 100, 150], // rows selection options\r\n            headerStyle: {\r\n              color: \"#fff\",\r\n              paddingTop: \"0.5rem\",\r\n              paddingBottom: \"0.5rem\",\r\n              backgroundColor: \"#01579b\",\r\n              maxHeight: \"0.5rem !important\",\r\n            },\r\n            rowStyle: {\r\n              color: \"#000\",\r\n            },\r\n          }}\r\n          editable={{\r\n            onRowAdd: (newData) =>\r\n              new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                  resolve();\r\n                  setState((prevState) => {\r\n                    const data = [...prevState.data];\r\n                    data.push(newData);\r\n                    return {\r\n                      ...prevState,\r\n                      data,\r\n                    };\r\n                  });\r\n                }, 400);\r\n              }),\r\n            onRowUpdate: (newData, oldData) =>\r\n              new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                  resolve();\r\n                  if (oldData) {\r\n                    setState((prevState) => {\r\n                      const data = [...prevState.data];\r\n                      data[data.indexOf(oldData)] = newData;\r\n                      return {\r\n                        ...prevState,\r\n                        data,\r\n                      };\r\n                    });\r\n                  }\r\n                }, 400);\r\n              }),\r\n            onRowDelete: (oldData) =>\r\n              new Promise((resolve) => {\r\n                setTimeout(() => {\r\n                  resolve();\r\n                  setState((prevState) => {\r\n                    const data = [...prevState.data];\r\n                    data.splice(data.indexOf(oldData), 1);\r\n                    return {\r\n                      ...prevState,\r\n                      data,\r\n                    };\r\n                  });\r\n                }, 400);\r\n              }),\r\n          }}\r\n        />\r\n      </div>\r\n    </Paper>\r\n  );\r\n};\r\nexport default DivisionList;\r\n"]},"metadata":{},"sourceType":"module"}