{"ast":null,"code":"var _jsxFileName = \"E:\\\\sygefexMui\\\\sygefexMui-frontend\\\\src\\\\components\\\\division\\\\UpdateDivision.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect } from \"react\";\nimport { useMutation, useApolloClient } from \"@apollo/react-hooks\";\nimport { MinimStyledPage } from \"../styles/StyledPage\";\nimport { Formik, Form } from \"formik\";\nimport useForm from \"../utils/useForm\";\nimport * as Yup from \"yup\";\nimport { updateDivisionMutation } from \"../queries&Mutations&Functions/Mutations\";\nimport { singleDivisionQuery } from \"../queries&Mutations&Functions/Queries\";\nimport { StyledForm, SygexInput, StyledButton, ButtonStyled } from \"../utils/FormInputs\";\nconst validationSchema = Yup.object().shape({\n  divName: Yup.string().required(\"Nom du département Obligatoire\"),\n  divCode: Yup.string().required(\"Code du département Obligatoire\")\n});\n\nconst UpdateDivision = ({\n  id\n}) => {\n  const [state, setState] = useForm({});\n  const client = useApolloClient();\n\n  const loadDivisionData = async () => {\n    const {\n      data,\n      error\n    } = await client.query({\n      query: singleDivisionQuery,\n      variables: {\n        id\n      }\n    });\n    console.log(data);\n    setState(data.division);\n  };\n\n  useEffect(() => {\n    console.log({\n      id\n    });\n    loadDivisionData();\n  }, []);\n  const initialValues = {\n    divName: \"\",\n    divCode: \"\"\n  };\n  console.log(state);\n  const [updateDivision] = useMutation(updateDivisionMutation, {\n    variables: {\n      id\n    }\n  });\n  return __jsx(Formik, {\n    initialValues: state || initialValues,\n    validationSchema: validationSchema,\n    enableReinitialize: true,\n    onSubmit: async (values, {\n      setSubmitting,\n      resetForm\n    }) => {\n      const res = await updateDivision({\n        variables: _objectSpread({}, values)\n      });\n      setTimeout(() => {\n        console.log(JSON.stringify(values, null, 2));\n        console.log(res);\n        resetForm(true);\n        setSubmitting(false);\n      }, 200);\n    },\n    method: \"POST\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, ({\n    values,\n    isSubmitting\n  }) => __jsx(MinimStyledPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, \"Correction info d\\xE9partement\"), __jsx(StyledForm, {\n    disabled: isSubmitting,\n    \"aria-busy\": isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }, __jsx(SygexInput, {\n    type: \"text\",\n    id: \"divName\",\n    name: \"divName\",\n    placeholder: \"Nom du D\\xE9partement\",\n    disabled: isSubmitting,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }), __jsx(SygexInput, {\n    type: \"text\",\n    id: \"divCode\",\n    name: \"divCode\",\n    placeholder: \"Code du D\\xE9partement\",\n    disabled: isSubmitting,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 15\n    }\n  }), __jsx(ButtonStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, __jsx(StyledButton, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, \"Valid\", isSubmitting ? \"ation en cours\" : \"er\"))))));\n};\n\nexport default UpdateDivision;","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/division/UpdateDivision.jsx"],"names":["React","useEffect","useMutation","useApolloClient","MinimStyledPage","Formik","Form","useForm","Yup","updateDivisionMutation","singleDivisionQuery","StyledForm","SygexInput","StyledButton","ButtonStyled","validationSchema","object","shape","divName","string","required","divCode","UpdateDivision","id","state","setState","client","loadDivisionData","data","error","query","variables","console","log","division","initialValues","updateDivision","values","setSubmitting","resetForm","res","setTimeout","JSON","stringify","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useMutation, useApolloClient } from \"@apollo/react-hooks\";\r\nimport { MinimStyledPage } from \"../styles/StyledPage\";\r\nimport { Formik, Form } from \"formik\";\r\nimport useForm from \"../utils/useForm\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport { updateDivisionMutation } from \"../queries&Mutations&Functions/Mutations\";\r\nimport { singleDivisionQuery } from \"../queries&Mutations&Functions/Queries\";\r\nimport {\r\n  StyledForm,\r\n  SygexInput,\r\n  StyledButton,\r\n  ButtonStyled,\r\n} from \"../utils/FormInputs\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  divName: Yup.string().required(\"Nom du département Obligatoire\"),\r\n  divCode: Yup.string().required(\"Code du département Obligatoire\"),\r\n});\r\nconst UpdateDivision = ({ id }) => {\r\n  const [state, setState] = useForm({});\r\n  const client = useApolloClient();\r\n\r\n  const loadDivisionData = async () => {\r\n    const { data, error } = await client.query({\r\n      query: singleDivisionQuery,\r\n      variables: { id },\r\n    });\r\n    console.log(data);\r\n    setState(data.division);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log({ id });\r\n    loadDivisionData();\r\n  }, []);\r\n  const initialValues = {\r\n    divName: \"\",\r\n    divCode: \"\",\r\n  };\r\n  console.log(state);\r\n  const [updateDivision] = useMutation(updateDivisionMutation, {\r\n    variables: { id },\r\n  });\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={state || initialValues}\r\n      validationSchema={validationSchema}\r\n      enableReinitialize={true}\r\n      onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n        const res = await updateDivision({\r\n          variables: { ...values },\r\n        });\r\n        setTimeout(() => {\r\n          console.log(JSON.stringify(values, null, 2));\r\n          console.log(res);\r\n          resetForm(true);\r\n          setSubmitting(false);\r\n        }, 200);\r\n      }}\r\n      method=\"POST\"\r\n    >\r\n      {({ values, isSubmitting }) => (\r\n        <MinimStyledPage>\r\n          <h4>Correction info département</h4>\r\n          <StyledForm disabled={isSubmitting} aria-busy={isSubmitting}>\r\n            <Form>\r\n              <SygexInput\r\n                type=\"text\"\r\n                id=\"divName\"\r\n                name=\"divName\"\r\n                placeholder=\"Nom du Département\"\r\n                disabled={isSubmitting}\r\n                required\r\n              />\r\n              <SygexInput\r\n                type=\"text\"\r\n                id=\"divCode\"\r\n                name=\"divCode\"\r\n                placeholder=\"Code du Département\"\r\n                disabled={isSubmitting}\r\n                required\r\n              />\r\n              <ButtonStyled>\r\n                <StyledButton type=\"submit\">\r\n                  Valid{isSubmitting ? \"ation en cours\" : \"er\"}\r\n                </StyledButton>\r\n              </ButtonStyled>\r\n            </Form>\r\n          </StyledForm>\r\n        </MinimStyledPage>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default UpdateDivision;\r\n"]},"metadata":{},"sourceType":"module"}