{"ast":null,"code":"var _jsxFileName = \"E:\\\\sygefexMui\\\\sygefexMui-frontend\\\\src\\\\components\\\\center\\\\UpdateCenter.jsx\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation, useApolloClient } from \"@apollo/react-hooks\";\nimport { MiniStyledPage } from \"../styles/StyledPage\";\nimport Error from \"../ErrorMessage\";\nimport { Formik, Form } from \"formik\";\nimport useForm from \"../utils/useForm\";\nimport * as Yup from \"yup\";\nimport { SygexInput, StyledForm, StyledButton, ButtonStyled } from \"../utils/FormInputs\";\nimport { singleCenterQuery } from \"../queries&Mutations&Functions/Queries\";\nimport { updateCenterMutation } from \"../queries&Mutations&Functions/Mutations\";\nimport Notification from \"../utils/Notification\";\nimport styled from \"styled-components\";\nconst Controls = styled.div.withConfig({\n  displayName: \"UpdateCenter__Controls\",\n  componentId: \"hg34ox-0\"\n})([\"padding:0 2rem;\"]);\n\nconst UpdateCenter = ({\n  id\n}) => {\n  const client = useApolloClient();\n  const [state, setState] = useForm({\n    centerCode: \"\",\n    centerName: \"\",\n    centerNumber: \"\"\n  });\n  const {\n    0: notify,\n    1: setNotify\n  } = useState({\n    isOpen: false,\n    message: \"\",\n    type: \"\"\n  });\n\n  const loadCenterData = async () => {\n    const {\n      error,\n      data\n    } = await client.query({\n      query: singleCenterQuery,\n      variables: {\n        id\n      }\n    });\n    {\n      error && __jsx(Error, {\n        error: error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 16\n        }\n      });\n    }\n\n    const centerData = _objectSpread({}, data.center);\n\n    const {\n      centerCode,\n      centerName,\n      centerNumber\n    } = centerData;\n    setState({\n      centerCode: centerCode,\n      centerName: centerName,\n      centerNumber: centerNumber\n    });\n    console.log(centerData);\n  };\n\n  useEffect(() => {\n    loadCenterData();\n  }, []);\n  const initialValues = {\n    centerCode: \"\",\n    centerName: \"\",\n    centerNumber: \"\"\n  };\n  const validationSchema = Yup.object().shape({\n    centerName: Yup.string().required(\"Libellé du centre obligatoire\"),\n    centerCode: Yup.string().required(\"Code du centre  obligatoire\"),\n    centerNumber: Yup.number().required(\"Numéro  du centre obligatoire\")\n  });\n  const [updateCenter, {\n    loading: loadingMut,\n    error: errorMut\n  }] = useMutation(updateCenterMutation, {\n    variables: {\n      id\n    }\n  });\n  return __jsx(Formik, {\n    method: \"POST\",\n    initialValues: state || initialValues,\n    enableReinitialize: true,\n    validationSchema: validationSchema,\n    onSubmit: async (values, {\n      resetForm,\n      setSubmitting\n    }) => {\n      const res = await updateCenter({\n        variables: _objectSpread(_objectSpread({}, values), {}, {\n          id\n        })\n      });\n      setNotify({\n        isOpen: true,\n        message: \"Centre Supprimodifié avec success\",\n        type: \"error\"\n      });\n      setTimeout(() => {\n        console.log(JSON.stringify(values, null, 2));\n        console.log(res);\n        resetForm(true);\n        setSubmitting(false);\n      }, 200);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, ({\n    isSubmitting\n  }) => __jsx(MiniStyledPage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, __jsx(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, \"Correction Info Centre\"), __jsx(Error, {\n    error: errorMut,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 11\n    }\n  }), __jsx(StyledForm, {\n    disabled: isSubmitting || loadingMut,\n    \"aria-busy\": isSubmitting || loadingMut,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 11\n    }\n  }, __jsx(Form, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, __jsx(Controls, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 15\n    }\n  }, __jsx(SygexInput, {\n    id: \"centerName\",\n    name: \"centerName\",\n    type: \"text\",\n    label: \"Nom du centre\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }), __jsx(SygexInput, {\n    id: \"centerCode\",\n    name: \"centerCode\",\n    type: \"text\",\n    label: \"Code du centre\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }), __jsx(SygexInput, {\n    name: \"centerNumber\",\n    id: \"centerNumber\",\n    type: \"number\",\n    label: \"Num\\xE9ro du centre\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 17\n    }\n  }), __jsx(Notification, {\n    notify: notify,\n    setNotify: setNotify,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 17\n    }\n  }), __jsx(ButtonStyled, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 17\n    }\n  }, __jsx(StyledButton, {\n    type: \"submit\",\n    disabled: isSubmitting,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 19\n    }\n  }, \"Valid\", isSubmitting ? \"ation en cours\" : \"er\")))))));\n};\n\nexport default UpdateCenter;","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/center/UpdateCenter.jsx"],"names":["React","useState","useEffect","useMutation","useApolloClient","MiniStyledPage","Error","Formik","Form","useForm","Yup","SygexInput","StyledForm","StyledButton","ButtonStyled","singleCenterQuery","updateCenterMutation","Notification","styled","Controls","div","UpdateCenter","id","client","state","setState","centerCode","centerName","centerNumber","notify","setNotify","isOpen","message","type","loadCenterData","error","data","query","variables","centerData","center","console","log","initialValues","validationSchema","object","shape","string","required","number","updateCenter","loading","loadingMut","errorMut","values","resetForm","setSubmitting","res","setTimeout","JSON","stringify","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useMutation, useApolloClient } from \"@apollo/react-hooks\";\r\nimport { MiniStyledPage } from \"../styles/StyledPage\";\r\nimport Error from \"../ErrorMessage\";\r\nimport { Formik, Form } from \"formik\";\r\nimport useForm from \"../utils/useForm\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  SygexInput,\r\n  StyledForm,\r\n  StyledButton,\r\n  ButtonStyled,\r\n} from \"../utils/FormInputs\";\r\nimport { singleCenterQuery } from \"../queries&Mutations&Functions/Queries\";\r\nimport { updateCenterMutation } from \"../queries&Mutations&Functions/Mutations\";\r\nimport Notification from \"../utils/Notification\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst Controls = styled.div`\r\n  padding: 0 2rem;\r\n`;\r\nconst UpdateCenter = ({ id }) => {\r\n  const client = useApolloClient();\r\n  const [state, setState] = useForm({\r\n    centerCode: \"\",\r\n    centerName: \"\",\r\n    centerNumber: \"\",\r\n  });\r\n\r\n  const [notify, setNotify] = useState({\r\n    isOpen: false,\r\n    message: \"\",\r\n    type: \"\",\r\n  });\r\n\r\n  const loadCenterData = async () => {\r\n    const { error, data } = await client.query({\r\n      query: singleCenterQuery,\r\n      variables: { id },\r\n    });\r\n    {\r\n      error && <Error error={error} />;\r\n    }\r\n    const centerData = { ...data.center };\r\n    const { centerCode, centerName, centerNumber } = centerData;\r\n    setState({\r\n      centerCode: centerCode,\r\n      centerName: centerName,\r\n      centerNumber: centerNumber,\r\n    });\r\n    console.log(centerData);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadCenterData();\r\n  }, []);\r\n\r\n  const initialValues = {\r\n    centerCode: \"\",\r\n    centerName: \"\",\r\n    centerNumber: \"\",\r\n  };\r\n\r\n  const validationSchema = Yup.object().shape({\r\n    centerName: Yup.string().required(\"Libellé du centre obligatoire\"),\r\n    centerCode: Yup.string().required(\"Code du centre  obligatoire\"),\r\n    centerNumber: Yup.number().required(\"Numéro  du centre obligatoire\"),\r\n  });\r\n\r\n  const [updateCenter, { loading: loadingMut, error: errorMut }] = useMutation(\r\n    updateCenterMutation,\r\n    {\r\n      variables: { id },\r\n    }\r\n  );\r\n  return (\r\n    <Formik\r\n      method=\"POST\"\r\n      initialValues={state || initialValues}\r\n      enableReinitialize\r\n      validationSchema={validationSchema}\r\n      onSubmit={async (values, { resetForm, setSubmitting }) => {\r\n        const res = await updateCenter({\r\n          variables: { ...values, id },\r\n        });\r\n        setNotify({\r\n          isOpen: true,\r\n          message: \"Centre Supprimodifié avec success\",\r\n          type: \"error\",\r\n        });\r\n        setTimeout(() => {\r\n          console.log(JSON.stringify(values, null, 2));\r\n          console.log(res);\r\n          resetForm(true);\r\n          setSubmitting(false);\r\n        }, 200);\r\n      }}\r\n    >\r\n      {({ isSubmitting }) => (\r\n        <MiniStyledPage>\r\n          <h4>Correction Info Centre</h4>\r\n          <Error error={errorMut} />\r\n          <StyledForm\r\n            disabled={isSubmitting || loadingMut}\r\n            aria-busy={isSubmitting || loadingMut}\r\n          >\r\n            <Form>\r\n              <Controls>\r\n                <SygexInput\r\n                  id=\"centerName\"\r\n                  name=\"centerName\"\r\n                  type=\"text\"\r\n                  label=\"Nom du centre\"\r\n                  disabled={isSubmitting}\r\n                />\r\n                <SygexInput\r\n                  id=\"centerCode\"\r\n                  name=\"centerCode\"\r\n                  type=\"text\"\r\n                  label=\"Code du centre\"\r\n                  disabled={isSubmitting}\r\n                />\r\n                <SygexInput\r\n                  name=\"centerNumber\"\r\n                  id=\"centerNumber\"\r\n                  type=\"number\"\r\n                  label=\"Numéro du centre\"\r\n                  disabled={isSubmitting}\r\n                />\r\n                <Notification notify={notify} setNotify={setNotify} />\r\n\r\n                <ButtonStyled>\r\n                  <StyledButton type=\"submit\" disabled={isSubmitting}>\r\n                    Valid{isSubmitting ? \"ation en cours\" : \"er\"}\r\n                  </StyledButton>\r\n                </ButtonStyled>\r\n              </Controls>\r\n            </Form>\r\n          </StyledForm>\r\n        </MiniStyledPage>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default UpdateCenter;\r\n"]},"metadata":{},"sourceType":"module"}