{"ast":null,"code":"import _defineProperty from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\sygefexMui\\\\sygefexMui-frontend\\\\src\\\\components\\\\region\\\\UpdateRegion.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { useMutation, useApolloClient } from \"@apollo/react-hooks\";\nimport * as Yup from \"yup\";\nimport useForm from \"../utils/useForm\";\nimport { Grid, Typography, Paper, Button, LinearProgress, CircularProgress } from \"@material-ui/core\";\nimport { ErrorMessage, Formik, Form, Field } from \"formik\";\nimport { TextField } from \"material-ui-formik-components/TextField\";\nimport { updateRegionMutation } from \"../queries&Mutations&Functions/Mutations\";\nimport { getSingleRegionQuery } from \"../queries&Mutations&Functions/Queries\";\nimport Notification from \"../utils/Notification\";\nvar validationSchema = Yup.object().shape({\n  regName: Yup.string().required(\"Nom Région Obligatoire\"),\n  regCode: Yup.string().required(\"Code Région Obligatoire\")\n});\n\nvar UpdateRegion = function UpdateRegion(_ref) {\n  _s();\n\n  var id = _ref.id;\n\n  var _useForm = useForm({\n    regCode: \"\",\n    regName: \"\"\n  }),\n      _useForm2 = _slicedToArray(_useForm, 2),\n      state = _useForm2[0],\n      setState = _useForm2[1];\n\n  var client = useApolloClient();\n\n  var _useState = useState({\n    isOpen: false,\n    message: \"\",\n    type: \"\"\n  }),\n      notify = _useState[0],\n      setNotify = _useState[1];\n\n  console.log(id);\n\n  var loadRegionData = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$client$query, data, getRegionData, regName, regCode;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return client.query({\n                query: getSingleRegionQuery,\n                variables: {\n                  id: id\n                }\n              });\n\n            case 2:\n              _yield$client$query = _context.sent;\n              data = _yield$client$query.data;\n              getRegionData = data.region;\n              regName = getRegionData.regName, regCode = getRegionData.regCode;\n              setState({\n                regName: regName,\n                regCode: regCode\n              });\n              return _context.abrupt(\"return\", getRegionData);\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadRegionData() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var initialValues = {\n    regName: \"\",\n    regCode: \"\"\n  };\n  useEffect(function () {\n    loadRegionData();\n  }, []);\n  console.log(state);\n\n  var _useMutation = useMutation(updateRegionMutation, {\n    variables: {\n      id: id\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      updateRegion = _useMutation2[0];\n\n  return __jsx(Formik, {\n    initialValues: state || initialValues,\n    validationSchema: validationSchema,\n    enableReinitialize: true,\n    onSubmit: /*#__PURE__*/function () {\n      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values, _ref3) {\n        var setSubmitting, resetForm, res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                setSubmitting = _ref3.setSubmitting, resetForm = _ref3.resetForm;\n                _context2.next = 3;\n                return updateRegion({\n                  variables: _objectSpread({}, values)\n                });\n\n              case 3:\n                res = _context2.sent;\n                setTimeout(function () {\n                  console.log(JSON.stringify(values, null, 2));\n                  console.log(res);\n                  setNotify({\n                    isOpen: true,\n                    message: \"Nouvelle Région crééé avec success\",\n                    type: \"success\"\n                  });\n                  resetForm(true);\n                  setSubmitting(false);\n                }, 200);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x, _x2) {\n        return _ref4.apply(this, arguments);\n      };\n    }(),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, function (_ref5) {\n    var submitForm = _ref5.submitForm,\n        isSubmitting = _ref5.isSubmitting;\n    return __jsx(\"div\", {\n      className: classes.centerAll,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }, __jsx(Paper, {\n      className: classes.pageStyled,\n      elevation: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, __jsx(Form, {\n      \"aria-busy\": isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, (isSubmitting || loading) && __jsx(LinearProgress, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 47\n      }\n    }), __jsx(Grid, {\n      className: classes.centerAll,\n      container: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, __jsx(Grid, {\n      container: true,\n      className: classes.centerAll,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 19\n      }\n    }, __jsx(Grid, {\n      item: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }\n    }, __jsx(Error, {\n      error: error,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 23\n      }\n    }), __jsx(Typography, {\n      className: classes.titleStyled,\n      color: \"primary\",\n      gutterBottom: true,\n      variant: \"h5\",\n      component: \"h6\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 23\n      }\n    }, \"Nouvelle R\\xE9gion\"))), __jsx(Grid, {\n      item: true,\n      className: classes.centerAll,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 19\n      }\n    }, __jsx(Field, {\n      name: \"regName\",\n      component: TextField,\n      type: \"text\",\n      fullWidth: true,\n      label: \"Libell\\xE9 R\\xE9gion\",\n      variant: \"outlined\",\n      disabled: isSubmitting || loading,\n      helpertext: __jsx(ErrorMessage, {\n        name: \"regName\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 35\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }\n    }), __jsx(Field, {\n      name: \"regCode\",\n      component: TextField,\n      type: \"text\",\n      fullWidth: true,\n      label: \"Code R\\xE9gion\",\n      variant: \"outlined\",\n      disabled: isSubmitting || loading,\n      helpertext: __jsx(ErrorMessage, {\n        name: \"regCode\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 35\n        }\n      }),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    }), __jsx(Notification, {\n      notify: notify,\n      setNotify: setNotify,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 21\n      }\n    }), __jsx(Button, {\n      disabled: isSubmitting,\n      onClick: submitForm,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }\n    }, (isSubmitting || loading) && __jsx(CircularProgress, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 53\n      }\n    }), isSubmitting || loading ? \"Région en création\" : \"Crée Région\"))))));\n  });\n};\n\n_s(UpdateRegion, \"zkj5F6ZnROAEw4ZtEtwZurcGboA=\", false, function () {\n  return [useForm, useApolloClient, useMutation];\n});\n\n_c = UpdateRegion;\nexport default UpdateRegion;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateRegion\");","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/region/UpdateRegion.jsx"],"names":["React","useState","useEffect","useMutation","useApolloClient","Yup","useForm","Grid","Typography","Paper","Button","LinearProgress","CircularProgress","ErrorMessage","Formik","Form","Field","TextField","updateRegionMutation","getSingleRegionQuery","Notification","validationSchema","object","shape","regName","string","required","regCode","UpdateRegion","id","state","setState","client","isOpen","message","type","notify","setNotify","console","log","loadRegionData","query","variables","data","getRegionData","region","initialValues","updateRegion","values","setSubmitting","resetForm","res","setTimeout","JSON","stringify","submitForm","isSubmitting","classes","centerAll","pageStyled","loading","error","titleStyled"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { useMutation, useApolloClient } from \"@apollo/react-hooks\";\r\nimport * as Yup from \"yup\";\r\nimport useForm from \"../utils/useForm\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Paper,\r\n  Button,\r\n  LinearProgress,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { ErrorMessage, Formik, Form, Field } from \"formik\";\r\nimport { TextField } from \"material-ui-formik-components/TextField\";\r\n\r\nimport { updateRegionMutation } from \"../queries&Mutations&Functions/Mutations\";\r\nimport { getSingleRegionQuery } from \"../queries&Mutations&Functions/Queries\";\r\n\r\nimport Notification from \"../utils/Notification\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  regName: Yup.string().required(\"Nom Région Obligatoire\"),\r\n  regCode: Yup.string().required(\"Code Région Obligatoire\"),\r\n});\r\nconst UpdateRegion = ({ id }) => {\r\n  const [state, setState] = useForm({ regCode: \"\", regName: \"\" });\r\n  const client = useApolloClient();\r\n\r\n  const [notify, setNotify] = useState({\r\n    isOpen: false,\r\n    message: \"\",\r\n    type: \"\",\r\n  });\r\n  console.log(id);\r\n\r\n  const loadRegionData = async () => {\r\n    const { data } = await client.query({\r\n      query: getSingleRegionQuery,\r\n      variables: { id },\r\n    });\r\n    const getRegionData = data.region;\r\n    const { regName, regCode } = getRegionData;\r\n    setState({\r\n      regName: regName,\r\n      regCode: regCode,\r\n    });\r\n    return getRegionData;\r\n  };\r\n\r\n  const initialValues = {\r\n    regName: \"\",\r\n    regCode: \"\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadRegionData();\r\n  }, []);\r\n  console.log(state);\r\n\r\n  const [updateRegion] = useMutation(updateRegionMutation, {\r\n    variables: { id },\r\n  });\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={state || initialValues}\r\n      validationSchema={validationSchema}\r\n      enableReinitialize={true}\r\n      onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n        const res = await updateRegion({ variables: { ...values } });\r\n        setTimeout(() => {\r\n          console.log(JSON.stringify(values, null, 2));\r\n          console.log(res);\r\n          setNotify({\r\n            isOpen: true,\r\n            message: \"Nouvelle Région crééé avec success\",\r\n            type: \"success\",\r\n          });\r\n          resetForm(true);\r\n          setSubmitting(false);\r\n        }, 200);\r\n      }}\r\n    >\r\n      {({ submitForm, isSubmitting }) => {\r\n        return (\r\n          <div className={classes.centerAll}>\r\n            <Paper className={classes.pageStyled} elevation={3}>\r\n              <Form aria-busy={isSubmitting}>\r\n                {(isSubmitting || loading) && <LinearProgress />}\r\n                <Grid className={classes.centerAll} container>\r\n                  <Grid container className={classes.centerAll}>\r\n                    <Grid item>\r\n                      <Error error={error} />\r\n                      <Typography\r\n                        className={classes.titleStyled}\r\n                        color=\"primary\"\r\n                        gutterBottom\r\n                        variant=\"h5\"\r\n                        component=\"h6\"\r\n                      >\r\n                        Nouvelle Région\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item className={classes.centerAll}>\r\n                    <Field\r\n                      name=\"regName\"\r\n                      component={TextField}\r\n                      type=\"text\"\r\n                      fullWidth\r\n                      label=\"Libellé Région\"\r\n                      variant=\"outlined\"\r\n                      disabled={isSubmitting || loading}\r\n                      helpertext={<ErrorMessage name=\"regName\" />}\r\n                    />\r\n                    <Field\r\n                      name=\"regCode\"\r\n                      component={TextField}\r\n                      type=\"text\"\r\n                      fullWidth\r\n                      label=\"Code Région\"\r\n                      variant=\"outlined\"\r\n                      disabled={isSubmitting || loading}\r\n                      helpertext={<ErrorMessage name=\"regCode\" />}\r\n                    />\r\n                    <Notification notify={notify} setNotify={setNotify} />\r\n\r\n                    <Button disabled={isSubmitting} onClick={submitForm}>\r\n                      {(isSubmitting || loading) && <CircularProgress />}\r\n                      {isSubmitting || loading\r\n                        ? \"Région en création\"\r\n                        : \"Crée Région\"}\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            </Paper>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\nexport default UpdateRegion;\r\n"]},"metadata":{},"sourceType":"module"}