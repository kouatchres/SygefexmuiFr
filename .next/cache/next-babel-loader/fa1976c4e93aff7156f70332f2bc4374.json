{"ast":null,"code":"import _regeneratorRuntime from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _asyncToGenerator from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\sygefexMui\\\\sygefexMui-frontend\\\\src\\\\components\\\\division\\\\DivisionList.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport MaterialTable from \"material-table\";\nimport { Paper } from \"@material-ui/core\";\nimport { useApolloClient } from \"@apollo/react-hooks\";\nimport { getAllRegionsAndDivisionsQuery } from \"../queries&Mutations&Functions/Queries\";\nimport tableIcons from \"../utils/icons/tableIcons\";\nimport MyDialog from \"../utils/MyDialog\";\nimport { Edit as EditIcon, Add as AddIcon } from \"@material-ui/icons\";\nimport Button from \"@material-ui/core/Button\";\nimport NewDivision from \"./NewDivision\";\n\nvar DivisionList = function DivisionList() {\n  _s();\n\n  var client = useApolloClient();\n\n  var _useState = useState(false),\n      isDialogOpen = _useState[0],\n      setIsDialogOpen = _useState[1]; // const [dialogWord, setDialogWord] = useState(\"\");\n  // const [dialogId, setDialogId] = useState(\"\");\n  // const { openPopup, setOpenPopup } = useState(false);\n\n\n  var _useState2 = useState({\n    columns: [{\n      field: \"regName\",\n      title: \"Region Name\"\n    }, {\n      field: \"regCode\",\n      title: \"Region Code\",\n      grouping: false\n    }, {\n      field: \"divName\",\n      title: \"Division Name\"\n    }, {\n      field: \"divCode\",\n      title: \"Division Code\",\n      grouping: false\n    }],\n    data: []\n  }),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var loadDivisionData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$client$query, error, data, _data, regions, getDivisions;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return client.query({\n                query: getAllRegionsAndDivisionsQuery\n              });\n\n            case 2:\n              _yield$client$query = _context.sent;\n              error = _yield$client$query.error;\n              data = _yield$client$query.data;\n              _data = _objectSpread({}, data), regions = _data.regions;\n              getDivisions = regions.map(function (item) {\n                var divInfos = item.division.map(function (division) {\n                  return _objectSpread({\n                    regName: item.regName,\n                    regCode: item.regCode\n                  }, division);\n                });\n                return divInfos;\n              });\n              setState(function (prev) {\n                return _objectSpread(_objectSpread({}, prev), {}, {\n                  data: getDivisions.flat(1)\n                });\n              });\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadDivisionData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    loadDivisionData();\n    console.log(state.data);\n  }, []);\n\n  var handleDialogClose = function handleDialogClose(event) {\n    setIsDialogOpen(false);\n  };\n\n  var handleId = function handleId(event) {\n    setDialogId(event.target.value);\n  };\n\n  var handleWord = function handleWord(event) {\n    setDialogWord(event.target.value);\n  };\n\n  console.dir(state.data);\n  var actions = [{\n    icon: function icon() {\n      return __jsx(AddIcon, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 19\n        }\n      });\n    },\n    tooltip: \"Add User\",\n    isFreeAction: true,\n    onClick: function onClick(event, rowData) {\n      setOpenPopup(true);\n    }\n  }, {\n    icon: function icon() {\n      return __jsx(EditIcon, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 19\n        }\n      });\n    },\n    tooltip: \"Edit User\",\n    onClick: function onClick(event, rowData) {\n      setOpenPopup(true);\n    }\n  }];\n  return __jsx(React.Fragment, null, __jsx(MyDialog, {\n    title: \"Add User\",\n    isOpen: isDialogOpen,\n    onClose: handleDialogClose,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, __jsx(Paper, {\n    style: {\n      marginTop: \"2rem\"\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, __jsx(MaterialTable, {\n    stickyHeader: true,\n    style: {\n      position: \"sticky\",\n      top: 0\n    },\n    icons: tableIcons,\n    title: \"Users List\",\n    columns: state.columns,\n    data: state.data,\n    actions: actions,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }))));\n};\n\n_s(DivisionList, \"MGVGO8RhWdXhDdEesgvWrRzIUWk=\", false, function () {\n  return [useApolloClient];\n});\n\n_c = DivisionList;\nexport default DivisionList;\n\nvar _c;\n\n$RefreshReg$(_c, \"DivisionList\");","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/division/DivisionList.jsx"],"names":["React","useEffect","useState","MaterialTable","Paper","useApolloClient","getAllRegionsAndDivisionsQuery","tableIcons","MyDialog","Edit","EditIcon","Add","AddIcon","Button","NewDivision","DivisionList","client","isDialogOpen","setIsDialogOpen","columns","field","title","grouping","data","state","setState","loadDivisionData","query","error","regions","getDivisions","map","item","divInfos","division","regName","regCode","prev","flat","console","log","handleDialogClose","event","handleId","setDialogId","target","value","handleWord","setDialogWord","dir","actions","icon","tooltip","isFreeAction","onClick","rowData","setOpenPopup","marginTop","position","top"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport MaterialTable from \"material-table\";\r\nimport { Paper } from \"@material-ui/core\";\r\nimport { useApolloClient } from \"@apollo/react-hooks\";\r\nimport { getAllRegionsAndDivisionsQuery } from \"../queries&Mutations&Functions/Queries\";\r\nimport tableIcons from \"../utils/icons/tableIcons\";\r\nimport MyDialog from \"../utils/MyDialog\";\r\nimport { Edit as EditIcon, Add as AddIcon } from \"@material-ui/icons\";\r\n\r\nimport Button from \"@material-ui/core/Button\";\r\nimport NewDivision from \"./NewDivision\";\r\n\r\nconst DivisionList = () => {\r\n  const client = useApolloClient();\r\n\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  // const [dialogWord, setDialogWord] = useState(\"\");\r\n  // const [dialogId, setDialogId] = useState(\"\");\r\n  // const { openPopup, setOpenPopup } = useState(false);\r\n  const [state, setState] = useState({\r\n    columns: [\r\n      {\r\n        field: \"regName\",\r\n        title: \"Region Name\",\r\n      },\r\n      {\r\n        field: \"regCode\",\r\n        title: \"Region Code\",\r\n        grouping: false,\r\n      },\r\n      { field: \"divName\", title: \"Division Name\" },\r\n      { field: \"divCode\", title: \"Division Code\", grouping: false },\r\n    ],\r\n    data: [],\r\n  });\r\n\r\n  const loadDivisionData = async () => {\r\n    const { error, data } = await client.query({\r\n      query: getAllRegionsAndDivisionsQuery,\r\n    });\r\n    const { regions } = { ...data };\r\n\r\n    const getDivisions = regions.map((item) => {\r\n      const divInfos = item.division.map((division) => ({\r\n        regName: item.regName,\r\n        regCode: item.regCode,\r\n        ...division,\r\n      }));\r\n      return divInfos;\r\n    });\r\n\r\n    setState((prev) => ({ ...prev, data: getDivisions.flat(1) }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadDivisionData();\r\n\r\n    console.log(state.data);\r\n  }, []);\r\n\r\n\r\n  const handleDialogClose = (event) => {\r\n    setIsDialogOpen(false);\r\n  };\r\n\r\n  const handleId = (event) => {\r\n    setDialogId(event.target.value);\r\n  };\r\n\r\n  const handleWord = (event) => {\r\n    setDialogWord(event.target.value);\r\n  };\r\n\r\n  console.dir(state.data);\r\n\r\n  const actions = [\r\n    {\r\n      icon: () => <AddIcon />,\r\n      tooltip: \"Add User\",\r\n      isFreeAction: true,\r\n      onClick: (event, rowData) => {\r\n        setOpenPopup(true);\r\n      },\r\n    },\r\n    {\r\n      icon: () => <EditIcon />,\r\n      tooltip: \"Edit User\",\r\n      onClick: (event, rowData) => {\r\n        setOpenPopup(true);\r\n      },\r\n    },\r\n  ];\r\n  return (\r\n    <>\r\n      <MyDialog\r\n        title=\"Add User\"\r\n        isOpen={isDialogOpen}\r\n        onClose={handleDialogClose}\r\n      >\r\n        <Paper style={{ marginTop: \"2rem\" }}>\r\n          <MaterialTable\r\n            stickyHeader\r\n            style={{ position: \"sticky\", top: 0 }}\r\n            icons={tableIcons}\r\n            title=\"Users List\"\r\n            columns={state.columns}\r\n            data={state.data}\r\n            actions={actions}\r\n          />\r\n        </Paper>\r\n      </MyDialog>\r\n    </>\r\n  );\r\n};\r\nexport default DivisionList;\r\n"]},"metadata":{},"sourceType":"module"}