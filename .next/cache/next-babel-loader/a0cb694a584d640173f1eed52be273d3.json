{"ast":null,"code":"var _jsxFileName = \"E:\\\\sygefexMui\\\\sygefexMui-frontend\\\\src\\\\components\\\\results\\\\center\\\\CenterResultsPerSeries.jsx\";\nvar __jsx = React.createElement;\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { Component } from 'react';\nimport { Mutation, Query } from 'react-apollo';\nimport Form from '../../styles/Form';\nimport { MiniStyledPage } from '../../styles/StyledPage';\nimport Error from '../../ErrorMessage';\nimport styled from 'styled-components';\nimport Router from 'next/router';\nimport { getSelectedObject } from '../../queries&Mutations&Functions/Functions';\nimport { getExamSessionQuery, getAllExamsQuery, getAllSessionsQuery, getSingleCenterExamSessionQuery, getAllSeriesOfACenterExamSessionQuery, getCenterExamSessionSeriesQuery, getSingleCenterQuery } from '../../queries&Mutations&Functions/Queries';\nconst StyledDivision = styled.div.withConfig({\n  displayName: \"CenterResultsPerSeries__StyledDivision\",\n  componentId: \"sc-1bsgxra-0\"\n})([\"display:grid;grid-template-columns:1fr;text-align:center;margin:0 auto;.submitButton{paddding-top:2rem;}\"]);\nconst OtherSelect = styled.div.withConfig({\n  displayName: \"CenterResultsPerSeries__OtherSelect\",\n  componentId: \"sc-1bsgxra-1\"\n})([\"display:block;text-align:center;margin:0 auto;\"]);\n\nclass CenterResultsPerSeries extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      examID: \"\",\n      sessionID: \"\",\n      centerNumber: \"\",\n      candCode: \"\",\n      seriesID: \"\"\n    });\n\n    _defineProperty(this, \"handleChange\", e => {\n      const {\n        name,\n        value,\n        type\n      } = e.target;\n      const val = type === 'number' ? parseInt(value) : value;\n      this.setState({\n        [name]: val\n      });\n    });\n\n    _defineProperty(this, \"resetForm\", () => {\n      this.setState({\n        candCode: ''\n      });\n    });\n\n    _defineProperty(this, \"makeCenterVariableObject\", centerCodeValue => {\n      const storedCenter = {\n        centerNumber: `${centerCodeValue}`\n      };\n      return storedCenter;\n    });\n\n    _defineProperty(this, \"candRegistrationNumber\", (centerCode, exam, session) => {\n      return `${centerCode + exam + session}`;\n    });\n\n    _defineProperty(this, \"makeCandVariableObject\", candCodeValue => {\n      const storedCandidate = {\n        candCode: `${candCodeValue}`\n      };\n      return storedCandidate;\n    });\n\n    _defineProperty(this, \"makeCESSObject\", candCodeValue => {\n      const objCESS = {\n        id: `${candCodeValue}`\n      };\n      return objCESS;\n    });\n  }\n\n  render() {\n    const {\n      candCode,\n      seriesID,\n      examID,\n      sessionID,\n      centerNumber\n    } = this.state;\n    return __jsx(Query, {\n      query: getAllExamsQuery,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, ({\n      data,\n      loading,\n      error\n    }) => {\n      {\n        loading && __jsx(\"p\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 36\n          }\n        }, \"loading...\");\n      }\n      {\n        error && __jsx(Error, {\n          error: error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 34\n          }\n        });\n      }\n      const {\n        exams\n      } = data;\n      console.log(exams);\n\n      const getExamName = exams && _objectSpread({}, getSelectedObject(exams, examID));\n\n      const refinedExams = exams && exams.map((_ref) => {\n        let {\n          __typename,\n          examName\n        } = _ref,\n            others = _objectWithoutProperties(_ref, [\"__typename\", \"examName\"]);\n\n        return others;\n      });\n      return __jsx(Query, {\n        query: getAllSessionsQuery,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }\n      }, ({\n        data,\n        loading,\n        error\n      }) => {\n        {\n          loading && __jsx(\"p\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 41\n            }\n          }, \"loading...\");\n        }\n        {\n          error && __jsx(Error, {\n            error: error,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 47\n            }\n          });\n        }\n        const {\n          sessions\n        } = data;\n        console.log(sessions);\n\n        const getSessionName = sessions && _objectSpread({}, getSelectedObject(sessions, sessionID));\n\n        const refinedSessions = sessions && sessions.map((_ref2) => {\n          let {\n            __typename,\n            sessionName\n          } = _ref2,\n              others = _objectWithoutProperties(_ref2, [\"__typename\", \"sessionName\"]);\n\n          return others;\n        });\n        return __jsx(Query, {\n          query: getExamSessionQuery,\n          variables: {\n            exam: refinedExams && getSelectedObject(refinedExams, examID),\n            session: refinedSessions && getSelectedObject(refinedSessions, sessionID)\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 37\n          }\n        }, ({\n          data,\n          error,\n          loading\n        }) => {\n          console.log(data);\n\n          const {\n            examSessions\n          } = _objectSpread({}, data);\n\n          const refinedES = examSessions && examSessions.map((_ref3) => {\n            let {\n              __typename\n            } = _ref3,\n                others = _objectWithoutProperties(_ref3, [\"__typename\"]);\n\n            return others;\n          });\n          const reducedES = refinedES && refinedES.reduce(item => item);\n          console.log(reducedES);\n          return __jsx(Query, {\n            query: getSingleCenterQuery,\n            variables: {\n              centerNumber: centerNumber\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 49\n            }\n          }, ({\n            data,\n            error,\n            loading\n          }) => {\n            {\n              loading && __jsx(\"p\", {\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 142,\n                  columnNumber: 70\n                }\n              }, \"...Loading\");\n            }\n            {\n              error && __jsx(Error, {\n                error: error,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 68\n                }\n              });\n            }\n\n            const {\n              centerByNumber\n            } = _objectSpread({}, data);\n\n            centerByNumber && delete centerByNumber.__typename;\n            console.log(centerByNumber);\n            return __jsx(Query, {\n              query: getSingleCenterExamSessionQuery,\n              variables: {\n                examSession: reducedES && reducedES,\n                center: centerByNumber && centerByNumber\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 148,\n                columnNumber: 61\n              }\n            }, ({\n              data,\n              error,\n              loading\n            }) => {\n              {\n                loading && __jsx(\"p\", {\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 155,\n                    columnNumber: 82\n                  }\n                }, \"...Loading\");\n              }\n              {\n                error && __jsx(Error, {\n                  error: error,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 156,\n                    columnNumber: 80\n                  }\n                });\n              }\n\n              const {\n                centerExamSessionsByCode\n              } = _objectSpread({}, data);\n\n              console.log(data);\n              console.log(centerExamSessionsByCode);\n              const reducesCES = centerExamSessionsByCode && centerExamSessionsByCode.reduce(item => item);\n              console.log(reducesCES); // remove typename from the object\n\n              const refinedCenterExamSessions = centerExamSessionsByCode && centerExamSessionsByCode.map((_ref4) => {\n                let {\n                  __typename\n                } = _ref4,\n                    others = _objectWithoutProperties(_ref4, [\"__typename\"]);\n\n                return others;\n              }); // transform the array into a single object\n\n              const getObj = refinedCenterExamSessions && refinedCenterExamSessions.reduce(item => item);\n              console.log(getObj);\n              return __jsx(Query, {\n                query: getAllSeriesOfACenterExamSessionQuery,\n                variables: {\n                  id: getObj && getObj.id\n                },\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 73\n                }\n              }, ({\n                data,\n                loading,\n                error\n              }) => {\n                {\n                  loading && __jsx(\"p\", {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 175,\n                      columnNumber: 94\n                    }\n                  }, \"...Loading\");\n                }\n                {\n                  error && __jsx(Error, {\n                    error: error,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 176,\n                      columnNumber: 92\n                    }\n                  });\n                }\n                console.log(data);\n                const {\n                  centerExamSession\n                } = data;\n\n                const seriesCES = _objectSpread({}, centerExamSession);\n\n                const {\n                  centerExamSessionSeries\n                } = seriesCES;\n                console.log(centerExamSessionSeries); // get all the series out of this object\n\n                const newSeries = centerExamSessionSeries && centerExamSessionSeries.map(item => item.series);\n                const refinedSeries = newSeries && newSeries.map((_ref5) => {\n                  let {\n                    __typename,\n                    seriesName\n                  } = _ref5,\n                      others = _objectWithoutProperties(_ref5, [\"__typename\", \"seriesName\"]);\n\n                  return others;\n                });\n                const seriesOptions = newSeries && newSeries.map(item => __jsx(\"option\", {\n                  key: item.id,\n                  value: item.id,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 194,\n                    columnNumber: 85\n                  }\n                }, item.seriesName));\n                return __jsx(Query, {\n                  query: getCenterExamSessionSeriesQuery,\n                  variables: {\n                    centerExamSession: getObj && getObj,\n                    series: refinedSeries && getSelectedObject(refinedSeries, seriesID)\n                  },\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 201,\n                    columnNumber: 85\n                  }\n                }, ({\n                  data,\n                  error,\n                  loading\n                }) => {\n                  {\n                    loading && __jsx(\"p\", {\n                      __self: this,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 206,\n                        columnNumber: 106\n                      }\n                    }, \"...Loading\");\n                  }\n                  {\n                    error && __jsx(Error, {\n                      error: error,\n                      __self: this,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 207,\n                        columnNumber: 104\n                      }\n                    });\n                  }\n\n                  const {\n                    centerExamSessionSerieses\n                  } = _objectSpread({}, data);\n\n                  const getCESS = centerExamSessionSerieses && centerExamSessionSerieses.reduce(item => item);\n                  console.log(getCESS);\n                  console.log(refinedSeries);\n\n                  const {\n                    id: idObj\n                  } = _objectSpread({}, getCESS);\n\n                  const refinedCESS = idObj && this.makeCESSObject(idObj);\n                  console.log(refinedCESS);\n                  refinedCESS && Router.push({\n                    pathname: '/show/results/centerResults/centerResultsForSeries',\n                    query: {\n                      id: refinedCESS.id\n                    }\n                  });\n                  return __jsx(MiniStyledPage, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 220,\n                      columnNumber: 97\n                    }\n                  }, __jsx(Form, {\n                    method: \"POST\",\n                    onSubmit: async e => {\n                      e.preventDefault();\n                      this.resetForm();\n                    },\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 221,\n                      columnNumber: 101\n                    }\n                  }, __jsx(\"h4\", {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 228,\n                      columnNumber: 105\n                    }\n                  }, \"Resultats pr S\\xE9rie\"), __jsx(Error, {\n                    error: error,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 231,\n                      columnNumber: 105\n                    }\n                  }), __jsx(\"fieldset\", {\n                    disabled: loading,\n                    \"aria-busy\": loading,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 232,\n                      columnNumber: 105\n                    }\n                  }, __jsx(StyledDivision, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 233,\n                      columnNumber: 109\n                    }\n                  }, __jsx(OtherSelect, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 235,\n                      columnNumber: 113\n                    }\n                  }, __jsx(\"input\", {\n                    type: \"textarea\",\n                    id: \"centerName\",\n                    name: \"centerName\",\n                    placeholder: \"Nom du centre\",\n                    value: centerByNumber && centerByNumber.centerCode,\n                    rows: \"2\",\n                    wrap: \"soft\",\n                    readOnly: true,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 236,\n                      columnNumber: 117\n                    }\n                  }), __jsx(\"input\", {\n                    type: \"number\",\n                    id: \"centerNumber\",\n                    name: \"centerNumber\",\n                    placeholder: \"Num\\xE9ro du centre\",\n                    value: centerNumber,\n                    onChange: this.handleChange,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 246,\n                      columnNumber: 117\n                    }\n                  }), __jsx(\"select\", {\n                    type: \"select\",\n                    id: \"sessionID\",\n                    name: \"sessionID\",\n                    value: sessionID,\n                    onChange: this.handleChange,\n                    required: true,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 255,\n                      columnNumber: 117\n                    }\n                  }, __jsx(\"option\", {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 262,\n                      columnNumber: 121\n                    }\n                  }, \"La Session\"), sessions && sessions.map(item => __jsx(\"option\", {\n                    key: item.id,\n                    value: item.id,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 266,\n                      columnNumber: 125\n                    }\n                  }, item.sessionName))), __jsx(\"select\", {\n                    type: \"select\",\n                    id: \"examID\",\n                    name: \"examID\",\n                    value: examID,\n                    onChange: this.handleChange,\n                    required: true,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 272,\n                      columnNumber: 117\n                    }\n                  }, __jsx(\"option\", {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 279,\n                      columnNumber: 121\n                    }\n                  }, \"L'Examen\"), exams && exams.map(item => __jsx(\"option\", {\n                    key: item.id,\n                    value: item.id,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 283,\n                      columnNumber: 125\n                    }\n                  }, item.examName))), __jsx(\"select\", {\n                    type: \"select\",\n                    id: \"seriesID\",\n                    name: \"seriesID\",\n                    value: seriesID,\n                    onChange: this.handleChange,\n                    required: true,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 288,\n                      columnNumber: 117\n                    }\n                  }, __jsx(\"option\", {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 295,\n                      columnNumber: 121\n                    }\n                  }, \"La S\\xE9rie\"), seriesOptions && seriesOptions))))));\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n\n}\n\nexport default CenterResultsPerSeries;","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/results/center/CenterResultsPerSeries.jsx"],"names":["React","Component","Mutation","Query","Form","MiniStyledPage","Error","styled","Router","getSelectedObject","getExamSessionQuery","getAllExamsQuery","getAllSessionsQuery","getSingleCenterExamSessionQuery","getAllSeriesOfACenterExamSessionQuery","getCenterExamSessionSeriesQuery","getSingleCenterQuery","StyledDivision","div","OtherSelect","CenterResultsPerSeries","examID","sessionID","centerNumber","candCode","seriesID","e","name","value","type","target","val","parseInt","setState","centerCodeValue","storedCenter","centerCode","exam","session","candCodeValue","storedCandidate","objCESS","id","render","state","data","loading","error","exams","console","log","getExamName","refinedExams","map","__typename","examName","others","sessions","getSessionName","refinedSessions","sessionName","examSessions","refinedES","reducedES","reduce","item","centerByNumber","examSession","center","centerExamSessionsByCode","reducesCES","refinedCenterExamSessions","getObj","centerExamSession","seriesCES","centerExamSessionSeries","newSeries","series","refinedSeries","seriesName","seriesOptions","centerExamSessionSerieses","getCESS","idObj","refinedCESS","makeCESSObject","push","pathname","query","preventDefault","resetForm","handleChange"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Mutation, Query } from 'react-apollo';\r\nimport Form from '../../styles/Form';\r\nimport { MiniStyledPage } from '../../styles/StyledPage';\r\nimport Error from '../../ErrorMessage';\r\nimport styled from 'styled-components';\r\nimport Router from 'next/router'\r\nimport { getSelectedObject } from '../../queries&Mutations&Functions/Functions';\r\nimport {\r\n    getExamSessionQuery,\r\n    getAllExamsQuery,\r\n    getAllSessionsQuery,\r\n    getSingleCenterExamSessionQuery,\r\n    getAllSeriesOfACenterExamSessionQuery,\r\n    getCenterExamSessionSeriesQuery,\r\n    getSingleCenterQuery\r\n} from '../../queries&Mutations&Functions/Queries';\r\n\r\nconst StyledDivision = styled.div`\r\n\tdisplay: grid;\r\n\tgrid-template-columns: 1fr;\r\n\ttext-align: center;\r\n\tmargin: 0 auto;\r\n    .submitButton{\r\npaddding-top:2rem;\r\n    }\r\n`;\r\n\r\n\r\nconst OtherSelect = styled.div`\r\n\tdisplay: block;\r\n\ttext-align: center;\r\n\tmargin: 0 auto;\r\n`;\r\n\r\nclass CenterResultsPerSeries extends Component {\r\n    state = {\r\n        examID: \"\",\r\n        sessionID: \"\",\r\n        centerNumber: \"\",\r\n        candCode: \"\",\r\n        seriesID: \"\",\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        const { name, value, type } = e.target;\r\n        const val = type === 'number' ? parseInt(value) : value;\r\n        this.setState({ [name]: val });\r\n    };\r\n\r\n    resetForm = () => {\r\n        this.setState({ candCode: '' });\r\n    };\r\n\r\n    makeCenterVariableObject = (centerCodeValue) => {\r\n        const storedCenter = {\r\n            centerNumber: `${centerCodeValue}`\r\n        };\r\n        return storedCenter;\r\n    };\r\n\r\n    candRegistrationNumber = (centerCode, exam, session) => {\r\n\r\n        return `${centerCode + exam + session}`\r\n\r\n    };\r\n    makeCandVariableObject = (candCodeValue) => {\r\n        const storedCandidate = {\r\n            candCode: `${candCodeValue}`\r\n        };\r\n        return storedCandidate;\r\n    };\r\n    makeCESSObject = (candCodeValue) => {\r\n        const objCESS = {\r\n            id: `${candCodeValue}`\r\n        };\r\n        return objCESS;\r\n    };\r\n\r\n    render() {\r\n        const {\r\n            candCode,\r\n            seriesID,\r\n            examID,\r\n            sessionID,\r\n            centerNumber\r\n        } = this.state;\r\n        return (\r\n            <Query query={getAllExamsQuery}>\r\n                {({ data, loading, error }) => {\r\n                    {\r\n                        loading && <p>loading...</p>;\r\n                    }\r\n                    {\r\n                        error && <Error error={error} />;\r\n                    }\r\n\r\n                    const { exams } = data;\r\n                    console.log(exams);\r\n                    const getExamName = exams && { ...getSelectedObject(exams, examID) }\r\n                    const refinedExams =\r\n                        exams && exams.map(({ __typename, examName, ...others }) => others);\r\n\r\n                    return (\r\n                        <Query query={getAllSessionsQuery}>\r\n                            {({ data, loading, error }) => {\r\n                                {\r\n                                    loading && (\r\n                                        <p >\r\n                                            loading...\r\n                                        </p>\r\n                                    );\r\n                                }\r\n                                {\r\n                                    error && (<Error error={error} />);\r\n                                }\r\n\r\n                                const { sessions } = data;\r\n                                console.log(sessions);\r\n                                const getSessionName = sessions && { ...getSelectedObject(sessions, sessionID) }\r\n                                const refinedSessions = sessions && sessions.map(({ __typename, sessionName, ...others }) => others);\r\n\r\n                                return (\r\n\r\n                                    <Query query={getExamSessionQuery}\r\n                                        variables={{\r\n\r\n                                            exam: refinedExams && getSelectedObject(refinedExams, examID),\r\n                                            session: refinedSessions && getSelectedObject(refinedSessions, sessionID)\r\n                                        }}  >\r\n                                        {({ data, error, loading }) => {\r\n                                            console.log(data)\r\n                                            const { examSessions } = { ...data }\r\n                                            const refinedES = examSessions && examSessions.map(({ __typename, ...others }) => others)\r\n                                            const reducedES = refinedES && refinedES.reduce((item) => item)\r\n                                            console.log(reducedES)\r\n\r\n                                            return (\r\n                                                <Query query={getSingleCenterQuery}\r\n                                                    variables={{ centerNumber: centerNumber, }}  >\r\n                                                    {({ data, error, loading }) => {\r\n                                                        { loading && <p>...Loading</p> }\r\n                                                        { error && <Error error={error} /> }\r\n                                                        const { centerByNumber } = { ...data }\r\n                                                        centerByNumber && delete centerByNumber.__typename\r\n                                                        console.log(centerByNumber)\r\n                                                        return (\r\n                                                            <Query\r\n                                                                query={getSingleCenterExamSessionQuery}\r\n                                                                variables={{\r\n                                                                    examSession: reducedES && reducedES,\r\n                                                                    center: centerByNumber && centerByNumber\r\n                                                                }}>\r\n                                                                {({ data, error, loading }) => {\r\n                                                                    { loading && <p>...Loading</p> }\r\n                                                                    { error && <Error error={error} /> }\r\n                                                                    const { centerExamSessionsByCode } = { ...data }\r\n                                                                    console.log(data);\r\n                                                                    console.log(centerExamSessionsByCode);\r\n                                                                    const reducesCES = centerExamSessionsByCode && centerExamSessionsByCode.reduce((item) => item)\r\n                                                                    console.log(reducesCES);\r\n                                                                    // remove typename from the object\r\n                                                                    const refinedCenterExamSessions =\r\n                                                                        centerExamSessionsByCode && centerExamSessionsByCode.map(({ __typename, ...others }) => others);\r\n                                                                    // transform the array into a single object\r\n                                                                    const getObj = refinedCenterExamSessions && refinedCenterExamSessions.reduce((item) => item);\r\n                                                                    console.log(getObj);\r\n\r\n\r\n                                                                    return (\r\n                                                                        <Query\r\n                                                                            query={getAllSeriesOfACenterExamSessionQuery}\r\n                                                                            variables={{ id: getObj && getObj.id }}>\r\n                                                                            {({ data, loading, error }) => {\r\n                                                                                { loading && <p>...Loading</p> }\r\n                                                                                { error && <Error error={error} /> }\r\n                                                                                console.log(data);\r\n\r\n                                                                                const { centerExamSession } = data;\r\n\r\n                                                                                const seriesCES = {\r\n                                                                                    ...centerExamSession\r\n                                                                                };\r\n                                                                                const { centerExamSessionSeries } = seriesCES;\r\n                                                                                console.log(centerExamSessionSeries);\r\n                                                                                // get all the series out of this object\r\n\r\n                                                                                const newSeries = centerExamSessionSeries && centerExamSessionSeries.map((item) => (item.series))\r\n                                                                                const refinedSeries =\r\n                                                                                    newSeries && newSeries.map(({ __typename, seriesName, ...others }) => others);\r\n\r\n\r\n                                                                                const seriesOptions = newSeries && newSeries.map((item) => (\r\n                                                                                    <option key={item.id} value={item.id}>\r\n                                                                                        {item.seriesName}\r\n                                                                                    </option>\r\n                                                                                ));\r\n\r\n                                                                                return (\r\n\r\n                                                                                    <Query query={getCenterExamSessionSeriesQuery} variables={{\r\n                                                                                        centerExamSession: getObj && getObj,\r\n                                                                                        series: refinedSeries && getSelectedObject(refinedSeries, seriesID)\r\n                                                                                    }}   >\r\n                                                                                        {({ data, error, loading }) => {\r\n                                                                                            { loading && <p>...Loading</p> }\r\n                                                                                            { error && <Error error={error} /> }\r\n                                                                                            const { centerExamSessionSerieses } = { ...data }\r\n                                                                                            const getCESS = centerExamSessionSerieses && centerExamSessionSerieses.reduce((item) => item)\r\n                                                                                            console.log(getCESS)\r\n                                                                                            console.log(refinedSeries)\r\n                                                                                            const { id: idObj } = { ...getCESS }\r\n                                                                                            const refinedCESS = idObj && this.makeCESSObject(idObj)\r\n                                                                                            console.log(refinedCESS)\r\n                                                                                            refinedCESS && Router.push({\r\n                                                                                                pathname: '/show/results/centerResults/centerResultsForSeries',\r\n                                                                                                query: { id: refinedCESS.id }\r\n                                                                                            });\r\n                                                                                            return (\r\n                                                                                                <MiniStyledPage >\r\n                                                                                                    <Form\r\n                                                                                                        method=\"POST\"\r\n                                                                                                        onSubmit={async (e) => {\r\n                                                                                                            e.preventDefault();\r\n                                                                                                            this.resetForm();\r\n\r\n                                                                                                        }}>\r\n                                                                                                        <h4>\r\n                                                                                                            Resultats pr Série\r\n                                                                                                    </h4>\r\n                                                                                                        <Error error={error} />\r\n                                                                                                        <fieldset disabled={loading} aria-busy={loading}>\r\n                                                                                                            <StyledDivision >\r\n\r\n                                                                                                                <OtherSelect >\r\n                                                                                                                    <input\r\n                                                                                                                        type=\"textarea\"\r\n                                                                                                                        id=\"centerName\"\r\n                                                                                                                        name=\"centerName\"\r\n                                                                                                                        placeholder=\"Nom du centre\"\r\n                                                                                                                        value={centerByNumber && centerByNumber.centerCode}\r\n                                                                                                                        rows=\"2\"\r\n                                                                                                                        wrap=\"soft\"\r\n                                                                                                                        readOnly\r\n                                                                                                                    />\r\n                                                                                                                    <input\r\n                                                                                                                        type=\"number\"\r\n                                                                                                                        id=\"centerNumber\"\r\n                                                                                                                        name=\"centerNumber\"\r\n                                                                                                                        placeholder=\"Numéro du centre\"\r\n                                                                                                                        value={centerNumber}\r\n                                                                                                                        onChange={this.handleChange}\r\n                                                                                                                    />\r\n\r\n                                                                                                                    <select\r\n                                                                                                                        type=\"select\"\r\n                                                                                                                        id=\"sessionID\"\r\n                                                                                                                        name=\"sessionID\"\r\n                                                                                                                        value={sessionID}\r\n                                                                                                                        onChange={this.handleChange}\r\n                                                                                                                        required>\r\n                                                                                                                        <option >\r\n                                                                                                                            La Session\r\n                                                                                                                                                                    </option>\r\n                                                                                                                        {sessions && sessions.map((item) => (\r\n                                                                                                                            <option key={item.id} value={item.id}>\r\n                                                                                                                                {item.sessionName}\r\n                                                                                                                            </option>\r\n                                                                                                                        ))}\r\n                                                                                                                    </select>\r\n\r\n                                                                                                                    <select\r\n                                                                                                                        type=\"select\"\r\n                                                                                                                        id=\"examID\"\r\n                                                                                                                        name=\"examID\"\r\n                                                                                                                        value={examID}\r\n                                                                                                                        onChange={this.handleChange}\r\n                                                                                                                        required>\r\n                                                                                                                        <option >\r\n                                                                                                                            L'Examen\r\n                                                                                                                                                                    </option>\r\n                                                                                                                        {exams && exams.map((item) => (\r\n                                                                                                                            <option key={item.id} value={item.id}>\r\n                                                                                                                                {item.examName}\r\n                                                                                                                            </option>\r\n                                                                                                                        ))}\r\n                                                                                                                    </select>\r\n                                                                                                                    <select\r\n                                                                                                                        type=\"select\"\r\n                                                                                                                        id=\"seriesID\"\r\n                                                                                                                        name=\"seriesID\"\r\n                                                                                                                        value={seriesID}\r\n                                                                                                                        onChange={this.handleChange}\r\n                                                                                                                        required>\r\n                                                                                                                        <option >\r\n                                                                                                                            La Série\r\n                                                                                                                                                                    </option>\r\n                                                                                                                        {seriesOptions && seriesOptions}\r\n                                                                                                                    </select>\r\n\r\n\r\n                                                                                                                    {/* <div className=\"submitButton\">\r\n                                                                                                                    <button type=\"submit\">\r\n                                                                                                                        Valid{loading\r\n                                                                                                                            ? 'ation en cours'\r\n                                                                                                                            : 'er'}\r\n                                                                                                                    </button>\r\n                                                                                                                </div> */}\r\n                                                                                                                </OtherSelect>\r\n                                                                                                            </StyledDivision>\r\n                                                                                                        </fieldset>\r\n                                                                                                    </Form>\r\n                                                                                                </MiniStyledPage>\r\n\r\n\r\n                                                                                            )\r\n                                                                                        }}\r\n                                                                                    </Query>\r\n                                                                                )\r\n                                                                            }}\r\n                                                                        </Query>\r\n                                                                    );\r\n                                                                }\r\n                                                                }\r\n                                                            </Query>\r\n                                                        );\r\n                                                    }\r\n                                                    }\r\n                                                </Query>\r\n                                            );\r\n                                        }\r\n                                        }\r\n                                    </Query>\r\n                                );\r\n                            }\r\n                            }\r\n                        </Query>\r\n                    );\r\n                }\r\n                }\r\n            </Query>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default CenterResultsPerSeries;\r\n"]},"metadata":{},"sourceType":"module"}