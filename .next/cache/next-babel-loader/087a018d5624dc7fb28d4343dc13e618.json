{"ast":null,"code":"import _defineProperty from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _regeneratorRuntime from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"E:/sygefexMui/sygefexMui-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"E:\\\\sygefexMui\\\\sygefexMui-frontend\\\\src\\\\components\\\\division\\\\UpdateDivision.jsx\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect } from \"react\";\nimport { useMutation, useApolloClient } from \"@apollo/react-hooks\";\nimport { MinimStyledPage } from \"../styles/StyledPage\";\nimport Error from \"../ErrorMessage.js\";\nimport { Formik, Form } from \"formik\";\nimport useForm from \"../utils/useForm\";\nimport * as Yup from \"yup\";\nimport { updateDivisionMutation } from \"../queries&Mutations&Functions/Mutations\";\nimport { singleDivisionQuery } from \"../queries&Mutations&Functions/Queries\";\nimport { StyledForm, SygexInput, StyledButton, ButtonStyled } from \"../utils/FormInputs\";\nvar validationSchema = Yup.object().shape({\n  divName: Yup.string().required(\"Nom du département Obligatoire\"),\n  divCode: Yup.string().required(\"Code du département Obligatoire\")\n});\n\nvar UpdateDivision = function UpdateDivision(id) {\n  _s();\n\n  var _useForm = useForm({}),\n      _useForm2 = _slicedToArray(_useForm, 2),\n      state = _useForm2[0],\n      setState = _useForm2[1];\n\n  var client = useApolloClient();\n  console.log(id);\n\n  var loadDivisionData = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var _yield$client$query, data, error;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return client.query({\n                query: singleDivisionQuery,\n                variables: {\n                  id: id\n                }\n              });\n\n            case 2:\n              _yield$client$query = _context.sent;\n              data = _yield$client$query.data;\n              error = _yield$client$query.error;\n              console.log(data);\n              setState(data.division);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function loadDivisionData() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    loadDivisionData();\n  }, []);\n  var initialValues = {\n    divName: \"\",\n    divCode: \"\"\n  };\n  console.log(state);\n\n  var _useMutation = useMutation(updateDivisionMutation, {\n    variables: {\n      id: id\n    }\n  }),\n      _useMutation2 = _slicedToArray(_useMutation, 1),\n      updateDivision = _useMutation2[0];\n\n  return __jsx(Formik, {\n    initialValues: state || initialValues,\n    validationSchema: validationSchema,\n    enableReinitialize: true,\n    onSubmit: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(values, _ref2) {\n        var setSubmitting, resetForm, res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                setSubmitting = _ref2.setSubmitting, resetForm = _ref2.resetForm;\n                _context2.next = 3;\n                return updateDivision({\n                  variables: _objectSpread({}, values)\n                });\n\n              case 3:\n                res = _context2.sent;\n                setTimeout(function () {\n                  console.log(JSON.stringify(values, null, 2));\n                  console.log(res);\n                  resetForm(true);\n                  setSubmitting(false);\n                }, 200);\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x, _x2) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    method: \"POST\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, function (_ref4) {\n    var values = _ref4.values,\n        isSubmitting = _ref4.isSubmitting;\n    return __jsx(MinimStyledPage, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }, __jsx(\"h4\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }\n    }, \"Correction info d\\xE9partement \"), __jsx(StyledForm, {\n      disabled: isSubmitting,\n      \"aria-busy\": isSubmitting,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }, __jsx(Form, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, __jsx(SygexInput, {\n      type: \"text\",\n      id: \"divName\",\n      name: \"divName\",\n      placeholder: \"Nom du D\\xE9partement\",\n      disabled: isSubmitting,\n      required: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }), __jsx(SygexInput, {\n      type: \"text\",\n      id: \"divCode\",\n      name: \"divCode\",\n      placeholder: \"Code du D\\xE9partement\",\n      disabled: isSubmitting,\n      required: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 15\n      }\n    }), __jsx(ButtonStyled, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, __jsx(StyledButton, {\n      type: \"submit\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }\n    }, \"Valid\", isSubmitting ? \"ation en cours\" : \"er\")))));\n  });\n};\n\n_s(UpdateDivision, \"emVsqiBamnrm0wh6LtxLos701dA=\", false, function () {\n  return [useForm, useApolloClient, useMutation];\n});\n\n_c = UpdateDivision;\nexport default UpdateDivision;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateDivision\");","map":{"version":3,"sources":["E:/sygefexMui/sygefexMui-frontend/src/components/division/UpdateDivision.jsx"],"names":["React","useEffect","useMutation","useApolloClient","MinimStyledPage","Error","Formik","Form","useForm","Yup","updateDivisionMutation","singleDivisionQuery","StyledForm","SygexInput","StyledButton","ButtonStyled","validationSchema","object","shape","divName","string","required","divCode","UpdateDivision","id","state","setState","client","console","log","loadDivisionData","query","variables","data","error","division","initialValues","updateDivision","values","setSubmitting","resetForm","res","setTimeout","JSON","stringify","isSubmitting"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { useMutation, useApolloClient } from \"@apollo/react-hooks\";\r\nimport { MinimStyledPage } from \"../styles/StyledPage\";\r\nimport Error from \"../ErrorMessage.js\";\r\nimport { Formik, Form } from \"formik\";\r\nimport useForm from \"../utils/useForm\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport { updateDivisionMutation } from \"../queries&Mutations&Functions/Mutations\";\r\nimport { singleDivisionQuery } from \"../queries&Mutations&Functions/Queries\";\r\nimport {\r\n  StyledForm,\r\n  SygexInput,\r\n  StyledButton,\r\n  ButtonStyled,\r\n} from \"../utils/FormInputs\";\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  divName: Yup.string().required(\"Nom du département Obligatoire\"),\r\n  divCode: Yup.string().required(\"Code du département Obligatoire\"),\r\n});\r\nconst UpdateDivision = (id) => {\r\n  const [state, setState] = useForm({});\r\n  const client = useApolloClient();\r\n  console.log(id);\r\n\r\n  const loadDivisionData = async () => {\r\n    const { data, error } = await client.query({\r\n      query: singleDivisionQuery,\r\n      variables: { id },\r\n    });\r\n    console.log(data);\r\n    setState(data.division);\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadDivisionData();\r\n  }, []);\r\n  const initialValues = {\r\n    divName: \"\",\r\n    divCode: \"\",\r\n  };\r\n  console.log(state);\r\n  const [updateDivision] = useMutation(updateDivisionMutation, {\r\n    variables: { id },\r\n  });\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={state || initialValues}\r\n      validationSchema={validationSchema}\r\n      enableReinitialize={true}\r\n      onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n        const res = await updateDivision({\r\n          variables: { ...values },\r\n        });\r\n        setTimeout(() => {\r\n          console.log(JSON.stringify(values, null, 2));\r\n          console.log(res);\r\n          resetForm(true);\r\n          setSubmitting(false);\r\n        }, 200);\r\n      }}\r\n      method=\"POST\"\r\n    >\r\n      {({ values, isSubmitting }) => (\r\n        <MinimStyledPage>\r\n          <h4>Correction info département </h4>\r\n          <StyledForm disabled={isSubmitting} aria-busy={isSubmitting}>\r\n            <Form>\r\n            \r\n              <SygexInput\r\n                type=\"text\"\r\n                id=\"divName\"\r\n                name=\"divName\"\r\n                placeholder=\"Nom du Département\"\r\n                disabled={isSubmitting}\r\n                required\r\n              />\r\n              <SygexInput\r\n                type=\"text\"\r\n                id=\"divCode\"\r\n                name=\"divCode\"\r\n                placeholder=\"Code du Département\"\r\n                disabled={isSubmitting}\r\n                required\r\n              />\r\n              <ButtonStyled>\r\n                <StyledButton type=\"submit\">\r\n                  Valid{isSubmitting ? \"ation en cours\" : \"er\"}\r\n                </StyledButton>\r\n              </ButtonStyled>\r\n            </Form>\r\n          </StyledForm>\r\n        </MinimStyledPage>\r\n      )}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default UpdateDivision;\r\n"]},"metadata":{},"sourceType":"module"}