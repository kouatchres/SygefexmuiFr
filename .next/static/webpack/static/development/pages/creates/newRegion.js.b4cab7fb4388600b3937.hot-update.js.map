{"version":3,"file":"static/webpack/static\\development\\pages\\creates\\newRegion.js.b4cab7fb4388600b3937.hot-update.js","sources":["webpack:///./src/components/user/Login.jsx"],"sourcesContent":["import React from \"react\";\r\nimport Error from \"../ErrorMessage.js\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport { TextField, container, paper } from \"formik-material-ui\";\r\nimport { Button, Grid, Box } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Link from \"next/link\";\r\nimport * as Yup from \"yup\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { loginUserMutation } from \"../queries&Mutations&Functions/Mutations\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    // fontSize: 100,\r\n  },\r\n\r\n  allControls: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  pap: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  contain: {\r\n    maxWidth: \"20rem\",\r\n  },\r\n});\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .min(3, \"Email 3 characters au moins\")\r\n    .required(\"Email Obligatoire\")\r\n    .email(\"Email invalide\"),\r\n\r\n  password: Yup.string()\r\n    .required(\"Mot de passe Obligatoire\")\r\n    .min(3, \"Mot de passe 3 characters au moins\"),\r\n});\r\n\r\nconst Login = () => {\r\n  const classes = useStyles();\r\n  const initialValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const [login, { loading, error }] = useMutation(loginUserMutation, {\r\n    refetchQueries: [\"currentUserQuery\"],\r\n  });\r\n\r\n  return (\r\n    <Formik\r\n      method=\"POST\"\r\n      initialValues={initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n        const res = await login({\r\n          variables: { ...values },\r\n        });\r\n        setTimeout(() => {\r\n          console.log(JSON.stringify(values, null, 2));\r\n          console.log(res);\r\n          resetForm(true);\r\n          setSubmitting(false);\r\n        }, 200);\r\n      }}\r\n    >\r\n      {({ submitForm, isSubmitting }) => {\r\n        return (\r\n          <div>\r\n            <h4>Acceder a son compte</h4>\r\n            <Error error={error} />\r\n\r\n            <Form>\r\n              <Grid\r\n                container\r\n                direction=\"column\"\r\n                alignItems=\"center\"\r\n                justifyItems=\"center\"\r\n                margin={0.5}\r\n                Style={{ minHeight: \"100vh\" }}\r\n                spacing={5}\r\n              >\r\n                <Field\r\n                  name=\"email\"\r\n                  component={TextField}\r\n                  type=\"email\"\r\n                  label=\"Email\"\r\n                  disabled={isSubmitting || loading}\r\n                  style={{ marginBottom: \"1rem\" }}\r\n                />\r\n\r\n                <Field\r\n                  name=\"password\"\r\n                  component={TextField}\r\n                  type=\"password\"\r\n                  label=\"Mot de passe\"\r\n                  disabled={isSubmitting || loading}\r\n                  style={{ marginBottom: \"1rem\" }}\r\n                />\r\n\r\n                <ul>\r\n                  <h6>Pas encore de compte?</h6>\r\n                  <Link href=\"/creates/signup\">\r\n                    <a>Cr√©ez votre compte</a>\r\n                  </Link>\r\n                </ul>\r\n                <Box>\r\n                  <Button\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    disabled={isSubmitting}\r\n                    onClick={submitForm}\r\n                    style={{ marginBottom: \"1rem\" }}\r\n                  >\r\n                    Valid{isSubmitting ? \"ation en cours\" : \"er\"}\r\n                  </Button>\r\n                </Box>\r\n              </Grid>\r\n            </Form>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\nexport default Login;\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAhBA;AAqBA;AACA;AAKA;AANA;AACA;AAUA;AACA;AACA;AACA;AACA;AAFA;AACA;AAHA;AAQA;AADA;AAPA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAGA;AACA;AAAA;;;;A","sourceRoot":""}