{"version":3,"file":"static\\development\\pages\\creates\\newAttendance.js","sources":["webpack:///webpack/bootstrap","webpack:///./pages/creates/newAttendance.jsx","webpack:///./src/components/ErrorMessage.js","webpack:///./src/components/attendance/CreateAttendance.jsx","webpack:///./src/components/muiComponents/controls/SygefexMuiInput.jsx","webpack:///./src/components/muiComponents/controls/SygefexMuiSelect.jsx","webpack:///./src/components/queries&Mutations&Functions/Functions.jsx","webpack:///./src/components/queries&Mutations&Functions/Mutations.jsx","webpack:///./src/components/queries&Mutations&Functions/Queries.jsx","webpack:///./src/components/user/GatedSignin.jsx","webpack:///./src/components/user/Login.jsx","webpack:///./src/components/utils/useForm.jsx","webpack:///external \"@apollo/react-hooks\"","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"@material-ui/core\"","webpack:///external \"@material-ui/core/TextField\"","webpack:///external \"@material-ui/core/styles\"","webpack:///external \"apollo-link\"","webpack:///external \"axios\"","webpack:///external \"formik\"","webpack:///external \"formik-material-ui\"","webpack:///external \"graphql-tag\"","webpack:///external \"next/link\"","webpack:///external \"prop-types\"","webpack:///external \"react\"","webpack:///external \"react-apollo\"","webpack:///external \"yup\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 6);\n","import React from \"react\";\r\nimport CreateAttendance from \"../../src/components/attendance/CreateAttendance\";\r\nimport GatedSignin from \"../../src/components/user/GatedSignin\";\r\n\r\nconst newAttendance = () => {\r\n  return (\r\n    <GatedSignin>\r\n      <CreateAttendance />\r\n    </GatedSignin>\r\n  );\r\n};\r\nexport default newAttendance;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles({\r\n  ErrorStyles: {\r\n    padding: \"0.5rem\",\r\n    // background: \"black\",\r\n    margin: \"0.1rem\",\r\n    borderRadius: \"0.5rem\",\r\n    border: \"0.04rem solid rgba(0, 0, 0, 0.05)\",\r\n    borderLeft: \"0.05rem solid red\",\r\n  },\r\n  p: {\r\n    margin: \"0.01rem\",\r\n    fontSize: \".6rem\",\r\n    fontWeight: \"normal\",\r\n  },\r\n  strong: {\r\n    fontSize: \"0.7rem\",\r\n    fontWeight: \"normal\",\r\n    marginSLight: \"0.15rem\",\r\n  },\r\n});\r\n\r\nconst DisplayError = ({ error }) => {\r\n  const classes = useStyles();\r\n  if (!error || !error.message) return null;\r\n  if (\r\n    error.networkError &&\r\n    error.networkError.result &&\r\n    error.networkError.result.errors.length\r\n  ) {\r\n    return error.networkError.result.errors.map((error, i) => (\r\n      <div className={classes.ErrorStyles} key={i}>\r\n        <p className={classes.p}>\r\n          <strong className={classes.strong}>Erreure r√©seaux!</strong>\r\n          {error.message.replace(\"Network error: \", \"\")}\r\n        </p>\r\n      </div>\r\n    ));\r\n  }\r\n  return (\r\n    <div className={classes.ErrorStyles}>\r\n      <p className={classes.p}>\r\n        <strong className={classes.strong}>Erreure !</strong>\r\n        {error.message.replace(\"GraphQL error: \", \"\")}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nDisplayError.defaultProps = {\r\n  error: {},\r\n};\r\n\r\nexport default DisplayError;\r\n\r\n// DisplayError.propTypes = {\r\n//   error: PropTypes.object,\r\n// };\r\n","import React from \"react\";\r\nimport { useMutation, useQuery } from \"@apollo/react-hooks\";\r\nimport Error from \"../ErrorMessage.js\";\r\nimport useForm from \"../utils/useForm\";\r\nimport { TextField } from \"formik-material-ui\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport SygefexMuiSelect from \"../muiComponents/controls/SygefexMuiSelect\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  LinearProgress,\r\n  Paper,\r\n  MenuItem,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport {\r\n  getObjectFromID,\r\n  getSelectedObject,\r\n  removeTypename,\r\n} from \"../queries&Mutations&Functions/Functions\";\r\nimport { createAttendanceMutation } from \"../queries&Mutations&Functions/Mutations\";\r\nimport {\r\n  getExamSessionQuery,\r\n  getAllExamsQuery,\r\n  getAllEducationTypesQuery,\r\n  getAllSessionsQuery,\r\n  getSingleCenterExamSessionQuery,\r\n  getAllSpecialtiesOfACenterExamSessionQuery,\r\n  getAllSubjectSpecialtiesOfASpecialtyQuery,\r\n  getRegisteredCandidatesPerSpecialty,\r\n  getSingleCenterQuery,\r\n} from \"../queries&Mutations&Functions/Queries\";\r\n\r\n// import { FormikRadio } from \"@dccs/react-formik-mui\";\r\n// import { FormLabel, RadioGroup } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  MuiGrid: {\r\n    root: {\r\n      margin: theme.spacing(3),\r\n      paddingLeft: \"1rem\",\r\n      paddingRight: \"1rem\",\r\n    },\r\n  },\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n  },\r\n  typographyStyled: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    alignItems: \"center\",\r\n    justifyItems: \"center\",\r\n  },\r\n\r\n  pageStyled: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    marginTop: \"2rem\",\r\n    padding: \"1rem\",\r\n    width: \"100%\",\r\n    // border: \"0.2rem solid #222aa5\",\r\n  },\r\n\r\n  itemsStyled: {\r\n    marginTop: \"2rem\",\r\n    padding: \"1rem\",\r\n    minWidth: \"100%\",\r\n    border: \"0.2rem solid #212af5\",\r\n  },\r\n\r\n  formGroupStyled: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyItems: \"center\",\r\n  },\r\n  \r\n\r\n  allControls: {\r\n    paddingTop: \"0.1rem\",\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    border: \"0.1rem solid #cbdf24\",\r\n  },\r\n\r\n  controlItem: {\r\n    minWidth: \"80%\",\r\n  },\r\n\r\n  headerControls: {\r\n    // width: \"100%\",\r\n    // paddingTop: \"0.1rem\",\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    // border: \"0.5rem solid #0020e0\",\r\n  },\r\n\r\n  MuiInput: {\r\n    paddingBottom: \"1rem\",\r\n    minWidth: \"90%\",\r\n  },\r\n}));\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  // collected: Yup.string().required(\r\n  //   \"Indiquer si Le(a) candidat(e) a pris le materiel de composition, est Obligatoire\"\r\n  // ),\r\n  // handin: Yup.string().required(\r\n  //   \"Indiquer si Le(a) candidat(e) a remis sa feuille de composition, est Obligatoire\"\r\n  // ),\r\n});\r\nconst CreateAttendance = () => {\r\n  const classes = useStyles();\r\n  const [state, setState, handleReactSelectChange, handleInputChange] = useForm(\r\n    {\r\n      centerExamSessionSpecialtyID: \"\",\r\n      centerNumber: null,\r\n      examID: \"\",\r\n      sessionID: \"\",\r\n      educTypeID: \"\",\r\n      specialtyID: \"\",\r\n      subjectSpecialty: \"\",\r\n    }\r\n  );\r\n\r\n  const initialValues = {\r\n    centerNumber: null,\r\n    collected: \"\",\r\n    handin: \"\",\r\n    subjectSpecialty: \"\",\r\n    candExamSecretCode: \"\",\r\n  };\r\n  const handleChange = (e) => {\r\n    const { name, value, type } = e.target;\r\n    const val = type === \"number\" ? parseInt(value) : value;\r\n    setState({ [name]: val });\r\n  };\r\n\r\n  const {\r\n    data: dataEducType,\r\n    loading: loadingEducType,\r\n    error: errEducType,\r\n  } = useQuery(getAllEducationTypesQuery);\r\n\r\n  const getEducationTypes = dataEducType && dataEducType.educationTypes;\r\n  const refinedEducTypes =\r\n    getEducationTypes && removeTypename(getEducationTypes);\r\n\r\n  const { data: dataExams, loading: loadingExams, error: errExams } = useQuery(\r\n    getAllExamsQuery\r\n  );\r\n\r\n  const getExams = dataExams && dataExams.exams;\r\n  const removeExamName =\r\n    getExams && getExams.map(({ examName, ...others }) => others);\r\n  const refinedExams = getExams && removeTypename(removeExamName);\r\n\r\n  const getExamName = refinedExams && {\r\n    ...getSelectedObject(refinedExams, state.examID),\r\n  };\r\n\r\n  console.dir({ getExamName });\r\n  console.dir({ refinedExams });\r\n  const {\r\n    data: dataSession,\r\n    loading: loadingSession,\r\n    error: errSession,\r\n  } = useQuery(getAllSessionsQuery);\r\n\r\n  const getSessions = dataSession && dataSession.sessions;\r\n\r\n  const refinedSessions = getSessions && removeTypename(getSessions);\r\n\r\n  const getSessionName = refinedSessions && {\r\n    ...getSelectedObject(refinedSessions, state.sessionID),\r\n  };\r\n\r\n  const {\r\n    data: dataExamSessions,\r\n    error: errExamSessions,\r\n    loading: loadingExamSession,\r\n  } = useQuery(getExamSessionQuery, {\r\n    skip: !state.examID || !state.sessionID,\r\n    variables: {\r\n      exam: getExamName,\r\n      session: getSessionName,\r\n    },\r\n  });\r\n\r\n  const getExamSessions = dataExamSessions && dataExamSessions.examSessions;\r\n  const refinedES = getExamSessions && removeTypename(getExamSessions);\r\n  const reducedES = refinedES && refinedES[0];\r\n\r\n  const {\r\n    data: dataCenter,\r\n    error: errCenter,\r\n    loading: loadingCenter,\r\n  } = useQuery(getSingleCenterQuery, {\r\n    variables: { centerNumber: state.centerNumber },\r\n  });\r\n\r\n  const { centerByNumber } = { ...dataCenter };\r\n  const newCenterByNumber = removeTypename(centerByNumber);\r\n\r\n  const { data: dataCES, error: errCES, loading: loadingCES } = useQuery(\r\n    getSingleCenterExamSessionQuery,\r\n    {\r\n      skip: !reducedES || !newCenterByNumber,\r\n      variables: {\r\n        examSession: reducedES && reducedES,\r\n        center: newCenterByNumber && newCenterByNumber,\r\n      },\r\n    }\r\n  );\r\n  console.dir({ state });\r\n  const getCenterExamSessionsByCode =\r\n    dataCES && dataCES.centerExamSessionsByCode;\r\n  const refinedCenterExamSessions =\r\n    getCenterExamSessionsByCode && removeTypename(getCenterExamSessionsByCode);\r\n  // transform the array into a single object\r\n  const getCESID = refinedCenterExamSessions && refinedCenterExamSessions[0];\r\n\r\n  console.dir({ getCESID });\r\n  const {\r\n    data: dataSpecialtyCES,\r\n    loading: loadingSpecialtyCES,\r\n    error: errSpecialtyCES,\r\n  } = useQuery(getAllSpecialtiesOfACenterExamSessionQuery, {\r\n    variables: getCESID,\r\n  });\r\n  console.dir({ dataSpecialtyCES });\r\n  const getCenterExamSession =\r\n    dataSpecialtyCES && dataSpecialtyCES.centerExamSession;\r\n  const { centerExamSessionSpecialty } = { ...getCenterExamSession };\r\n\r\n  const newSpecialty =\r\n    centerExamSessionSpecialty &&\r\n    centerExamSessionSpecialty.map((item) => item);\r\n  const refinedCESS = newSpecialty && removeTypename(newSpecialty);\r\n\r\n  const getCESSSubjIDs =\r\n    state.centerExamSessionSpecialtyID &&\r\n    state.centerExamSessionSpecialtyID.split(\"/\");\r\n  console.dir({ getCESSSubjIDs });\r\n  const {\r\n    data: dataRegistration,\r\n    loading: loadingReg,\r\n    error: errReg,\r\n  } = useQuery(getRegisteredCandidatesPerSpecialty, {\r\n    skip: getCESSSubjIDs && !getCESSSubjIDs[0],\r\n    variables: { id: getCESSSubjIDs && getCESSSubjIDs[0] },\r\n  });\r\n\r\n  const { centerExamSessionSpecialty: CESS } = { ...dataRegistration };\r\n  const { registration } = { ...CESS };\r\n  const getCandOptions =\r\n    registration &&\r\n    registration.map((item) => {\r\n      <MenuItem key={item.candExamSecretCode}>\r\n        {item.item.candidate.cand1stName.concat(\r\n          item.candidate.cand2ndName,\r\n          item.candRegistrationNumber\r\n        )}\r\n      </MenuItem>;\r\n    });\r\n\r\n  const {\r\n    data: dataSubjSpecialty,\r\n    loading: loadingSubjSpecialty,\r\n    error: errSubjSpecialty,\r\n  } = useQuery(getAllSubjectSpecialtiesOfASpecialtyQuery, {\r\n    skip: getCESSSubjIDs && !getCESSSubjIDs[1],\r\n    variables: { id: getCESSSubjIDs && getCESSSubjIDs[1] },\r\n  });\r\n\r\n  const getSubjSpecialty = dataSubjSpecialty && dataSubjSpecialty.specialty;\r\n  const { subjectSpecialty } = { ...getSubjSpecialty };\r\n\r\n  const refinedSubjectSpecialty =\r\n    subjectSpecialty && removeTypename(subjectSpecialty);\r\n  const getSubjectSpecialtyOptions =\r\n    refinedSubjectSpecialty &&\r\n    refinedSubjectSpecialty.map((item) => {\r\n      <MenuItem key={item.id}>{item.item.subject.subjectName}</MenuItem>;\r\n    });\r\n\r\n  const [createAttendance, { loading, error }] = useMutation(\r\n    createAttendanceMutation\r\n  );\r\n  return (\r\n    <Formik\r\n      method=\"POST\"\r\n      initialValues={initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n        const res = await createAttendance({\r\n          variables: {\r\n            ...values,\r\n            candExamSecretCode: values.candExamSecretCode.value,\r\n            centerExamSessionSpecialty:\r\n              getCESSSubjIDs && getObjectFromID(getCESSSubjIDs[0]),\r\n            subjectSpecialty:\r\n              refinedSubjectSpecialty &&\r\n              getObjectFromID(values.subjectSpecialty.value),\r\n          },\r\n        });\r\n\r\n        setTimeout(() => {\r\n          resetForm(true);\r\n          setSubmitting(false);\r\n        }, 400);\r\n      }}\r\n    >\r\n      {({ submitForm, setFieldValue, isSubmitting }) => {\r\n        return (\r\n          <Paper className={classes.pageStyled}>\r\n            <Form>\r\n              {(isSubmitting || loading) && <LinearProgress />}\r\n              <Grid container>\r\n                <Grid container>\r\n                  <Grid item xs={12}>\r\n                    <Error\r\n                      error={\r\n                        error ||\r\n                        errCenter ||\r\n                        errExams ||\r\n                        errSession ||\r\n                        errExamSessions ||\r\n                        errSpecialtyCES ||\r\n                        errEducType ||\r\n                        errSubjSpecialty ||\r\n                        errReg\r\n                      }\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid container>\r\n                  <Grid item xs={12} className={classes.MuiGrid}>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      className={classes.typographyStyled}\r\n                    >\r\n                      Pr√©sence des candidats √† l'Ecrit\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid container>\r\n                  <Grid item direction=\"column\" xs={12} sm={6}>\r\n                    <Field\r\n                      component={TextField}\r\n                      value={\r\n                        (centerByNumber && centerByNumber.centerCode) || \"\"\r\n                      }\r\n                      name=\"centerName\"\r\n                      type=\"text\"\r\n                      label=\" Nom du centre\"\r\n                    />\r\n                    <Field\r\n                      component={TextField}\r\n                      onChange={handleChange}\r\n                      name=\"centerNumber\"\r\n                      value={state.centerNumber && state.centerNumber}\r\n                      type=\"number\"\r\n                      label=\"Num√©ro du centre\"\r\n                      disabled={isSubmitting}\r\n                    />\r\n                    <Field\r\n                      select\r\n                      component={TextField}\r\n                      helperText=\"Type d'Enseignement\"\r\n                      onChange={handleInputChange}\r\n                      name=\"educTypeID\"\r\n                      disabled={isSubmitting}\r\n                    >\r\n                      <MenuItem>Type d'enseignement</MenuItem>\r\n                      {refinedEducTypes &&\r\n                        refinedEducTypes.map((item) => (\r\n                          <MenuItem key={item.id} value={item.id}>\r\n                            {item.educationTypeName}\r\n                          </MenuItem>\r\n                        ))}\r\n                    </Field>\r\n                    <Field\r\n                      component={TextField}\r\n                      select\r\n                      onChange={handleInputChange}\r\n                      name=\"sessionID\"\r\n                      disabled={isSubmitting}\r\n                      helperText=\"Session\"\r\n                    >\r\n                      {refinedSessions &&\r\n                        refinedSessions.map((item) => (\r\n                          <MenuItem key={item.id} value={item.id}>\r\n                            {item.sessionName}\r\n                          </MenuItem>\r\n                        ))}\r\n                    </Field>\r\n                    <SygefexMuiSelect\r\n                      name=\"position\"\r\n                      label=\"position\"\r\n                      variant=\"standard\"\r\n                      options={\r\n                        refinedEducTypes &&\r\n                        refinedEducTypes.map((item) => (\r\n                          <MenuItem key={item.id} value={item}>\r\n                            {item.educationTypeName}\r\n                          </MenuItem>\r\n                        ))\r\n                      }\r\n                    />\r\n                    <SygefexMuiSelect\r\n                      name=\"opposition\"\r\n                      label=\"opposition\"\r\n                      variant=\"standard\"\r\n                      options={\r\n                        getExams &&\r\n                        getExams.map((item) => (\r\n                          <MenuItem key={item.id} value={item}>\r\n                            {item.examName}\r\n                          </MenuItem>\r\n                        ))\r\n                      }\r\n                    />\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6} className={classes.MuiGrid}>\r\n                    <Field\r\n                      helperText=\"Examen\"\r\n                      component={TextField}\r\n                      select\r\n                      onChange={handleInputChange}\r\n                      name=\"examID\"\r\n                      disabled={isSubmitting}\r\n                    >\r\n                      {getExams &&\r\n                        getExams.map((item) => (\r\n                          <MenuItem key={item.id} value={item.id}>\r\n                            {item.examName}\r\n                          </MenuItem>\r\n                        ))}\r\n                    </Field>\r\n\r\n                    <Field\r\n                      select\r\n                      component={TextField}\r\n                      helperText=\"Specialty\"\r\n                      onChange={handleInputChange}\r\n                      name=\"centerExamSessionSpecialtyID\"\r\n                      disabled={isSubmitting}\r\n                    >\r\n                      {refinedEducTypes &&\r\n                        refinedEducTypes.map((item) => (\r\n                          <MenuItem key={item.id} value={item.id}>\r\n                            {item.educationTypeName}\r\n                          </MenuItem>\r\n                        ))}\r\n                    </Field>\r\n\r\n                    <Field\r\n                      component={TextField}\r\n                      select\r\n                      helperText=\"Matiere\"\r\n                      onChange={(value) =>\r\n                        setFieldValue(\"subjectSpecialty\", value)\r\n                      }\r\n                      name=\"subjectSpecialty\"\r\n                      disabled={isSubmitting}\r\n                    >\r\n                      {refinedEducTypes &&\r\n                        refinedEducTypes.map((item) => (\r\n                          <MenuItem key={item.id} value={item.id}>\r\n                            {item.educationTypeName}\r\n                          </MenuItem>\r\n                        ))}\r\n                    </Field>\r\n\r\n                    <Field\r\n                      component={TextField}\r\n                      select\r\n                      helperText=\"Code Candidat\"\r\n                      onChange={(value) =>\r\n                        setFieldValue(\"candExamSecretCode\", value)\r\n                      }\r\n                      name=\"candExamSecretCode\"\r\n                      disabled={isSubmitting}\r\n                    >\r\n                      {refinedEducTypes &&\r\n                        refinedEducTypes.map((item) => (\r\n                          <MenuItem key={item.id} value={item.id}>\r\n                            {item.educationTypeName}\r\n                          </MenuItem>\r\n                        ))}\r\n                    </Field>\r\n\r\n                    <Button onChange={submitForm} disabled={isSubmitting}>\r\n                      Valid{isSubmitting ? \"ation en cours\" : \"er\"}\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Form>\r\n          </Paper>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\nexport default CreateAttendance;\r\n","import React from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Field } from \"formik\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst SygefexMuiInput = (props) => {\r\n  const classes = useStyles();\r\n  const {\r\n    name,\r\n    label,\r\n    type = \"text\",\r\n    variant = \"outlined\",\r\n    helperText,\r\n  } = props;\r\n\r\n  return (\r\n    <Field\r\n      as={TextField}\r\n      name={name}\r\n      label={label}\r\n      fullWidth\r\n      variant={variant}\r\n      type={type}\r\n      helperText={helperText}\r\n      className={classes.root}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SygefexMuiInput;\r\n","import React from \"react\";\r\nimport { TextField } from \"formik-material-ui\";\r\nimport { Field } from \"formik\";\r\nimport { MenuItem } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: theme.spacing(1),\r\n  },\r\n}));\r\nconst SygefexMuiSelect = (props) => {\r\n  const classes = useStyles();\r\n  const { name, label, options, variant = \"outlined\", helperText } = props;\r\n\r\n  return (\r\n    <Field\r\n      variant={variant}\r\n      component={TextField}\r\n      fullWidth\r\n      name={name}\r\n      label={label}\r\n      select\r\n      className={classes.root}\r\n      helperText={helperText}\r\n    >\r\n      {options &&\r\n        options.map((item) => (\r\n          <MenuItem value={item.value} key={item.value}>\r\n            {item.label}\r\n          </MenuItem>\r\n        ))}\r\n    </Field>\r\n  );\r\n};\r\n\r\nexport default SygefexMuiSelect;\r\n","import React from 'react'\r\nimport { concat } from 'apollo-link'\r\n\r\n\r\nconst uniqueCodeGen = keyLength => {\r\n  var i,\r\n    key = '',\r\n    //  characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\r\n    characters =\r\n      'abcdefghijklmnopqrstuvwxyzABCDEF@#$%&GHIJKLMNOPQRSTUVWXYZ0123456789'\r\n\r\n  var charactersLength = characters.length\r\n\r\n  for (i = 0; i < keyLength; i++) {\r\n    key += characters.substr(\r\n      Math.floor(Math.random() * charactersLength + 1),\r\n      1,\r\n    )\r\n  }\r\n\r\n  return key\r\n}\r\n\r\nconst objectFromCode = codeValue => {\r\n  const storedObject = {\r\n    candCode: `${codeValue}`,\r\n  }\r\n  return storedObject\r\n}\r\n\r\nconst getObjectFromID = suppliedID => {\r\n  const theObject = {\r\n    id: `${suppliedID}`,\r\n  }\r\n  return theObject\r\n}\r\n\r\nconst centerExamSessionObjectFromCode = codeValue => {\r\n  const storedObject = {\r\n    centerExamSession: `${codeValue}`,\r\n  }\r\n  return storedObject\r\n}\r\n\r\nconst candExamSessionCode = (candID, examID, sessionID) => {\r\n  return `${candID + examID + sessionID}`\r\n}\r\n\r\nconst getSelectedObject = (dataSource, objectID) => {\r\n  // 1 copy the data source\r\n  if (dataSource.length > 0) {\r\n    const tempObjects = [...dataSource]\r\n    // get the object\r\n    const selectedObject = tempObjects.find(item => item.id === objectID)\r\n    return selectedObject\r\n  }\r\n}\r\n// function to model a number with leading zeroes\r\nNumber.prototype.pad = function (size) {\r\n  var s = String(this)\r\n  while (s.length < (size || 2)) {\r\n    s = '0' + s\r\n  }\r\n  return s\r\n}\r\n\r\nconst calcCandAve = candScores => {\r\n  const aveTotal =\r\n    candScores &&\r\n    candScores.reduce((tally, item) => tally + item.subjectAve * item.coeff, 0)\r\n  const coeffTotal = candScores.reduce(\r\n    (tally, item) => (item.subjectAve === null ? tally : tally + item.coeff),\r\n    0,\r\n  )\r\n  const candAve = aveTotal / coeffTotal\r\n  return candAve\r\n}\r\nconst calcCandTotalScore = candScores => {\r\n  const aveTotal =\r\n    candScores &&\r\n    candScores.reduce((tally, item) => tally + item.subjectAve * item.coeff, 0)\r\n  return aveTotal\r\n}\r\nconst calcCandTotalCoeff = candScores => {\r\n  const coeffTotal =\r\n    candScores &&\r\n    candScores.reduce(\r\n      (tally, item) => (item.subjectAve === null ? tally : tally + item.coeff),\r\n      0,\r\n    )\r\n  return coeffTotal\r\n}\r\nconst roundFloatNumber = (value, decimals) => {\r\n  return Number(Math.round(value + 'e' + decimals) + 'e-' + decimals)\r\n}\r\nconst removeTypename = (value) => {\r\n  if (value === null || value === undefined) {\r\n    return value;\r\n  } else if (Array.isArray(value)) {\r\n    return value.map(v => removeTypename(v));\r\n  } else if (typeof value === 'object') {\r\n    const newObj = {};\r\n    Object.entries(value).forEach(([key, v]) => {\r\n      if (key !== '__typename') {\r\n        newObj[key] = removeTypename(v);\r\n      }\r\n    });\r\n    return newObj;\r\n  }\r\n  return value;\r\n};\r\n\r\nconst uploadFile = async (e) => {\r\n  const files = e.target.files;\r\n  const data = new FormData();\r\n  data.append('file', files[0]);\r\n  data.append('upload_preset', 'ineximages');\r\n  const res = await fetch('https://api.cloudinary.com/v1_1/inex/image/upload', {\r\n    method: 'POST',\r\n    body: data\r\n  });\r\n  const file = await res.json();\r\n  console.log(file);\r\n  // this.setState({ image: file.secure_url });\r\n  setState({ image: file.secure_url })\r\n}\r\n\r\n// const updateCacheForDelete = (cache, { data }, queryToUpdate) => {\r\n//   // manually update the cache so that the data are all the same\r\n//   // 1. read the cache for the data we want\r\n//   const { regions, deleteRegion } = data\r\n//   const data = cache.readQuery({ query: queryToUpdate });\r\n//   // selects all the other regions leaving out the deleted one\r\n//   regions = regions.filter(region => region.id !== deleteRegion.id);\r\n//   //  3. write the new data back to the cache\r\n//   console.log(\"getting payload\");\r\n//   console.log(payload);\r\n//   cache.writeQuery({ query: queryToUpdate, data });\r\n// };\r\n\r\nconst updateCache = (cache, payload) => {\r\n  // manually update the cache so that the data are all the same\r\n  // 1. read the cache for the data we want\r\n  const data = cache.readQuery({ query: getAllRegionsQuery });\r\n  // the deletedselect all the other regions except the deleted one from the cache\r\n  data.regions = data.regions.filter(region => region.id !== payload.data.deleteRegion.id);\r\n  //  3. write the new data back to the cache\r\n  console.log(\"getting payload\");\r\n  console.log(payload);\r\n  cache.writeQuery({ query: getAllRegionsQuery, data });\r\n};\r\nexport {\r\n  candExamSessionCode,\r\n  roundFloatNumber,\r\n  calcCandTotalScore,\r\n  calcCandTotalCoeff,\r\n  calcCandAve,\r\n  objectFromCode,\r\n  uniqueCodeGen,\r\n  getSelectedObject,\r\n  getObjectFromID,\r\n  removeTypename,\r\n  uploadFile,\r\n  centerExamSessionObjectFromCode,\r\n}\r\n","import gql from \"graphql-tag\";\r\nimport axios from \"axios\";\r\n\r\n//************create mutations  */\r\nconst signInCandidate = gql`\r\n  mutation signInCandidate($candCode: String!) {\r\n    candidateSignIn(candCode: $candCode) {\r\n      id\r\n      cand1stName\r\n    }\r\n  }\r\n`;\r\n//\r\nconst signoutMutation = gql`\r\n  mutation signoutMutation {\r\n    signout {\r\n      message\r\n    }\r\n  }\r\n`;\r\n\r\nconst deleteReportMutation = gql`\r\n  mutation deleteReportMutation($id: ID!) {\r\n    deleteReport(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateSessionMutation = gql`\r\n  mutation updateSessionMutation(\r\n    $id: ID!\r\n    $sessionName: String\r\n    $sessionCode: String\r\n  ) {\r\n    updateSession(\r\n      id: $id\r\n      sessionName: $sessionName\r\n      sessionCode: $sessionCode\r\n    ) {\r\n      sessionName\r\n      sessionCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateEducationTypeMutation = gql`\r\n  mutation updateEducationTypeMutation(\r\n    $id: ID!\r\n    $educationTypeName: String\r\n    $educationTypeCode: String\r\n  ) {\r\n    updateEducationType(\r\n      id: $id\r\n      educationTypeName: $educationTypeName\r\n      educationTypeCode: $educationTypeCode\r\n    ) {\r\n      id\r\n      educationTypeName\r\n      educationTypeCode\r\n    }\r\n  }\r\n`;\r\nconst updateSubjectMutation = gql`\r\n  mutation updateSubjectMutation(\r\n    $id: ID!\r\n    $subjectName: String\r\n    $subjectCode: String\r\n  ) {\r\n    updateSubject(\r\n      id: $id\r\n      subjectName: $subjectName\r\n      subjectCode: $subjectCode\r\n    ) {\r\n      subjectName\r\n      subjectCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateRankMutation = gql`\r\n  mutation updateRankMutation($id: ID!, $rankName: String, $rankCode: String) {\r\n    updateRank(id: $id, rankName: $rankName, rankCode: $rankCode) {\r\n      id\r\n      rankName\r\n      rankCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateSpecialtyMutation = gql`\r\n  mutation updateSpecialtyMutation(\r\n    $id: ID!\r\n    $specialtyName: String\r\n    $specialtyCode: String\r\n  ) {\r\n    updateSpecialty(\r\n      id: $id\r\n      specialtyName: $specialtyName\r\n      specialtyCode: $specialtyCode\r\n    ) {\r\n      specialtyName\r\n      specialtyCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateDivisionMutation = gql`\r\n  mutation updateDivisionMutation(\r\n    $id: ID!\r\n    $divName: String\r\n    $divCode: String\r\n  ) {\r\n    updateDivision(id: $id, divName: $divName, divCode: $divCode) {\r\n      id\r\n      divName\r\n      divCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateRegionMutation = gql`\r\n  mutation updateRegionMutation($id: ID!, $regName: String, $regCode: String) {\r\n    updateRegion(id: $id, regName: $regName, regCode: $regCode) {\r\n      id\r\n      regName\r\n      regCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst createNewReportMutation = gql`\r\n  mutation createNewReportMutation(\r\n    $reportImage: String!\r\n    $reportName: String!\r\n    $centerExamSessionExaminer: CenterExamSessionExaminerWhereUniqueInput!\r\n  ) {\r\n    createReport(\r\n      reportImage: $reportImage\r\n      reportName: $reportName\r\n      centerExamSessionExaminer: $centerExamSessionExaminer\r\n    ) {\r\n      id\r\n      reportName\r\n      reportImage\r\n    }\r\n  }\r\n`;\r\n\r\nconst createRegistrationMutation = gql`\r\n  mutation createRegistrationMutation(\r\n    $candidate: CandidateWhereUniqueInput!\r\n    $candExamSession: String!\r\n    $candRegistrationNumber: String!\r\n    $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n    $centerExamSessionSpecialty: CenterExamSessionSpecialtyWhereUniqueInput!\r\n    $specialty: SpecialtyWhereUniqueInput!\r\n    $aptitude: String!\r\n    $EPF1: String!\r\n    $EPF2: String!\r\n  ) {\r\n    createRegistration(\r\n      candidate: $candidate\r\n      candExamSession: $candExamSession\r\n      candRegistrationNumber: $candRegistrationNumber\r\n      centerExamSession: $centerExamSession\r\n      centerExamSessionSpecialty: $centerExamSessionSpecialty\r\n      specialty: $specialty\r\n      EPF1: $EPF1\r\n      EPF2: $EPF2\r\n      aptitude: $aptitude\r\n    ) {\r\n      id\r\n      centerExamSession {\r\n        id\r\n        center {\r\n          id\r\n          centerName\r\n        }\r\n      }\r\n      candidate {\r\n        id\r\n        cand1stName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst createCenterExamSessionMutation = gql`\r\n  mutation createCenterExamSessionMutation(\r\n    $examSession: ExamSessionWhereUniqueInput!\r\n    $center: CenterWhereUniqueInput!\r\n    $CESCode: String!\r\n  ) {\r\n    createCenterExamSession(\r\n      examSession: $examSession\r\n      center: $center\r\n      CESCode: $CESCode\r\n    ) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst createPhaseRankMutation = gql`\r\n  mutation createPhaseRankMutation(\r\n    $phase: PhaseWhereUniqueInput!\r\n    $rank: RankWhereUniqueInput!\r\n  ) {\r\n    createPhaseRank(phase: $phase, rank: $rank) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst createCenterExamSessionExaminerMutation = gql`\r\n  mutation createCenterExamSessionExaminerMutation(\r\n    $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n    $examiner: ExaminerWhereUniqueInput!\r\n    $phaseRank: PhaseRankWhereUniqueInput!\r\n  ) {\r\n    createCenterExamSessionExaminer(\r\n      phaseRank: $phaseRank\r\n      centerExamSession: $centerExamSession\r\n      examiner: $examiner\r\n    ) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst createCenterExamSessionSpecialtyMutation = gql`\r\n  mutation createCenterExamSessionSpecialtyMutation(\r\n    $specialty: SpecialtyWhereUniqueInput!\r\n    $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n  ) {\r\n    createCenterExamSessionSpecialty(\r\n      specialty: $specialty\r\n      centerExamSession: $centerExamSession\r\n    ) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst createDivisionMutation = gql`\r\n  mutation createDivisionMutation(\r\n    $divName: String!\r\n    $divCode: String!\r\n    $region: RegionWhereUniqueInput!\r\n  ) {\r\n    createDivision(divName: $divName, divCode: $divCode, region: $region) {\r\n      id\r\n      divName\r\n    }\r\n  }\r\n`;\r\n\r\nconst createCenterMutation = gql`\r\n  mutation createCenterMutation(\r\n    $centerName: String!\r\n    $centerNumber: Int\r\n    $centerCode: String!\r\n    $centerSecretCode: String!\r\n    $town: TownWhereUniqueInput!\r\n  ) {\r\n    createCenter(\r\n      centerSecretCode: $centerSecretCode\r\n      centerName: $centerName\r\n      centerNumber: $centerNumber\r\n      centerCode: $centerCode\r\n      town: $town\r\n    ) {\r\n      id\r\n      centerName\r\n      centerSecretCode\r\n      centerCode\r\n      town {\r\n        townName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst createSpecialtyMutation = gql`\r\n  mutation createSpecialtyMutation(\r\n    $specialtyName: String!\r\n    $specialtyCode: String!\r\n    $educationType: EducationTypeWhereUniqueInput!\r\n  ) {\r\n    createSpecialty(\r\n      specialtyName: $specialtyName\r\n      specialtyCode: $specialtyCode\r\n      educationType: $educationType\r\n    ) {\r\n      id\r\n      specialtyName\r\n    }\r\n  }\r\n`;\r\nconst createEducationTypeMutation = gql`\r\n  mutation createEducationTypeMutation(\r\n    $educationTypeName: String!\r\n    $educationTypeCode: String!\r\n  ) {\r\n    createEducationType(\r\n      educationTypeName: $educationTypeName\r\n      educationTypeCode: $educationTypeCode\r\n    ) {\r\n      id\r\n      educationTypeName\r\n    }\r\n  }\r\n`;\r\n\r\nconst createTownMutation = gql`\r\n  mutation createTownMutation(\r\n    $townName: String!\r\n    $townCode: String!\r\n    $subDiv: SubDivisionWhereUniqueInput!\r\n  ) {\r\n    createTown(townName: $townName, townCode: $townCode, subDiv: $subDiv) {\r\n      id\r\n      townName\r\n      townCode\r\n      subDiv {\r\n        subDivName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst createNewSubjectMutation = gql`\r\n  mutation createNewSubjectMutation(\r\n    $subjectName: String!\r\n    $subjectCode: String!\r\n    $subjectType: String!\r\n    $subjectGroup: String!\r\n    $educType: EducationTypeWhereUniqueInput!\r\n  ) {\r\n    createSubject(\r\n      subjectName: $subjectName\r\n      educType: $educType\r\n      subjectCode: $subjectCode\r\n      subjectType: $subjectType\r\n      subjectGroup: $subjectGroup\r\n    ) {\r\n      subjectCode\r\n      subjectName\r\n      subjectType\r\n      subjectGroup\r\n    }\r\n  }\r\n`;\r\n\r\nconst createSubDivisionMutation = gql`\r\n  mutation createSubDivisionMutation(\r\n    $subDivName: String!\r\n    $subDivCode: String!\r\n    $division: DivisionWhereUniqueInput!\r\n  ) {\r\n    createSubDivision(\r\n      subDivName: $subDivName\r\n      subDivCode: $subDivCode\r\n      division: $division\r\n    ) {\r\n      id\r\n      subDivName\r\n      subDivCode\r\n      division {\r\n        divName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst createNewSessionMutation = gql`\r\n  mutation createNewSessionMutation(\r\n    $sessionName: String!\r\n    $sessionCode: String!\r\n  ) {\r\n    createSession(sessionName: $sessionName, sessionCode: $sessionCode) {\r\n      id\r\n      sessionName\r\n    }\r\n  }\r\n`;\r\n\r\nconst createNewRankMutation = gql`\r\n  mutation createNewRankMutation($rankName: String!, $rankCode: String!) {\r\n    createRank(rankName: $rankName, rankCode: $rankCode) {\r\n      id\r\n      rankName\r\n    }\r\n  }\r\n`;\r\n\r\nconst createNewRegionMutation = gql`\r\n  mutation createNewRegionMutation($regName: String!, $regCode: String!) {\r\n    createRegion(regName: $regName, regCode: $regCode) {\r\n      id\r\n      regName\r\n    }\r\n  }\r\n`;\r\n\r\nconst signupUserMutation = gql`\r\n  mutation signupUserMutation(\r\n    $name: String!\r\n    $email: String!\r\n    $password: String!\r\n  ) {\r\n    signup(password: $password, name: $name, email: $email) {\r\n      id\r\n      name\r\n      email\r\n    }\r\n  }\r\n`;\r\n\r\nconst loginUserMutation = gql`\r\n  mutation loginUserMutation($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      id\r\n      name\r\n      email\r\n      password\r\n      permissions\r\n    }\r\n  }\r\n`;\r\n\r\nconst requestResetMutation = gql`\r\n  mutation requestResetMutation($email: String!) {\r\n    requestReset(email: $email) {\r\n      message\r\n    }\r\n  }\r\n`;\r\n\r\nconst createNewCountryMutation = gql`\r\n  mutation createNewCountryMutation(\r\n    $countryName: String!\r\n    $countryCode: String!\r\n  ) {\r\n    createCountry(countryName: $countryName, countryCode: $countryCode) {\r\n      id\r\n      countryName\r\n      countryCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst createPhaseMutation = gql`\r\n  mutation createPhaseMutation($phaseName: String!, $phaseCode: String!) {\r\n    createPhase(phaseName: $phaseName, phaseCode: $phaseCode) {\r\n      id\r\n      phaseName\r\n    }\r\n  }\r\n`;\r\n\r\nconst createAttendanceMutation = gql`\r\n  mutation createAttendanceMutation(\r\n    $subjectSpecialty: SubjectSpecialtyWhereUniqueInput!\r\n    $centerExamSessionSpecialty: CenterExamSessionSpecialtyWhereUniqueInput!\r\n    $collected: String!\r\n    $candExamSecretCode: String!\r\n    $handin: String!\r\n  ) {\r\n    createAttendance(\r\n      subjectSpecialty: $subjectSpecialty\r\n      centerExamSessionSpecialty: $centerExamSessionSpecialty\r\n      collected: $collected\r\n      candExamSecretCode: $candExamSecretCode\r\n      handin: $handin\r\n    ) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst createExamMutation = gql`\r\n  mutation createExamMutation($examName: String!, $examCode: String!) {\r\n    createExam(examName: $examName, examCode: $examCode) {\r\n      id\r\n      examName\r\n    }\r\n  }\r\n`;\r\n\r\nconst registerSubjectSpecialtyMutation = gql`\r\n  mutation registerSubjectSpecialtyMutation(\r\n    $subject: SubjectWhereUniqueInput!\r\n    $specialty: SpecialtyWhereUniqueInput!\r\n    $coeff: Int!\r\n  ) {\r\n    createSubjectSpecialty(\r\n      subject: $subject\r\n      specialty: $specialty\r\n      coeff: $coeff\r\n    ) {\r\n      id\r\n      specialty {\r\n        id\r\n        specialtyName\r\n        subjectSpecialty {\r\n          id\r\n          subject {\r\n            id\r\n            subjectName\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst registerNewSubjectSpecialtyMutation = gql`\r\n  mutation registerNewSubjectSpecialtyMutation(\r\n    $specialty: SpecialtyWhereUniqueInput!\r\n    $subject: SubjectWhereUniqueInput!\r\n    $coeff: Int!\r\n  ) {\r\n    createSubjectSpecialty(\r\n      specialty: $specialty\r\n      subject: $subject\r\n      coeff: $coeff\r\n    ) {\r\n      id\r\n      specialty {\r\n        id\r\n        specialtyName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst createCandidateMutation = gql`\r\n  mutation createCandidateMutation(\r\n    $cand1stName: String!\r\n    $cand2ndName: String\r\n    $cand3rdName: String\r\n    $dadName: String\r\n    $momName: String\r\n    $email: String!\r\n    $image: String!\r\n    $phoneNumb: Int\r\n    $dateOfBirth: DateTime\r\n    $birthCertNumber: String\r\n    $placeOfBirth: String\r\n    $gender: String!\r\n  ) {\r\n    createCandidate(\r\n      cand1stName: $cand1stName\r\n      cand2ndName: $cand2ndName\r\n      dadName: $dadName\r\n      momName: $momName\r\n      cand3rdName: $cand3rdName\r\n      email: $email\r\n      image: $image\r\n      phoneNumb: $phoneNumb\r\n      dateOfBirth: $dateOfBirth\r\n      birthCertNumber: $birthCertNumber\r\n      placeOfBirth: $placeOfBirth\r\n      gender: $gender\r\n    ) {\r\n      id\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      momName\r\n      dadName\r\n      candCode\r\n      birthCertNumber\r\n      dateOfBirth\r\n      image\r\n    }\r\n  }\r\n`;\r\n\r\nconst createMultipleCandidatesMutation = gql`\r\n  mutation createMultipleCandidatesMutation(\r\n    $cand1stName: String!\r\n    $cand2ndName: String\r\n    $cand3rdName: String\r\n    $dadName: String\r\n    $momName: String\r\n    $candCode: String\r\n    $email: String!\r\n    $image: String!\r\n    $phoneNumb: Int\r\n    $dateOfBirth: DateTime\r\n    $birthCertNumber: String\r\n    $placeOfBirth: String\r\n    $gender: String!\r\n  ) {\r\n    createMultipleCandidates(\r\n      cand1stName: $cand1stName\r\n      cand2ndName: $cand2ndName\r\n      dadName: $dadName\r\n      momName: $momName\r\n      cand3rdName: $cand3rdName\r\n      candCode: $candCode\r\n      email: $email\r\n      image: $image\r\n      phoneNumb: $phoneNumb\r\n      dateOfBirth: $dateOfBirth\r\n      birthCertNumber: $birthCertNumber\r\n      placeOfBirth: $placeOfBirth\r\n      gender: $gender\r\n    ) {\r\n      id\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      momName\r\n      dadName\r\n      candCode\r\n      gender\r\n      birthCertNumber\r\n      dateOfBirth\r\n      image\r\n    }\r\n  }\r\n`;\r\n\r\nconst createExaminerMutation = gql`\r\n  mutation createExaminerMutation(\r\n    $examiner1stName: String!\r\n    $examiner2ndName: String!\r\n    $examinerOtherNames: String\r\n    $examinerEmail: String!\r\n    $examinerCNI: String!\r\n    $examinerMatricule: String!\r\n    $examinerImage: String!\r\n    $examinerPhone: Int!\r\n    $gender: String!\r\n  ) {\r\n    createExaminer(\r\n      examiner1stName: $examiner1stName\r\n      examiner2ndName: $examiner2ndName\r\n      examinerOtherNames: $examinerOtherNames\r\n      examinerMatricule: $examinerMatricule\r\n      examinerCNI: $examinerCNI\r\n      examinerEmail: $examinerEmail\r\n      examinerImage: $examinerImage\r\n      examinerPhone: $examinerPhone\r\n      gender: $gender\r\n    ) {\r\n      id\r\n      examiner1stName\r\n      examiner2ndName\r\n      examinerOtherNames\r\n      examinerCode\r\n      examinerEmail\r\n      examinerImage\r\n      examinerPhone\r\n    }\r\n  }\r\n`;\r\n\r\n//************create mutations  */\r\n\r\n////**************Update mutations */\r\n\r\nconst updateSubDivisionMutation = gql`\r\n  mutation updateSubDivisionMutation(\r\n    $id: ID!\r\n    $subDivName: String\r\n    $subDivCode: String\r\n  ) {\r\n    updateSubDivision(\r\n      id: $id\r\n      subDivName: $subDivName\r\n      subDivCode: $subDivCode\r\n    ) {\r\n      subDivName\r\n      subDivCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateCenterMutation = gql`\r\n  mutation updateCenterMutation(\r\n    $id: ID!\r\n    $centerName: String\r\n    $centerCode: String\r\n    $centerNumber: Int\r\n  ) {\r\n    updateCenter(\r\n      id: $id\r\n      centerName: $centerName\r\n      centerCode: $centerCode\r\n      centerNumber: $centerNumber\r\n    ) {\r\n      id\r\n      centerName\r\n      centerNumber\r\n      centerCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateTownMutation = gql`\r\n  mutation updateTownMutation($id: ID!, $townName: String, $townCode: String) {\r\n    updateTown(id: $id, townName: $townName, townCode: $townCode) {\r\n      townName\r\n      townCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateExamMutation = gql`\r\n  mutation updateExamMutation($id: ID!, $examName: String, $examCode: String) {\r\n    updateExam(id: $id, examName: $examName, examCode: $examCode) {\r\n      examName\r\n      examCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateScoreMutation = gql`\r\n  mutation updateScoreMutation(\r\n    $subjectSpecialty: SubjectSpecialtyWhereUniqueInput!\r\n    $subjectAve: Float!\r\n    $candExamSecretCode: String!\r\n  ) {\r\n    updateScore(\r\n      subjectSpecialty: $subjectSpecialty\r\n      subjectAve: $subjectAve\r\n      candExamSecretCode: $candExamSecretCode\r\n    ) {\r\n      subjectAve\r\n      coeff\r\n      id\r\n      subjectSpecialty {\r\n        id\r\n        subjectCode\r\n        subjectName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst enterMarksMutation = gql`\r\n  mutation enterMarksMutation(\r\n    $subjectSpecialty: SubjectSpecialtyWhereUniqueInput!\r\n    $subjectAve: Float!\r\n    $subjectName: String!\r\n    $candExamSecretCode: String!\r\n  ) {\r\n    enterMarks(\r\n      subjectSpecialty: $subjectSpecialty\r\n      subjectAve: $subjectAve\r\n      subjectName: $subjectName\r\n      candExamSecretCode: $candExamSecretCode\r\n    ) {\r\n      subjectAve\r\n      coeff\r\n      subjectName\r\n      id\r\n      subjectSpecialty {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// const getPDFFileBuffer = gql`\r\n// mutation getPDFFileBuffer ($url:String!){\r\n// printPDF(url: $url){\r\n\r\n// }\r\n// }\r\n// `;\r\n\r\nconst updateCandidateMutation = gql`\r\n  mutation updateCandidateMutation(\r\n    $id: ID!\r\n    $cand1stName: String\r\n    $cand2ndName: String\r\n    $cand3rdName: String\r\n    $momName: String\r\n    $dadName: String\r\n    $email: String\r\n    $image: String\r\n    $phoneNumb: Int\r\n    $placeOfBirth: String\r\n    $dateOfBirth: DateTime\r\n    $birthCertNumber: String\r\n    $gender: String\r\n  ) {\r\n    updateCandidate(\r\n      id: $id\r\n      cand1stName: $cand1stName\r\n      cand2ndName: $cand2ndName\r\n      cand3rdName: $cand3rdName\r\n      momName: $momName\r\n      dadName: $dadName\r\n      email: $email\r\n      image: $image\r\n      phoneNumb: $phoneNumb\r\n      placeOfBirth: $placeOfBirth\r\n      dateOfBirth: $dateOfBirth\r\n      birthCertNumber: $birthCertNumber\r\n      gender: $gender\r\n    ) {\r\n      id\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      momName\r\n      dadName\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      dateOfBirth\r\n      birthCertNumber\r\n      gender\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateExaminerMutation = gql`\r\n  mutation updateExaminerMutation(\r\n    $id: ID!\r\n    $examiner1stName: String\r\n    $examiner2ndName: String\r\n    $examinerOtherNames: String\r\n    $examinerCNI: String\r\n    $examinerPhone: Int\r\n    $examinerEmail: String\r\n    $examinerImage: String\r\n    $examinerMatricule: String\r\n    $examinerCode: String\r\n    $gender: String\r\n  ) {\r\n    updateExaminer(\r\n      id: $id\r\n      examiner1stName: $examiner1stName\r\n      examiner2ndName: $examiner2ndName\r\n      examinerOtherNames: $examinerOtherNames\r\n      examinerCNI: $examinerCNI\r\n      examinerPhone: $examinerPhone\r\n      examinerEmail: $examinerEmail\r\n      examinerMatricule: $examinerMatricule\r\n      examinerCode: $examinerCode\r\n      examinerImage: $examinerImage\r\n      gender: $gender\r\n    ) {\r\n      id\r\n      examiner1stName\r\n      examiner2ndName\r\n      examinerOtherNames\r\n      examinerCNI\r\n      examinerPhone\r\n      examinerEmail\r\n      examinerMatricule\r\n      examinerCode\r\n      examinerImage\r\n      gender\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateSignUpMutation = gql`\r\n  mutation updateSignUpMutation(\r\n    $email: String!\r\n    $name: String!\r\n    $password: String!\r\n  ) {\r\n    updateUser(email: $email, name: $name, password: $password) {\r\n      id\r\n      email\r\n      name\r\n      password\r\n    }\r\n  }\r\n`;\r\n\r\nconst updateItemMutation = async (e, updateMutation) => {\r\n  e.preventDefault();\r\n  console.log(\"Updating Region!!\");\r\n  const res = await updateMutation({\r\n    variables: {\r\n      id: this.props.id,\r\n      ...this.state,\r\n    },\r\n  });\r\n  console.log(\"Region Updated!!\");\r\n};\r\n\r\n////**************Update mutations */\r\n\r\n/////*****************Delete Mutations */\r\n\r\nconst deleteRegionMutation = gql`\r\n  mutation deleteRegionMutation($id: ID!) {\r\n    deleteRegion(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst deleteCenterMutation = gql`\r\n  mutation deleteCenterMutation($id: ID!) {\r\n    deleteCenter(id: $id) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport {\r\n  createCandidateMutation,\r\n  createNewSubjectMutation,\r\n  createTownMutation,\r\n  createCenterExamSessionExaminerMutation,\r\n  createDivisionMutation,\r\n  createRegistrationMutation,\r\n  createCenterMutation,\r\n  createEducationTypeMutation,\r\n  createSpecialtyMutation,\r\n  createSubDivisionMutation,\r\n  createNewSessionMutation,\r\n  createNewRankMutation,\r\n  createNewReportMutation,\r\n  createNewRegionMutation,\r\n  createExamMutation,\r\n  registerSubjectSpecialtyMutation,\r\n  registerNewSubjectSpecialtyMutation,\r\n  updateCenterMutation,\r\n  updateTownMutation,\r\n  updateSessionMutation,\r\n  updateRegionMutation,\r\n  updateExamMutation,\r\n  updateSubDivisionMutation,\r\n  updateCandidateMutation,\r\n  updateScoreMutation,\r\n  updateDivisionMutation,\r\n  updateItemMutation,\r\n  createExaminerMutation,\r\n  createPhaseMutation,\r\n  createCenterExamSessionSpecialtyMutation,\r\n  updateSpecialtyMutation,\r\n  updateRankMutation,\r\n  createPhaseRankMutation,\r\n  createNewCountryMutation,\r\n  createMultipleCandidatesMutation,\r\n  updateSubjectMutation,\r\n  updateExaminerMutation,\r\n  createCenterExamSessionMutation,\r\n  updateEducationTypeMutation,\r\n  createAttendanceMutation,\r\n  signInCandidate,\r\n  loginUserMutation,\r\n  updateSignUpMutation,\r\n  signupUserMutation,\r\n  deleteRegionMutation,\r\n  deleteCenterMutation,\r\n  signoutMutation,\r\n  enterMarksMutation,\r\n  deleteReportMutation,\r\n  requestResetMutation,\r\n};\r\n","import gql from \"graphql-tag\";\r\n\r\nconst currentUserQuery = gql`\r\n  query currentUserQuery {\r\n    me {\r\n      id\r\n      email\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleEducationTypeQuery = gql`\r\n  query singleEducationTypeQuery($id: ID!) {\r\n    educationType(id: $id) {\r\n      educationTypeName\r\n      educationTypeCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCESExaminerQuery = gql`\r\n  query getCESExaminerQuery(\r\n    $examiner: ExaminerWhereUniqueInput!\r\n    $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n  ) {\r\n    getCenterExamSessionExaminers(\r\n      examiner: $examiner\r\n      centerExamSession: $centerExamSession\r\n    ) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllEducationTypesQuery = gql`\r\n  query getAllEducationTypesQuery {\r\n    educationTypes(orderBy: educationTypeName_ASC) {\r\n      id\r\n      educationTypeName\r\n      educationTypeCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllRegionsQuery = gql`\r\n  query getAllRegionsQuery {\r\n    regions(orderBy: regName_ASC) {\r\n      regName\r\n      regCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllUsersQuery = gql`\r\n  query getAllUsersQuery {\r\n    users(orderBy: name_ASC) {\r\n      name\r\n      email\r\n      id\r\n      password\r\n      resetToken\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCenterResultsQuery = gql`\r\n  query getCenterResultsQuery(\r\n    $exam: ExamWhereUniqueInput!\r\n    $center: CenterWhereUniqueInput!\r\n    $session: SessionWhereUniqueInput!\r\n  ) {\r\n    getResultsPerCenter(exam: $exam, center: $center, session: $session) {\r\n      id\r\n      candidate {\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        placeOfBirth\r\n        email\r\n        user {\r\n          id\r\n        }\r\n        dateOfBirth\r\n        user {\r\n          id\r\n        }\r\n        gender\r\n      }\r\n      exam {\r\n        examName\r\n      }\r\n      session {\r\n        sessionName\r\n      }\r\n      center {\r\n        centerName\r\n      }\r\n      scores {\r\n        subjectAve\r\n        coeff\r\n        subjectSpecialty {\r\n          subjectName\r\n          specialty {\r\n            id\r\n            specialtyName\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateResultsQuery = gql`\r\n  query getCandidateResultsQuery($id: ID!) {\r\n    registration(id: $id) {\r\n      id\r\n      createdAt\r\n      candRegistrationNumber\r\n\r\n      candidate {\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        momName\r\n        dadName\r\n        placeOfBirth\r\n        image\r\n        email\r\n        user {\r\n          id\r\n        }\r\n        dateOfBirth\r\n        gender\r\n      }\r\n      centerExamSessionSpecialty {\r\n        centerExamSession {\r\n          id\r\n          examSession {\r\n            id\r\n            exam {\r\n              id\r\n              examName\r\n            }\r\n            session {\r\n              id\r\n              sessionName\r\n            }\r\n          }\r\n          center {\r\n            id\r\n            centerName\r\n          }\r\n        }\r\n        specialty {\r\n          id\r\n          specialtyName\r\n        }\r\n      }\r\n      scores(orderBy: subjectName_ASC) {\r\n        id\r\n        subjectAve\r\n        subjectName\r\n        coeff\r\n        subjectSpecialty {\r\n          id\r\n          subject {\r\n            id\r\n            subjectName\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getExaminerRegistrationQuery = gql`\r\n  query getExaminerRegistrationQuery($id: ID!) {\r\n    centerExamSessionExaminer(id: $id) {\r\n      id\r\n      examiner {\r\n        examiner1stName\r\n        examiner2ndName\r\n        examinerOtherNames\r\n        examinerMatricule\r\n        examinerPhone\r\n        examinerCNI\r\n        examinerImage\r\n        examinerEmail\r\n        gender\r\n      }\r\n      centerExamSession {\r\n        id\r\n        examSession {\r\n          id\r\n          exam {\r\n            id\r\n            examName\r\n          }\r\n          session {\r\n            id\r\n            sessionName\r\n          }\r\n        }\r\n        center {\r\n          id\r\n          centerName\r\n        }\r\n      }\r\n      phaseRank {\r\n        id\r\n        rankName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCenterResultsQuery = gql`\r\n  query getAllCenterResultsQuery($centerExamSession: String!) {\r\n    centerExamSessionSpecialtyForResults(\r\n      centerExamSession: $centerExamSession\r\n    ) {\r\n      id\r\n      specialty {\r\n        id\r\n        specialtyName\r\n        subjectSpecialty {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n      registration {\r\n        id\r\n        candidate {\r\n          cand1stName\r\n          id\r\n        }\r\n        scores {\r\n          id\r\n          subjectAve\r\n          coeff\r\n          subjectSpecialty {\r\n            id\r\n            subjectName\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getEachCandidateResultsQuery = gql`\r\n  query getEachCandidateResultsQuery($id: ID!) {\r\n    registration(id: $id) {\r\n      id\r\n      candidate {\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        momName\r\n        dadName\r\n        email\r\n        dateOfBirth\r\n        user {\r\n          id\r\n        }\r\n        gender\r\n      }\r\n      exam {\r\n        examName\r\n      }\r\n      session {\r\n        sessionName\r\n      }\r\n      specialty {\r\n        id\r\n        specialtyName\r\n      }\r\n      center {\r\n        centerName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateRegistrationInfoQuery = gql`\r\n  query getCandidateRegistrationInfoQuery($id: ID!) {\r\n    registration(id: $id) {\r\n      id\r\n      aptitude\r\n      EPF1\r\n      EPF2\r\n      candExamSecretCode\r\n      createdAt\r\n      candRegistrationNumber\r\n      candidate {\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        image\r\n        email\r\n        candCode\r\n        dateOfBirth\r\n        placeOfBirth\r\n        gender\r\n      }\r\n      centerExamSessionSpecialty {\r\n        id\r\n        specialty {\r\n          id\r\n          specialtyName\r\n          subjectSpecialty {\r\n            coeff\r\n            subject {\r\n              id\r\n              subjectName\r\n              subjectCode\r\n            }\r\n          }\r\n        }\r\n        centerExamSession {\r\n          center {\r\n            id\r\n            centerName\r\n          }\r\n          examSession {\r\n            id\r\n            exam {\r\n              id\r\n              examName\r\n            }\r\n            session {\r\n              id\r\n              sessionName\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateRegistrationIDQuery = gql`\r\n  query getCandidateRegistrationIDQuery(\r\n    $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n    $candidate: CandidateWhereUniqueInput!\r\n  ) {\r\n    candidateRegistrationID(\r\n      centerExamSession: $centerExamSession\r\n      candidate: $candidate\r\n    ) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateRegistrationIDsQuery = gql`\r\n  query getCandidateRegistrationIDsQuery($candidate: RegistrationWhereInput!) {\r\n    candidateRegistrationIDs(candidate: $candidate) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst registrationIDFromSecretCodeQuery = gql`\r\n  query registrationIDFromSecretCodeQuery($candExamSecretCode: String!) {\r\n    getRegistration(candExamSecretCode: $candExamSecretCode) {\r\n      id\r\n      specialty {\r\n        id\r\n        specialtyName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCandidateRegistrationIDsQuery = gql`\r\n  query getAllCandidateRegistrationIDsQuery($id: ID!) {\r\n    candidate(id: $id) {\r\n      id\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      placeOfBirth\r\n      dateOfBirth\r\n      image\r\n      momName\r\n      dadName\r\n      email\r\n      user {\r\n        id\r\n      }\r\n      gender\r\n      registration {\r\n        id\r\n\r\n        centerExamSessionSpecialty {\r\n          id\r\n          specialty {\r\n            id\r\n            specialtyName\r\n          }\r\n          centerExamSession {\r\n            center {\r\n              id\r\n              centerName\r\n            }\r\n            examSession {\r\n              id\r\n              exam {\r\n                id\r\n                examName\r\n              }\r\n              session {\r\n                id\r\n                sessionName\r\n              }\r\n            }\r\n          }\r\n        }\r\n        scores {\r\n          id\r\n          subjectAve\r\n          coeff\r\n        }\r\n      }\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateIDQuery = gql`\r\n  query getCandidateIDQuery($candCode: String!) {\r\n    candidateCode(candCode: $candCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getExaminerIDQuery = gql`\r\n  query getExaminerIDQuery($examinerCode: String!) {\r\n    examinerByCode(examinerCode: $examinerCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getRegistrationIDFromRegNumberQuery = gql`\r\n  query getRegistrationIDFromRegNumberQuery($candRegistrationNumber: String!) {\r\n    candidateRegistrationNumber(\r\n      candRegistrationNumber: $candRegistrationNumber\r\n    ) {\r\n      id\r\n      candidate {\r\n        id\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        placeOfBirth\r\n        dateOfBirth\r\n        image\r\n        momName\r\n        dadName\r\n        email\r\n        user {\r\n          id\r\n        }\r\n        gender\r\n        registration {\r\n          id\r\n\r\n          centerExamSessionSpecialty {\r\n            id\r\n            specialty {\r\n              id\r\n              specialtyName\r\n            }\r\n            centerExamSession {\r\n              center {\r\n                id\r\n                centerName\r\n              }\r\n              examSession {\r\n                id\r\n                exam {\r\n                  id\r\n                  examName\r\n                }\r\n                session {\r\n                  id\r\n                  sessionName\r\n                }\r\n              }\r\n            }\r\n          }\r\n          scores {\r\n            id\r\n            subjectAve\r\n            coeff\r\n            subjectSpecialty {\r\n              id\r\n              subjectName\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCenterIDFromCenterCodeQuery = gql`\r\n  query getCenterIDFromCenterCodeQuery($centerSecretCode: String!) {\r\n    getCenterByCode(centerSecretCode: $centerSecretCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCenterRegistrationIDsQuery = gql`\r\n  query getCenterRegistrationIDsQuery(\r\n    $exam: ExamWhereUniqueInput!\r\n    $center: CenterWhereUniqueInput!\r\n    $session: SessionWhereUniqueInput!\r\n  ) {\r\n    centerRegistrationIDs(exam: $exam, center: $center, session: $session) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst centerExamSessionSpecialtyForResultsQuery = gql`\r\n  query centerExamSessionSpecialtyForResultsQuery($centerExamSession: String!) {\r\n    centerExamSessionSpecialtyForResults(\r\n      centerExamSession: $centerExamSession\r\n    ) {\r\n      id\r\n      specialty {\r\n        id\r\n        specialtyName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst centerExamSessionForResultsQuery = gql`\r\n  query centerExamSessionForResultsQuery($id: ID!) {\r\n    centerExamSession(id: $id) {\r\n      id\r\n      center {\r\n        id\r\n        centerName\r\n      }\r\n      examSession {\r\n        id\r\n        exam {\r\n          examName\r\n          id\r\n        }\r\n        session {\r\n          id\r\n          sessionName\r\n        }\r\n      }\r\n      registration {\r\n        id\r\n        EPF1\r\n        EPF2\r\n        centerExamSession {\r\n          id\r\n          center {\r\n            id\r\n            centerName\r\n          }\r\n          examSession {\r\n            id\r\n            exam {\r\n              examName\r\n              id\r\n            }\r\n            session {\r\n              id\r\n              sessionName\r\n            }\r\n          }\r\n        }\r\n        candRegistrationNumber\r\n        candExamSecretCode\r\n        aptitude\r\n        candidate {\r\n          id\r\n          cand1stName\r\n          cand2ndName\r\n          cand3rdName\r\n          dateOfBirth\r\n          placeOfBirth\r\n          email\r\n          phoneNumb\r\n          user {\r\n            id\r\n          }\r\n          gender\r\n        }\r\n        specialty {\r\n          id\r\n          specialtyName\r\n          specialtyCode\r\n        }\r\n        scores {\r\n          id\r\n          subjectAve\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst centerExamSessionSpecialtyResultsQuery = gql`\r\n  query centerExamSessionSpecialtyResultsQuery($id: ID!) {\r\n    centerExamSessionSpecialty(id: $id) {\r\n      id\r\n      centerExamSession {\r\n        id\r\n        center {\r\n          id\r\n          centerName\r\n          centerCode\r\n        }\r\n        examSession {\r\n          exam {\r\n            id\r\n            examName\r\n          }\r\n          session {\r\n            id\r\n            sessionName\r\n          }\r\n        }\r\n      }\r\n\r\n      specialty {\r\n        id\r\n        specialtyName\r\n        specialtyCode\r\n      }\r\n      registration {\r\n        id\r\n        candRegistrationNumber\r\n        candExamSecretCode\r\n        candidate {\r\n          id\r\n          cand1stName\r\n          cand2ndName\r\n          cand3rdName\r\n          dateOfBirth\r\n          placeOfBirth\r\n          email\r\n          phoneNumb\r\n          user {\r\n            id\r\n          }\r\n          gender\r\n        }\r\n        scores {\r\n          id\r\n          subjectAve\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateByCandCodeQuery = gql`\r\n  query getCandidateByCandCodeQuery($candCode: String!) {\r\n    getCandidateByCode(candCode: $candCode) {\r\n      id\r\n      cand1stName\r\n      candCode\r\n      dateOfBirth\r\n      placeOfBirth\r\n      user {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllRanksQuery = gql`\r\n  query getAllRanksQuery {\r\n    ranks(orderBy: rankName_ASC) {\r\n      rankName\r\n      rankCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllPhasesQuery = gql`\r\n  query getAllPhasesQuery {\r\n    phases(orderBy: phaseName_ASC) {\r\n      phaseName\r\n      phaseCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubjectsQuery = gql`\r\n  query getAllSubjectsQuery {\r\n    subjects(orderBy: subjectName_ASC) {\r\n      subjectName\r\n      subjectCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubjectGroupsQuery = gql`\r\n  query getAllSubjectGroupsQuery {\r\n    subjectGroups(orderBy: subjectGroupName_ASC) {\r\n      subjectGroupName\r\n      subjectGroupCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSpecialtiesOfAnEducationTypeQuery = gql`\r\n  query getAllSpecialtiesOfAnEducationTypeQuery($id: ID!) {\r\n    educationType(id: $id) {\r\n      id\r\n      educationTypeName\r\n      specialty {\r\n        id\r\n        specialtyName\r\n        specialtyCode\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSpecialtiesOfACenterExamSessionQuery = gql`\r\n  query getAllSpecialtiesOfACenterExamSessionQuery($id: ID!) {\r\n    centerExamSession(id: $id) {\r\n      id\r\n      centerExamSessionSpecialty {\r\n        id\r\n        registration {\r\n          candRegistrationNumber\r\n          id\r\n          candidate {\r\n            id\r\n            cand1stName\r\n            cand2ndName\r\n            cand3rdName\r\n          }\r\n        }\r\n        specialty {\r\n          id\r\n          specialtyName\r\n          specialtyCode\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSpecialtiesQuery = gql`\r\n  query getAllSpecialtiesQuery {\r\n    specialties(orderBy: specialtyName_ASC) {\r\n      id\r\n      specialtyName\r\n      specialtyCode\r\n    }\r\n  }\r\n`;\r\nconst getAllSubjectsOfAnEducTypeQuery = gql`\r\n  query getAllSubjectsOfAnEducTypeQuery($id: ID!) {\r\n    educationType(id: $id) {\r\n      id\r\n      educationTypeName\r\n      subject(orderBy: subjectName_ASC) {\r\n        id\r\n        subjectName\r\n        subjectCode\r\n        subjectType\r\n        subjectGroup\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getAllSubjectsWithEducTypesQuery = gql`\r\n  query getAllSubjectsWithEducTypesQuery {\r\n    subjects(orderBy: subjectName_ASC) {\r\n      id\r\n      subjectName\r\n      subjectCode\r\n      subjectType\r\n      subjectGroup\r\n      subjectSpecialty {\r\n        specialty {\r\n          specialtyName\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getAllSubjectSpecialtiesOfASpecialtyQuery = gql`\r\n  query getAllSubjectSpecialtiesOfASpecialtyQuery($id: ID!) {\r\n    specialty(id: $id) {\r\n      id\r\n      subjectSpecialty {\r\n        id\r\n        subject {\r\n          id\r\n          subjectName\r\n          subjectCode\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllExamsQuery = gql`\r\n  query getAllExamsQuery {\r\n    exams(orderBy: examName_ASC) {\r\n      examName\r\n      examCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllGroup2Query = gql`\r\n  query getAllGroup2Query($educType: EducationTypeWhereUniqueInput!) {\r\n    group2Subjects(educType: $educType, orderBy: subjectName_ASC) {\r\n      subjectName\r\n      subjectCode\r\n      subjectGroup\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllGroup1Query = gql`\r\n  query getAllGroup1Query($educType: EducationTypeWhereUniqueInput!) {\r\n    group1Subjects(educType: $educType, orderBy: subjectName_ASC) {\r\n      subjectName\r\n      subjectCode\r\n      subjectGroup\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSessionsQuery = gql`\r\n  query getAllSessionsQuery {\r\n    sessions(orderBy: createdAt_DESC) {\r\n      sessionName\r\n      sessionCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllDivisionsQuery = gql`\r\n  query getAllDivisionsQuery {\r\n    divisions(orderBy: divName_ASC) {\r\n      divName\r\n      divCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllRegionsAndDivisionsQuery = gql`\r\n  query getAllRegionsAndDivisionsQuery {\r\n    regions {\r\n      id\r\n      regName\r\n      regCode\r\n      division(orderBy: divName_ASC) {\r\n        divName\r\n        divCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllRegionsDivisionsAndTownsQuery = gql`\r\n  query getAllRegionsDivisionsAndTownsQuery {\r\n    regions {\r\n      id\r\n      regName\r\n      regCode\r\n      division(orderBy: divName_ASC) {\r\n        divName\r\n        divCode\r\n        id\r\n        subDivision {\r\n          id\r\n          subDivName\r\n          subDivCode\r\n          town(orderBy: townName_ASC) {\r\n            id\r\n            townName\r\n            townCode\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllRegionsDivisionsTownsCentersQuery = gql`\r\n  query getAllRegionsDivisionsTownsCentersQuery {\r\n    regions {\r\n      id\r\n      regName\r\n      regCode\r\n      division(orderBy: divName_ASC) {\r\n        divName\r\n        divCode\r\n        id\r\n        subDivision {\r\n          id\r\n          subDivName\r\n          subDivCode\r\n          town(orderBy: townName_ASC) {\r\n            id\r\n            townName\r\n            townCode\r\n            center(orderBy: centerName_ASC) {\r\n              id\r\n              centerName\r\n              centerCode\r\n              centerNumber\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getDivisionsOfARegionQuery = gql`\r\n  query getDivisionsOfARegionQuery($id: ID!) {\r\n    region(id: $id) {\r\n      regName\r\n      id\r\n      division(orderBy: divName_ASC) {\r\n        divName\r\n        divCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSubDivisionsOfADivisionQuery = gql`\r\n  query getSubDivisionsOfADivisionQuery($id: ID!) {\r\n    division(id: $id) {\r\n      divName\r\n      id\r\n      subDivision(orderBy: subDivName_ASC) {\r\n        subDivName\r\n        subDivCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubDivisionsQuery = gql`\r\n  query getAllSubDivisionsQuery {\r\n    subDivision(orderBy: subDivName_ASC) {\r\n      subDivName\r\n      subDivCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllTownsQuery = gql`\r\n  query getAllTownsQuery {\r\n    towns(orderBy: townName_ASC) {\r\n      townName\r\n      townCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getTownsOfASubDivisionQuery = gql`\r\n  query getTownsOfASubDivision($id: ID!) {\r\n    subDivision(id: $id) {\r\n      subDivName\r\n      id\r\n      town(orderBy: townName_ASC) {\r\n        townName\r\n        townCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCentersOfATownQuery = gql`\r\n  query getCentersOfATownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      id\r\n      center(orderBy: centerName_ASC) {\r\n        centerName\r\n        centerCode\r\n        centerNumber\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst centersPerTownQuery = gql`\r\n  query centersPerTownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      id\r\n      center(orderBy: centerName_ASC) {\r\n        centerName\r\n        centerNumber\r\n        centerSecretCode\r\n        centerCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCentersQuery = gql`\r\n  query getAllCentersQuery {\r\n    centers(orderBy: centerName_ASC) {\r\n      id\r\n      centerName\r\n      centerCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCandidatesQuery = gql`\r\n  query getAllCandidatesQuery {\r\n    candidates(orderBy: cand1stName_ASC) {\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      candCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\n///*****************Single object queries */\r\n\r\nconst singleCenterQuery = gql`\r\n  query singleCenterQuery($id: ID!) {\r\n    center(id: $id) {\r\n      centerName\r\n      centerNumber\r\n      centerCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleCenterQuery = gql`\r\n  query getSingleCenterQuery($centerNumber: Int!) {\r\n    centerByNumber(centerNumber: $centerNumber) {\r\n      id\r\n      centerNumber\r\n      centerCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleCenterFromCenterSecretCodeQuery = gql`\r\n  query getSingleCenterFromCenterSecretCodeQuery($CESCode: String!) {\r\n    centerBySecretCode(CESCode: $CESCode) {\r\n      id\r\n      CESCode\r\n      centerName\r\n      centerCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleProfQuery = gql`\r\n  query getSingleProfQuery($authCode: String!) {\r\n    profByAuthCode(authCode: $authCode) {\r\n      authCode\r\n      id\r\n      auth1stName\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleCenterByCodeQuery = gql`\r\n  query getSingleCenterByCodeQuery($centerSecretCode: String!) {\r\n    getCenterByCode(centerSecretCode: $centerSecretCode) {\r\n      id\r\n      centerCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getASingleCenterQuery = gql`\r\n  query getASingleCenterQuery($centerNumber: Int!) {\r\n    centerByNumber(centerNumber: $centerNumber) {\r\n      centerNumber\r\n      centerName\r\n      centerCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleTownQuery = gql`\r\n  query singleTownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      townCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleCenterExamSessionQuery = gql`\r\n  query getSingleCenterExamSessionQuery(\r\n    $center: CenterWhereUniqueInput!\r\n    $examSession: ExamSessionWhereUniqueInput!\r\n  ) {\r\n    centerExamSessionsByCode(examSession: $examSession, center: $center) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleCenterExamSessionBySecretCodeQuery = gql`\r\n  query getSingleCenterExamSessionBySecretCodeQuery($CESCode: String!) {\r\n    centerExamSessionBySecretCode(CESCode: $CESCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllRanksOfAnExamPhaseQuery = gql`\r\n  query getAllRanksOfAnExamPhaseQuery($id: ID!) {\r\n    phase(id: $id) {\r\n      id\r\n      phaseRank {\r\n        id\r\n        rank {\r\n          id\r\n          rankName\r\n          rankCode\r\n        }\r\n        phase {\r\n          id\r\n          phaseName\r\n          phaseCode\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getRegisteredCandidateCountQuery = gql`\r\n  query getRegisteredCandidateCountQuery($id: ID!) {\r\n    registrationsConnection(id: $id) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getRegisteredCandidatesPerSpecialty = gql`\r\n  query getRegisteredCandidatesPerSpecialty($id: ID!) {\r\n    centerExamSessionSpecialty(id: $id) {\r\n      id\r\n      registration {\r\n        candRegistrationNumber\r\n        id\r\n        candExamSecretCode\r\n        candidate {\r\n          id\r\n          cand1stName\r\n          cand2ndName\r\n          cand3rdName\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCenterExamSessionSpecialtyQuery = gql`\r\n  query getCenterExamSessionSpecialtyQuery(\r\n    $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n    $specialty: SpecialtyWhereUniqueInput!\r\n  ) {\r\n    centerExamSessionSpecialties(\r\n      centerExamSession: $centerExamSession\r\n      specialty: $specialty\r\n    ) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSpecialtyFromCESSQuery = gql`\r\n  query getSpecialtyFromCESSQuery($id: ID!) {\r\n    centerExamSessionSpecialty(id: $id) {\r\n      id\r\n      specialty {\r\n        id\r\n        specialtyName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getExamSessionQuery = gql`\r\n  query getExamSessionQuery(\r\n    $exam: ExamWhereUniqueInput!\r\n    $session: SessionWhereUniqueInput!\r\n  ) {\r\n    examSessions(session: $session, exam: $exam) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleExamQuery = gql`\r\n  query singleExamQuery($id: ID!) {\r\n    exam(id: $id) {\r\n      examName\r\n      examCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCandidateQuery1 = gql`\r\n  query singleCandidateQuery1($id: ID!) {\r\n    candidate(id: $id) {\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      dadName\r\n      momName\r\n      candCode\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      user {\r\n        id\r\n      }\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCandidateQuery = gql`\r\n  query singleCandidateQuery($id: ID!) {\r\n    candidate(id: $id) {\r\n      id\r\n      dateOfBirth\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      candCode\r\n      dadName\r\n      momName\r\n      email\r\n      image\r\n      phoneNumb\r\n      birthCertNumber\r\n      placeOfBirth\r\n      user {\r\n        id\r\n      }\r\n      gender\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleExaminerQuery = gql`\r\n  query singleExaminerQuery($id: ID!) {\r\n    examiner(id: $id) {\r\n      id\r\n      examiner1stName\r\n      examiner2ndName\r\n      examinerOtherNames\r\n      examinerCode\r\n      examinerEmail\r\n      gender\r\n      examinerImage\r\n      examinerPhone\r\n      examinerMatricule\r\n      examinerCNI\r\n    }\r\n  }\r\n`;\r\n\r\nconst viewSingleCandidateQuery = gql`\r\n  query viewSingleCandidateQuery($candCode: String!) {\r\n    singleCandidate(candCode: $candCode) {\r\n      id\r\n      dateOfBirth\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      candCode\r\n      momName\r\n      dadName\r\n      email\r\n      image\r\n      phoneNumb\r\n      birthCertNumber\r\n      placeOfBirth\r\n      user {\r\n        id\r\n      }\r\n      gender\r\n    }\r\n  }\r\n`;\r\n\r\nconst getScoreID = gql`\r\n  query getScoreID($candExamSecretCode: String!) {\r\n    scores(candExamSecretCode: $candExamSecretCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getRegistrations = gql`\r\n  query getRegistrations($candExamSecretCode: String!) {\r\n    registration(candExamSecretCode: $candExamSecretCode) {\r\n      id\r\n      scores {\r\n        id\r\n        subject(orderBy: subjectName_ASC) {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSubDivisionQuery = gql`\r\n  query singleSubDivisionQuery($id: ID!) {\r\n    subDivision(id: $id) {\r\n      subDivName\r\n      subDivCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleRegionQuery = gql`\r\n  query getSingleRegionQuery($id: ID!) {\r\n    region(id: $id) {\r\n      regName\r\n      regCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singlePhaseQuery = gql`\r\n  query singlePhaseQuery($id: ID!) {\r\n    phase(id: $id) {\r\n      phaseName\r\n      phaseCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSpecialtyQuery = gql`\r\n  query singleSpecialtyQuery($id: ID!) {\r\n    specialty(id: $id) {\r\n      specialtyName\r\n      specialtyCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst dataForAverage = gql`\r\n  query dataForAverage($candExamSecretCode: String!) {\r\n    scores(candExamSecretCode: $candExamSecretCode) {\r\n      id\r\n      subjectAve\r\n      coeff\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleDivisionQuery = gql`\r\n  query singleDivisionQuery($id: ID!) {\r\n    division(id: $id) {\r\n      divName\r\n      divCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleRankQuery = gql`\r\n  query singleRankQuery($id: ID!) {\r\n    rank(id: $id) {\r\n      rankName\r\n      rankCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSubjectQuery = gql`\r\n  query singleSubjectQuery($id: ID!) {\r\n    subject(id: $id) {\r\n      subjectName\r\n      subjectCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSubjectGroupQuery = gql`\r\n  query singleSubjectGroupQuery($id: ID!) {\r\n    subjectGroup(id: $id) {\r\n      subjectGroupName\r\n      subjectGroupCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSessionQuery = gql`\r\n  query singleSessionQuery($id: ID!) {\r\n    session(id: $id) {\r\n      sessionName\r\n      sessionCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n///*****************End Single object queries */\r\n\r\nexport {\r\n  getAllSubjectSpecialtiesOfASpecialtyQuery,\r\n  getAllSpecialtiesOfAnEducationTypeQuery,\r\n  getAllExamsQuery,\r\n  getAllSessionsQuery,\r\n  getDivisionsOfARegionQuery,\r\n  getAllDivisionsQuery,\r\n  getSubDivisionsOfADivisionQuery,\r\n  getTownsOfASubDivisionQuery,\r\n  getCentersOfATownQuery,\r\n  getAllEducationTypesQuery,\r\n  getAllRanksQuery,\r\n  getAllCandidatesQuery,\r\n  getAllCentersQuery,\r\n  getSingleRegionQuery,\r\n  getAllSpecialtiesQuery,\r\n  getAllSubDivisionsQuery,\r\n  getAllSubjectsOfAnEducTypeQuery,\r\n  getScoreID,\r\n  singleSpecialtyQuery,\r\n  getRegistrations,\r\n  singleSubjectQuery,\r\n  singleCandidateQuery1,\r\n  getAllSubjectsWithEducTypesQuery,\r\n  singleCandidateQuery,\r\n  viewSingleCandidateQuery,\r\n  singleCenterQuery,\r\n  singleExamQuery,\r\n  singleTownQuery,\r\n  getAllCenterResultsQuery,\r\n  singleSessionQuery,\r\n  singleDivisionQuery,\r\n  singleSubDivisionQuery,\r\n  singleEducationTypeQuery,\r\n  singleRankQuery,\r\n  centerExamSessionSpecialtyForResultsQuery,\r\n  getAllCandidateRegistrationIDsQuery,\r\n  getCenterExamSessionSpecialtyQuery,\r\n  getExamSessionQuery,\r\n  getAllSpecialtiesOfACenterExamSessionQuery,\r\n  getCenterResultsQuery,\r\n  getCandidateRegistrationIDQuery,\r\n  registrationIDFromSecretCodeQuery,\r\n  getCandidateRegistrationIDsQuery,\r\n  centerExamSessionForResultsQuery,\r\n  getCandidateIDQuery,\r\n  getASingleCenterQuery,\r\n  getRegisteredCandidateCountQuery,\r\n  centersPerTownQuery,\r\n  getSingleCenterQuery,\r\n  getCandidateResultsQuery,\r\n  getCenterRegistrationIDsQuery,\r\n  getCandidateByCandCodeQuery,\r\n  getSingleCenterExamSessionQuery,\r\n  getEachCandidateResultsQuery,\r\n  getCenterIDFromCenterCodeQuery,\r\n  getRegistrationIDFromRegNumberQuery,\r\n  centerExamSessionSpecialtyResultsQuery,\r\n  dataForAverage,\r\n  getAllPhasesQuery,\r\n  getAllRegionsQuery,\r\n  getAllUsersQuery,\r\n  singleExaminerQuery,\r\n  getAllRegionsDivisionsAndTownsQuery,\r\n  getAllRegionsDivisionsTownsCentersQuery,\r\n  getCandidateRegistrationInfoQuery,\r\n  getCESExaminerQuery,\r\n  getExaminerIDQuery,\r\n  getAllTownsQuery,\r\n  getSpecialtyFromCESSQuery,\r\n  getExaminerRegistrationQuery,\r\n  getSingleProfQuery,\r\n  getAllGroup1Query,\r\n  getAllSubjectsQuery,\r\n  getSingleCenterFromCenterSecretCodeQuery,\r\n  getSingleCenterExamSessionBySecretCodeQuery,\r\n  getAllGroup2Query,\r\n  singleSubjectGroupQuery,\r\n  getAllRegionsAndDivisionsQuery,\r\n  getRegisteredCandidatesPerSpecialty,\r\n  getAllSubjectGroupsQuery,\r\n  getAllRanksOfAnExamPhaseQuery,\r\n  currentUserQuery,\r\n  singlePhaseQuery,\r\n  getSingleCenterByCodeQuery,\r\n};\r\n","import React from \"react\";\r\nimport Error from \"../ErrorMessage\";\r\nimport { Query } from \"react-apollo\";\r\nimport Login from \"./Login\";\r\nimport { currentUserQuery } from \"../queries&Mutations&Functions/Queries\";\r\n\r\nconst GatedSignin = (props) => (\r\n  <Query query={currentUserQuery}>\r\n    {({ data, loading, error }) => {\r\n      if (loading) return <p>Loading...</p>;\r\n      if (!data.me) {\r\n        return (\r\n          <div>\r\n            <Error error={error} />\r\n            <p>Veuillez vous connecter</p>\r\n            <Login />\r\n          </div>\r\n        );\r\n      }\r\n      return props.children;\r\n    }}\r\n  </Query>\r\n);\r\n\r\nexport default GatedSignin;\r\n","import React from \"react\";\r\nimport Error from \"../ErrorMessage.js\";\r\nimport { ErrorMessage, Formik, Form } from \"formik\";\r\nimport { TextField } from \"formik-material-ui\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Paper,\r\n  Button,\r\n  LinearProgress,\r\n} from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Link from \"next/link\";\r\nimport * as Yup from \"yup\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport SygefexMuiInput from \"../muiComponents/controls/SygefexMuiInput\";\r\nimport { loginUserMutation } from \"../queries&Mutations&Functions/Mutations\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    // fontSize: 100,\r\n  },\r\n  divStyled: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    top: \"2rem\",\r\n    height: \"90vh\",\r\n  },\r\n  pageStyled: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    marginTop: \"2rem\",\r\n    padding: \"1rem\",\r\n    minWidth: \"20%\",\r\n  },\r\n  listStyled: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    listStyleType: \"none\",\r\n    margin: 0,\r\n    padding: 0,\r\n    paddingTop: \"0.1rem\",\r\n  },\r\n  titleStyled: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n  },\r\n\r\n  allControls: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n    paddingTop: \"0.2rem\",\r\n    border: \"0.05rem solid #1254ac\",\r\n    // width: \"20vw\",\r\n    borderRadius: \"0.5rem\",\r\n    // marginTop: \"2rem\",\r\n  },\r\n  centerAll: {\r\n    display: \"grid\",\r\n    placeItems: \"center\",\r\n  },\r\n});\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .min(3, \"Email 3 characters au moins\")\r\n    .required(\"Email Obligatoire\")\r\n    .email(\"Email invalide\"),\r\n\r\n  password: Yup.string()\r\n    .required(\"Mot de passe Obligatoire\")\r\n    .min(3, \"Mot de passe 3 characters au moins\"),\r\n});\r\n\r\nconst Login = () => {\r\n  const classes = useStyles();\r\n  const initialValues = {\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const [login, { loading, error }] = useMutation(loginUserMutation, {\r\n    refetchQueries: [\"currentUserQuery\"],\r\n  });\r\n\r\n  return (\r\n    <Formik\r\n      method=\"POST\"\r\n      initialValues={initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={async (values, { setSubmitting, resetForm }) => {\r\n        const res = await login({\r\n          variables: { ...values },\r\n        });\r\n        setTimeout(() => {\r\n          console.log(JSON.stringify(values, null, 2));\r\n          console.log(res);\r\n          resetForm(true);\r\n          setSubmitting(false);\r\n        }, 200);\r\n      }}\r\n    >\r\n      {({ submitForm, isSubmitting }) => {\r\n        return (\r\n          <div className={classes.centerAll}>\r\n            <Paper className={classes.pageStyled} elevation={3}>\r\n              <Form aria-busy={isSubmitting}>\r\n                {(isSubmitting || loading) && <LinearProgress />}\r\n                <Grid className={classes.centerAll} container>\r\n                  <Grid container className={classes.centerAll}>\r\n                    <Grid item>\r\n                      <Error error={error} />\r\n                      <Typography\r\n                        className={classes.titleStyled}\r\n                        variant=\"body1\"\r\n                      >\r\n                        Se Connecter\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item className={classes.centerAll}>\r\n                    <SygefexMuiInput\r\n                      name=\"email\"\r\n                      component={TextField}\r\n                      type=\"email\"\r\n                      fullWidth\r\n                      label=\"Email\"\r\n                      size=\"small\"\r\n                      variant=\"standard\"\r\n                      disabled={isSubmitting || loading}\r\n                      helperText={<ErrorMessage name=\"email\" />}\r\n                    />\r\n                    <SygefexMuiInput\r\n                      name=\"password\"\r\n                      component={TextField}\r\n                      type=\"password\"\r\n                      fullWidth\r\n                      label=\"password\"\r\n                      size=\"small\"\r\n                      variant=\"standard\"\r\n                      disabled={isSubmitting || loading}\r\n                      helperText={<ErrorMessage name=\"password\" />}\r\n                    />\r\n                    <Typography variant=\"body2\" className={classes.centerAll}>\r\n                      Pas encore de compte?\r\n                    </Typography>\r\n                    <ul className={classes.listStyled}>\r\n                      <Typography variant=\"body2\">\r\n                        <Link href=\"/creates/signup\">\r\n                          <a>Cr√©er un compte</a>\r\n                        </Link>\r\n                      </Typography>\r\n                    </ul>\r\n\r\n                    <Button disabled={isSubmitting} onClick={submitForm}>\r\n                      Valid{isSubmitting ? \"ation en cours\" : \"er\"}\r\n                    </Button>\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            </Paper>\r\n          </div>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\nexport default Login;\r\n\r\n// <Field\r\n//   name=\"password\"\r\n//   component={TextField}\r\n//   type=\"password\"\r\n//   label=\"Mot de passe\"\r\n//   disabled={isSubmitting || loading}\r\n// />\r\n","import { useState } from \"react\";\r\n\r\nconst useForm = (initialValues) => {\r\n  const [state, setState] = useState(initialValues);\r\n\r\n  const handleInputChange = (e) => {\r\n    const { name, value, type } = e.target;\r\n    console.log({ name, value });\r\n    const val = type === \"number\" ? parseInt(value) : value;\r\n    setState((state) => ({ ...state, [name]: val }));\r\n  };\r\n\r\n  const handleReactSelectChange = (value, action) => {\r\n    console.log(value.value);\r\n    console.log(action.name);\r\n\r\n    setState((state) => ({ ...state, [action.name]: value.value }));\r\n  };\r\n\r\n  const handleMuiSelectChange = (e) => {\r\n    console.log(e);\r\n    console.log(e.target);\r\n\r\n    setState((state) => ({ ...state, [action.name]: value.value }));\r\n  };\r\n\r\n  return [\r\n    state,\r\n    setState,\r\n    handleMuiSelectChange,\r\n    handleReactSelectChange,\r\n    handleInputChange,\r\n  ];\r\n};\r\nexport default useForm;\r\n","module.exports = require(\"@apollo/react-hooks\");","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"@material-ui/core\");","module.exports = require(\"@material-ui/core/TextField\");","module.exports = require(\"@material-ui/core/styles\");","module.exports = require(\"apollo-link\");","module.exports = require(\"axios\");","module.exports = require(\"formik\");","module.exports = require(\"formik-material-ui\");","module.exports = require(\"graphql-tag\");","module.exports = require(\"next/link\");","module.exports = require(\"prop-types\");","module.exports = require(\"react\");","module.exports = require(\"react-apollo\");","module.exports = require(\"yup\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;ACXA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AAHA;AAdA;AACA;AAoBA;AAAA;AACA;AACA;AACA;AAAA;AAKA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAQA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AADA;AAIA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AAEA;AAKA;AACA;AAaA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAHA;AADA;AAOA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AASA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AAJA;AAOA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AAFA;AA9DA;AAAA;AAoEA;AAEA;AACA;AACA;AACA;AACA;AANA;AACA;AAOA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAHA;AAAA;AAAA;AAAA;AAAA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AA1BA;AAAA;AAAA;AAAA;AACA;AAgCA;AACA;AACA;AAnCA;AAAA;AAAA;AAAA;AACA;AAwCA;AACA;AACA;AAAA;AACA;AADA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AApDA;AAAA;AAAA;AAAA;AACA;AAyDA;AAEA;AACA;AACA;AACA;AA/DA;AAuEA;AACA;AACA;AACA;AAFA;AAFA;AAtEA;AAAA;AAAA;AACA;AA6EA;AACA;AACA;AACA;AAjFA;AAuFA;AAAA;AAAA;AADA;AAtFA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AA0FA;AACA;AA5FA;AAgGA;AACA;AACA;AACA;AAFA;AAFA;AA/FA;AAAA;AAAA;AACA;AAsGA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAhHA;AAqHA;AADA;AApHA;AAAA;AAAA;AACA;AAsHA;AAAA;AAAA;AACA;AACA;AAzHA;AAAA;AACA;AA2HA;AAEA;AAAA;AACA;AAEA;AAGA;AAAA;AAAA;AACA;AArIA;AA0IA;AACA;AAAA;AAAA;AAFA;AAzIA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AA+IA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AA1JA;AAgKA;AACA;AAAA;AAAA;AAFA;AA/JA;AAAA;AAAA;AACA;AAmKA;AACA;AArKA;AAAA;AACA;AAsKA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AA9KA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAiLA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAEA;AALA;AADA;AACA;AAFA;AACA;AAYA;AACA;AACA;AACA;AACA;AAjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgcA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAQA;AACA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAQA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;AChgBA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AADA;AADA;AAAA;AACA;AAKA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACnCA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AADA;AADA;AAAA;AACA;AAIA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpCA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAGA;AAGA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AAGA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAAA;AAMA;AACA;AAFA;AACA;AANA;AAKA;AALA;AAAA;AACA;AADA;AASA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvJA;AACA;AACA;AAEA;AACA;AAQA;AAQA;AAQA;AAkBA;AAiBA;AAkBA;AAUA;AAkBA;AAcA;AAUA;AAkBA;AAuCA;AAgBA;AAWA;AAgBA;AAcA;AAaA;AA0BA;AAgBA;AAeA;AAiBA;AAuBA;AAqBA;AAYA;AASA;AASA;AAcA;AAYA;AAQA;AAaA;AASA;AAoBA;AASA;AA2BA;AAoBA;AA2CA;AA8CA;AAqCA;AACA;AACA;AAkBA;AAqBA;AAUA;AAUA;AAuBA;AAyBA;AACA;AAEA;AACA;AACA;AACA;AACA;AAgDA;AA0CA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAIA;AACA;AADA;AADA;AACA;AAJA;AAGA;AAMA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAch5BA;AAEA;AAUA;AAUA;AAcA;AAUA;AAUA;AAYA;AA+CA;AA+DA;AAyCA;AAkCA;AAkCA;AAyDA;AAcA;AAQA;AAYA;AAuDA;AAQA;AAQA;AA+DA;AAQA;AAYA;AAcA;AAwEA;AAuDA;AAeA;AAUA;AAUA;AAUA;AAUA;AAcA;AA0BA;AASA;AAeA;AAgBA;AAgBA;AAUA;AAWA;AAWA;AAUA;AAUA;AAeA;AAyBA;AA8BA;AAcA;AAcA;AAUA;AAUA;AAcA;AAeA;AAgBA;AAUA;AACA;AAiBA;AAWA;AAUA;AAWA;AAUA;AASA;AAWA;AAUA;AAWA;AAQA;AAqBA;AAUA;AAmBA;AAcA;AAYA;AAWA;AAUA;AAqBA;AAwBA;AAkBA;AAwBA;AAQA;AAeA;AAUA;AAUA;AAUA;AAUA;AAUA;AAUA;AAUA;AAUA;AAUA;AACA;;;;;;;;;;;;;;;;;;;;;;ACh7CA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AACA;AAdA;AACA;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AACA;AACA;AAFA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AAFA;AAzCA;AA+CA;AACA;AAKA;AANA;AACA;AAUA;AACA;AACA;AACA;AACA;AAFA;AACA;AAHA;AAQA;AADA;AAPA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AADA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAGA;AACA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjLA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;AClCA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}