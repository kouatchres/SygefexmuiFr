{"version":3,"file":"static\\development\\pages\\show\\results\\centerResults.js","sources":["webpack:///webpack/bootstrap","webpack:///./pages/show/results/centerResults.jsx","webpack:///./src/components/queries&Mutations&Functions/Queries.jsx","webpack:///./src/components/results/center/CompleteResultsList.jsx","webpack:///./src/components/utils/table/DataTable.jsx","webpack:///./src/components/utils/table/Icons/index.jsx","webpack:///./src/components/utils/table/Icons/sort/ascending/index.jsx","webpack:///./src/components/utils/table/Icons/sort/descending/index.jsx","webpack:///./src/components/utils/table/tr/index.jsx","webpack:///./src/components/utils/table/ui/SygefexText.jsx","webpack:///external \"@apollo/react-hooks\"","webpack:///external \"@babel/runtime/regenerator\"","webpack:///external \"graphql-tag\"","webpack:///external \"next/link\"","webpack:///external \"react\"","webpack:///external \"styled-components\""],"sourcesContent":[" \t// The module cache\n \tvar installedModules = require('../../../../../ssr-module-cache.js');\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 4);\n","import React from \"react\";\r\nimport CompleteResultsList from \"../../../src/components/results/center/CompleteResultsList\";\r\n\r\nconst centerResults = ({ query }) => {\r\n  return (\r\n    <div>\r\n      <CompleteResultsList id={query.id} />\r\n    </div>\r\n  );\r\n};\r\nexport default centerResults;\r\n","import gql from \"graphql-tag\";\r\n\r\nconst currentUserQuery = gql`\r\n  query currentUserQuery {\r\n    me {\r\n      id\r\n      email\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleEducationTypeQuery = gql`\r\n  query singleEducationTypeQuery($id: ID!) {\r\n    educationType(id: $id) {\r\n      educationTypeName\r\n      educationTypeCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCESExaminerQuery = gql`\r\n  query getCESExaminerQuery(\r\n    $examiner: ExaminerWhereUniqueInput!\r\n    $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n  ) {\r\n    getCenterExamSessionExaminers(\r\n      examiner: $examiner\r\n      centerExamSession: $centerExamSession\r\n    ) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllEducationTypesQuery = gql`\r\n  query getAllEducationTypesQuery {\r\n    educationTypes(orderBy: educationTypeName_ASC) {\r\n      id\r\n      educationTypeName\r\n      educationTypeCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllRegionsQuery = gql`\r\n  query getAllRegionsQuery {\r\n    regions(orderBy: regName_ASC) {\r\n      regName\r\n      regCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllUsersQuery = gql`\r\n  query getAllUsersQuery {\r\n    users(orderBy: name_ASC) {\r\n      name\r\n      email\r\n      id\r\n      password\r\n      resetToken\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCenterResultsQuery = gql`\r\n  query getCenterResultsQuery(\r\n    $exam: ExamWhereUniqueInput!\r\n    $center: CenterWhereUniqueInput!\r\n    $session: SessionWhereUniqueInput!\r\n  ) {\r\n    getResultsPerCenter(exam: $exam, center: $center, session: $session) {\r\n      id\r\n      candidate {\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        placeOfBirth\r\n        email\r\n        user {\r\n          id\r\n        }\r\n        dateOfBirth\r\n        user {\r\n          id\r\n        }\r\n        gender\r\n      }\r\n      exam {\r\n        examName\r\n      }\r\n      session {\r\n        sessionName\r\n      }\r\n      center {\r\n        centerName\r\n      }\r\n      scores {\r\n        subjectAve\r\n        coeff\r\n        subjectSpecialty {\r\n          subjectName\r\n          specialty {\r\n            id\r\n            specialtyName\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateResultsQuery = gql`\r\n  query getCandidateResultsQuery($id: ID!) {\r\n    registration(id: $id) {\r\n      id\r\n      createdAt\r\n      candRegistrationNumber\r\n\r\n      candidate {\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        momName\r\n        dadName\r\n        placeOfBirth\r\n        image\r\n        email\r\n        user {\r\n          id\r\n        }\r\n        dateOfBirth\r\n        gender\r\n      }\r\n      centerExamSessionSpecialty {\r\n        centerExamSession {\r\n          id\r\n          examSession {\r\n            id\r\n            exam {\r\n              id\r\n              examName\r\n            }\r\n            session {\r\n              id\r\n              sessionName\r\n            }\r\n          }\r\n          center {\r\n            id\r\n            centerName\r\n          }\r\n        }\r\n        specialty {\r\n          id\r\n          specialtyName\r\n        }\r\n      }\r\n      scores(orderBy: subjectName_ASC) {\r\n        id\r\n        subjectAve\r\n        subjectName\r\n        coeff\r\n        subjectSpecialty {\r\n          id\r\n          subject {\r\n            id\r\n            subjectName\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getExaminerRegistrationQuery = gql`\r\n  query getExaminerRegistrationQuery($id: ID!) {\r\n    centerExamSessionExaminer(id: $id) {\r\n      id\r\n      examiner {\r\n        examiner1stName\r\n        examiner2ndName\r\n        examinerOtherNames\r\n        examinerMatricule\r\n        examinerPhone\r\n        examinerCNI\r\n        examinerImage\r\n        examinerEmail\r\n        gender\r\n      }\r\n      centerExamSession {\r\n        id\r\n        examSession {\r\n          id\r\n          exam {\r\n            id\r\n            examName\r\n          }\r\n          session {\r\n            id\r\n            sessionName\r\n          }\r\n        }\r\n        center {\r\n          id\r\n          centerName\r\n        }\r\n      }\r\n      phaseRank {\r\n        id\r\n        rankName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCenterResultsQuery = gql`\r\n  query getAllCenterResultsQuery($centerExamSession: String!) {\r\n    centerExamSessionSpecialtyForResults(\r\n      centerExamSession: $centerExamSession\r\n    ) {\r\n      id\r\n      specialty {\r\n        id\r\n        specialtyName\r\n        subjectSpecialty {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n      registration {\r\n        id\r\n        candidate {\r\n          cand1stName\r\n          id\r\n        }\r\n        scores {\r\n          id\r\n          subjectAve\r\n          coeff\r\n          subjectSpecialty {\r\n            id\r\n            subjectName\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getEachCandidateResultsQuery = gql`\r\n  query getEachCandidateResultsQuery($id: ID!) {\r\n    registration(id: $id) {\r\n      id\r\n      candidate {\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        momName\r\n        dadName\r\n        email\r\n        dateOfBirth\r\n        user {\r\n          id\r\n        }\r\n        gender\r\n      }\r\n      exam {\r\n        examName\r\n      }\r\n      session {\r\n        sessionName\r\n      }\r\n      specialty {\r\n        id\r\n        specialtyName\r\n      }\r\n      center {\r\n        centerName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateRegistrationInfoQuery = gql`\r\n  query getCandidateRegistrationInfoQuery($id: ID!) {\r\n    registration(id: $id) {\r\n      id\r\n      aptitude\r\n      EPF1\r\n      EPF2\r\n      candExamSecretCode\r\n      createdAt\r\n      candRegistrationNumber\r\n      candidate {\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        image\r\n        email\r\n        candCode\r\n        dateOfBirth\r\n        placeOfBirth\r\n        gender\r\n      }\r\n      centerExamSessionSpecialty {\r\n        id\r\n        specialty {\r\n          id\r\n          specialtyName\r\n          subjectSpecialty {\r\n            coeff\r\n            subject {\r\n              id\r\n              subjectName\r\n              subjectCode\r\n            }\r\n          }\r\n        }\r\n        centerExamSession {\r\n          center {\r\n            id\r\n            centerName\r\n          }\r\n          examSession {\r\n            id\r\n            exam {\r\n              id\r\n              examName\r\n            }\r\n            session {\r\n              id\r\n              sessionName\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateRegistrationIDQuery = gql`\r\n  query getCandidateRegistrationIDQuery(\r\n    $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n    $candidate: CandidateWhereUniqueInput!\r\n  ) {\r\n    candidateRegistrationID(\r\n      centerExamSession: $centerExamSession\r\n      candidate: $candidate\r\n    ) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateRegistrationIDsQuery = gql`\r\n  query getCandidateRegistrationIDsQuery($candidate: RegistrationWhereInput!) {\r\n    candidateRegistrationIDs(candidate: $candidate) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst registrationIDFromSecretCodeQuery = gql`\r\n  query registrationIDFromSecretCodeQuery($candExamSecretCode: String!) {\r\n    getRegistration(candExamSecretCode: $candExamSecretCode) {\r\n      id\r\n      specialty {\r\n        id\r\n        specialtyName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCandidateRegistrationIDsQuery = gql`\r\n  query getAllCandidateRegistrationIDsQuery($id: ID!) {\r\n    candidate(id: $id) {\r\n      id\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      placeOfBirth\r\n      dateOfBirth\r\n      image\r\n      momName\r\n      dadName\r\n      email\r\n      user {\r\n        id\r\n      }\r\n      gender\r\n      registration {\r\n        id\r\n\r\n        centerExamSessionSpecialty {\r\n          id\r\n          specialty {\r\n            id\r\n            specialtyName\r\n          }\r\n          centerExamSession {\r\n            center {\r\n              id\r\n              centerName\r\n            }\r\n            examSession {\r\n              id\r\n              exam {\r\n                id\r\n                examName\r\n              }\r\n              session {\r\n                id\r\n                sessionName\r\n              }\r\n            }\r\n          }\r\n        }\r\n        scores {\r\n          id\r\n          subjectAve\r\n          coeff\r\n        }\r\n      }\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateIDQuery = gql`\r\n  query getCandidateIDQuery($candCode: String!) {\r\n    candidateCode(candCode: $candCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getExaminerIDQuery = gql`\r\n  query getExaminerIDQuery($examinerCode: String!) {\r\n    examinerByCode(examinerCode: $examinerCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getRegistrationIDFromRegNumberQuery = gql`\r\n  query getRegistrationIDFromRegNumberQuery($candRegistrationNumber: String!) {\r\n    candidateRegistrationNumber(\r\n      candRegistrationNumber: $candRegistrationNumber\r\n    ) {\r\n      id\r\n      candidate {\r\n        id\r\n        cand1stName\r\n        cand2ndName\r\n        cand3rdName\r\n        placeOfBirth\r\n        dateOfBirth\r\n        image\r\n        momName\r\n        dadName\r\n        email\r\n        user {\r\n          id\r\n        }\r\n        gender\r\n        registration {\r\n          id\r\n\r\n          centerExamSessionSpecialty {\r\n            id\r\n            specialty {\r\n              id\r\n              specialtyName\r\n            }\r\n            centerExamSession {\r\n              center {\r\n                id\r\n                centerName\r\n              }\r\n              examSession {\r\n                id\r\n                exam {\r\n                  id\r\n                  examName\r\n                }\r\n                session {\r\n                  id\r\n                  sessionName\r\n                }\r\n              }\r\n            }\r\n          }\r\n          scores {\r\n            id\r\n            subjectAve\r\n            coeff\r\n            subjectSpecialty {\r\n              id\r\n              subjectName\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCenterIDFromCenterCodeQuery = gql`\r\n  query getCenterIDFromCenterCodeQuery($centerSecretCode: String!) {\r\n    getCenterByCode(centerSecretCode: $centerSecretCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCenterRegistrationIDsQuery = gql`\r\n  query getCenterRegistrationIDsQuery(\r\n    $exam: ExamWhereUniqueInput!\r\n    $center: CenterWhereUniqueInput!\r\n    $session: SessionWhereUniqueInput!\r\n  ) {\r\n    centerRegistrationIDs(exam: $exam, center: $center, session: $session) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst centerExamSessionSpecialtyForResultsQuery = gql`\r\n  query centerExamSessionSpecialtyForResultsQuery($centerExamSession: String!) {\r\n    centerExamSessionSpecialtyForResults(\r\n      centerExamSession: $centerExamSession\r\n    ) {\r\n      id\r\n      specialty {\r\n        id\r\n        specialtyName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst centerExamSessionForResultsQuery = gql`\r\n  query centerExamSessionForResultsQuery($id: ID!) {\r\n    centerExamSession(id: $id) {\r\n      id\r\n      center {\r\n        id\r\n        centerName\r\n      }\r\n      examSession {\r\n        id\r\n        exam {\r\n          examName\r\n          id\r\n        }\r\n        session {\r\n          id\r\n          sessionName\r\n        }\r\n      }\r\n      registration {\r\n        id\r\n        EPF1\r\n        EPF2\r\n        centerExamSession {\r\n          id\r\n          center {\r\n            id\r\n            centerName\r\n          }\r\n          examSession {\r\n            id\r\n            exam {\r\n              examName\r\n              id\r\n            }\r\n            session {\r\n              id\r\n              sessionName\r\n            }\r\n          }\r\n        }\r\n        candRegistrationNumber\r\n        candExamSecretCode\r\n        aptitude\r\n        candidate {\r\n          id\r\n          cand1stName\r\n          cand2ndName\r\n          cand3rdName\r\n          dateOfBirth\r\n          placeOfBirth\r\n          email\r\n          phoneNumb\r\n          user {\r\n            id\r\n          }\r\n          gender\r\n        }\r\n        specialty {\r\n          id\r\n          specialtyName\r\n          specialtyCode\r\n        }\r\n        scores {\r\n          id\r\n          subjectAve\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst centerExamSessionSpecialtyResultsQuery = gql`\r\n  query centerExamSessionSpecialtyResultsQuery($id: ID!) {\r\n    centerExamSessionSpecialty(id: $id) {\r\n      id\r\n      centerExamSession {\r\n        id\r\n        center {\r\n          id\r\n          centerName\r\n          centerCode\r\n        }\r\n        examSession {\r\n          exam {\r\n            id\r\n            examName\r\n          }\r\n          session {\r\n            id\r\n            sessionName\r\n          }\r\n        }\r\n      }\r\n\r\n      specialty {\r\n        id\r\n        specialtyName\r\n        specialtyCode\r\n      }\r\n      registration {\r\n        id\r\n        candRegistrationNumber\r\n        candExamSecretCode\r\n        candidate {\r\n          id\r\n          cand1stName\r\n          cand2ndName\r\n          cand3rdName\r\n          dateOfBirth\r\n          placeOfBirth\r\n          email\r\n          phoneNumb\r\n          user {\r\n            id\r\n          }\r\n          gender\r\n        }\r\n        scores {\r\n          id\r\n          subjectAve\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCandidateByCandCodeQuery = gql`\r\n  query getCandidateByCandCodeQuery($candCode: String!) {\r\n    getCandidateByCode(candCode: $candCode) {\r\n      id\r\n      cand1stName\r\n      candCode\r\n      dateOfBirth\r\n      placeOfBirth\r\n      user {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllRanksQuery = gql`\r\n  query getAllRanksQuery {\r\n    ranks(orderBy: rankName_ASC) {\r\n      rankName\r\n      rankCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllPhasesQuery = gql`\r\n  query getAllPhasesQuery {\r\n    phases(orderBy: phaseName_ASC) {\r\n      phaseName\r\n      phaseCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubjectsQuery = gql`\r\n  query getAllSubjectsQuery {\r\n    subjects(orderBy: subjectName_ASC) {\r\n      subjectName\r\n      subjectCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubjectGroupsQuery = gql`\r\n  query getAllSubjectGroupsQuery {\r\n    subjectGroups(orderBy: subjectGroupName_ASC) {\r\n      subjectGroupName\r\n      subjectGroupCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSpecialtiesOfAnEducationTypeQuery = gql`\r\n  query getAllSpecialtiesOfAnEducationTypeQuery($id: ID!) {\r\n    educationType(id: $id) {\r\n      id\r\n      educationTypeName\r\n      specialty {\r\n        id\r\n        specialtyName\r\n        specialtyCode\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSpecialtiesOfACenterExamSessionQuery = gql`\r\n  query getAllSpecialtiesOfACenterExamSessionQuery($id: ID!) {\r\n    centerExamSession(id: $id) {\r\n      id\r\n      centerExamSessionSpecialty {\r\n        id\r\n        registration {\r\n          candRegistrationNumber\r\n          id\r\n          candidate {\r\n            id\r\n            cand1stName\r\n            cand2ndName\r\n            cand3rdName\r\n          }\r\n        }\r\n        specialty {\r\n          id\r\n          specialtyName\r\n          specialtyCode\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSpecialtiesQuery = gql`\r\n  query getAllSpecialtiesQuery {\r\n    specialties(orderBy: specialtyName_ASC) {\r\n      id\r\n      specialtyName\r\n      specialtyCode\r\n    }\r\n  }\r\n`;\r\nconst getAllSubjectsOfAnEducTypeQuery = gql`\r\n  query getAllSubjectsOfAnEducTypeQuery($id: ID!) {\r\n    educationType(id: $id) {\r\n      id\r\n      educationTypeName\r\n      subject(orderBy: subjectName_ASC) {\r\n        id\r\n        subjectName\r\n        subjectCode\r\n        subjectType\r\n        subjectGroup\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getAllSubjectsWithEducTypesQuery = gql`\r\n  query getAllSubjectsWithEducTypesQuery {\r\n    subjects(orderBy: subjectName_ASC) {\r\n      id\r\n      subjectName\r\n      subjectCode\r\n      subjectType\r\n      subjectGroup\r\n      subjectSpecialty {\r\n        specialty {\r\n          specialtyName\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getAllSubjectSpecialtiesOfASpecialtyQuery = gql`\r\n  query getAllSubjectSpecialtiesOfASpecialtyQuery($id: ID!) {\r\n    specialty(id: $id) {\r\n      id\r\n      subjectSpecialty {\r\n        id\r\n        subject {\r\n          id\r\n          subjectName\r\n          subjectCode\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllExamsQuery = gql`\r\n  query getAllExamsQuery {\r\n    exams(orderBy: examName_ASC) {\r\n      examName\r\n      examCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllGroup2Query = gql`\r\n  query getAllGroup2Query($educType: EducationTypeWhereUniqueInput!) {\r\n    group2Subjects(educType: $educType, orderBy: subjectName_ASC) {\r\n      subjectName\r\n      subjectCode\r\n      subjectGroup\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllGroup1Query = gql`\r\n  query getAllGroup1Query($educType: EducationTypeWhereUniqueInput!) {\r\n    group1Subjects(educType: $educType, orderBy: subjectName_ASC) {\r\n      subjectName\r\n      subjectCode\r\n      subjectGroup\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSessionsQuery = gql`\r\n  query getAllSessionsQuery {\r\n    sessions(orderBy: createdAt_DESC) {\r\n      sessionName\r\n      sessionCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllDivisionsQuery = gql`\r\n  query getAllDivisionsQuery {\r\n    divisions(orderBy: divName_ASC) {\r\n      divName\r\n      divCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllRegionsAndDivisionsQuery = gql`\r\n  query getAllRegionsAndDivisionsQuery {\r\n    regions {\r\n      id\r\n      regName\r\n      regCode\r\n      division(orderBy: divName_ASC) {\r\n        divName\r\n        divCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllRegionsDivisionsAndTownsQuery = gql`\r\n  query getAllRegionsDivisionsAndTownsQuery {\r\n    regions {\r\n      id\r\n      regName\r\n      regCode\r\n      division(orderBy: divName_ASC) {\r\n        divName\r\n        divCode\r\n        id\r\n        subDivision {\r\n          town(orderBy: townName_ASC) {\r\n            id\r\n            townName\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nconst getDivisionsOfARegionQuery = gql`\r\n  query getDivisionsOfARegionQuery($id: ID!) {\r\n    region(id: $id) {\r\n      regName\r\n      id\r\n      division(orderBy: divName_ASC) {\r\n        divName\r\n        divCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSubDivisionsOfADivisionQuery = gql`\r\n  query getSubDivisionsOfADivisionQuery($id: ID!) {\r\n    division(id: $id) {\r\n      divName\r\n      id\r\n      subDivision(orderBy: subDivName_ASC) {\r\n        subDivName\r\n        subDivCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllSubDivisionsQuery = gql`\r\n  query getAllSubDivisionsQuery {\r\n    subDivision(orderBy: subDivName_ASC) {\r\n      subDivName\r\n      subDivCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllTownsQuery = gql`\r\n  query getAllTownsQuery {\r\n    towns(orderBy: townName_ASC) {\r\n      townName\r\n      townCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getTownsOfASubDivisionQuery = gql`\r\n  query getTownsOfASubDivision($id: ID!) {\r\n    subDivision(id: $id) {\r\n      subDivName\r\n      id\r\n      town(orderBy: townName_ASC) {\r\n        townName\r\n        townCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCentersOfATownQuery = gql`\r\n  query getCentersOfATownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      id\r\n      center(orderBy: centerName_ASC) {\r\n        centerName\r\n        centerCode\r\n        centerNumber\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst centersPerTownQuery = gql`\r\n  query centersPerTownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      id\r\n      center(orderBy: centerName_ASC) {\r\n        centerName\r\n        centerNumber\r\n        centerSecretCode\r\n        centerCode\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCentersQuery = gql`\r\n  query getAllCentersQuery {\r\n    centers(orderBy: centerName_ASC) {\r\n      id\r\n      centerName\r\n      centerCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllCandidatesQuery = gql`\r\n  query getAllCandidatesQuery {\r\n    candidates(orderBy: cand1stName_ASC) {\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      candCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\n///*****************Single object queries */\r\n\r\nconst singleCenterQuery = gql`\r\n  query singleCenterQuery($id: ID!) {\r\n    center(id: $id) {\r\n      centerName\r\n      centerNumber\r\n      centerCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleCenterQuery = gql`\r\n  query getSingleCenterQuery($centerNumber: Int!) {\r\n    centerByNumber(centerNumber: $centerNumber) {\r\n      id\r\n      centerNumber\r\n      centerCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleCenterFromCenterSecretCodeQuery = gql`\r\n  query getSingleCenterFromCenterSecretCodeQuery($CESCode: String!) {\r\n    centerBySecretCode(CESCode: $CESCode) {\r\n      id\r\n      CESCode\r\n      centerName\r\n      centerCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleProfQuery = gql`\r\n  query getSingleProfQuery($authCode: String!) {\r\n    profByAuthCode(authCode: $authCode) {\r\n      authCode\r\n      id\r\n      auth1stName\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleCenterByCodeQuery = gql`\r\n  query getSingleCenterByCodeQuery($centerSecretCode: String!) {\r\n    getCenterByCode(centerSecretCode: $centerSecretCode) {\r\n      id\r\n      centerCode\r\n    }\r\n  }\r\n`;\r\n\r\nconst getASingleCenterQuery = gql`\r\n  query getASingleCenterQuery($centerNumber: Int!) {\r\n    centerByNumber(centerNumber: $centerNumber) {\r\n      centerNumber\r\n      centerName\r\n      centerCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleTownQuery = gql`\r\n  query singleTownQuery($id: ID!) {\r\n    town(id: $id) {\r\n      townName\r\n      townCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleCenterExamSessionQuery = gql`\r\n  query getSingleCenterExamSessionQuery(\r\n    $center: CenterWhereUniqueInput!\r\n    $examSession: ExamSessionWhereUniqueInput!\r\n  ) {\r\n    centerExamSessionsByCode(examSession: $examSession, center: $center) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleCenterExamSessionBySecretCodeQuery = gql`\r\n  query getSingleCenterExamSessionBySecretCodeQuery($CESCode: String!) {\r\n    centerExamSessionBySecretCode(CESCode: $CESCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getAllRanksOfAnExamPhaseQuery = gql`\r\n  query getAllRanksOfAnExamPhaseQuery($id: ID!) {\r\n    phase(id: $id) {\r\n      id\r\n      phaseRank {\r\n        id\r\n        rank {\r\n          id\r\n          rankName\r\n          rankCode\r\n        }\r\n        phase {\r\n          id\r\n          phaseName\r\n          phaseCode\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getRegisteredCandidateCountQuery = gql`\r\n  query getRegisteredCandidateCountQuery($id: ID!) {\r\n    registrationsConnection(id: $id) {\r\n      aggregate {\r\n        count\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getRegisteredCandidatesPerSpecialty = gql`\r\n  query getRegisteredCandidatesPerSpecialty($id: ID!) {\r\n    centerExamSessionSpecialty(id: $id) {\r\n      id\r\n      registration {\r\n        candRegistrationNumber\r\n        id\r\n        candExamSecretCode\r\n        candidate {\r\n          id\r\n          cand1stName\r\n          cand2ndName\r\n          cand3rdName\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getCenterExamSessionSpecialtyQuery = gql`\r\n  query getCenterExamSessionSpecialtyQuery(\r\n    $centerExamSession: CenterExamSessionWhereUniqueInput!\r\n    $specialty: SpecialtyWhereUniqueInput!\r\n  ) {\r\n    centerExamSessionSpecialties(\r\n      centerExamSession: $centerExamSession\r\n      specialty: $specialty\r\n    ) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSpecialtyFromCESSQuery = gql`\r\n  query getSpecialtyFromCESSQuery($id: ID!) {\r\n    centerExamSessionSpecialty(id: $id) {\r\n      id\r\n      specialty {\r\n        id\r\n        specialtyName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst getExamSessionQuery = gql`\r\n  query getExamSessionQuery(\r\n    $exam: ExamWhereUniqueInput!\r\n    $session: SessionWhereUniqueInput!\r\n  ) {\r\n    examSessions(session: $session, exam: $exam) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleExamQuery = gql`\r\n  query singleExamQuery($id: ID!) {\r\n    exam(id: $id) {\r\n      examName\r\n      examCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCandidateQuery1 = gql`\r\n  query singleCandidateQuery1($id: ID!) {\r\n    candidate(id: $id) {\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      dadName\r\n      momName\r\n      candCode\r\n      email\r\n      image\r\n      phoneNumb\r\n      placeOfBirth\r\n      user {\r\n        id\r\n      }\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleCandidateQuery = gql`\r\n  query singleCandidateQuery($id: ID!) {\r\n    candidate(id: $id) {\r\n      id\r\n      dateOfBirth\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      candCode\r\n      dadName\r\n      momName\r\n      email\r\n      image\r\n      phoneNumb\r\n      birthCertNumber\r\n      placeOfBirth\r\n      user {\r\n        id\r\n      }\r\n      gender\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleExaminerQuery = gql`\r\n  query singleExaminerQuery($id: ID!) {\r\n    examiner(id: $id) {\r\n      id\r\n      examiner1stName\r\n      examiner2ndName\r\n      examinerOtherNames\r\n      examinerCode\r\n      examinerEmail\r\n      gender\r\n      examinerImage\r\n      examinerPhone\r\n      examinerMatricule\r\n      examinerCNI\r\n    }\r\n  }\r\n`;\r\n\r\nconst viewSingleCandidateQuery = gql`\r\n  query viewSingleCandidateQuery($candCode: String!) {\r\n    singleCandidate(candCode: $candCode) {\r\n      id\r\n      dateOfBirth\r\n      cand1stName\r\n      cand2ndName\r\n      cand3rdName\r\n      candCode\r\n      momName\r\n      dadName\r\n      email\r\n      image\r\n      phoneNumb\r\n      birthCertNumber\r\n      placeOfBirth\r\n      user {\r\n        id\r\n      }\r\n      gender\r\n    }\r\n  }\r\n`;\r\n\r\nconst getScoreID = gql`\r\n  query getScoreID($candExamSecretCode: String!) {\r\n    scores(candExamSecretCode: $candExamSecretCode) {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getRegistrations = gql`\r\n  query getRegistrations($candExamSecretCode: String!) {\r\n    registration(candExamSecretCode: $candExamSecretCode) {\r\n      id\r\n      scores {\r\n        id\r\n        subject(orderBy: subjectName_ASC) {\r\n          id\r\n          subjectName\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSubDivisionQuery = gql`\r\n  query singleSubDivisionQuery($id: ID!) {\r\n    subDivision(id: $id) {\r\n      subDivName\r\n      subDivCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst getSingleRegionQuery = gql`\r\n  query getSingleRegionQuery($id: ID!) {\r\n    region(id: $id) {\r\n      regName\r\n      regCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singlePhaseQuery = gql`\r\n  query singlePhaseQuery($id: ID!) {\r\n    phase(id: $id) {\r\n      phaseName\r\n      phaseCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSpecialtyQuery = gql`\r\n  query singleSpecialtyQuery($id: ID!) {\r\n    specialty(id: $id) {\r\n      specialtyName\r\n      specialtyCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst dataForAverage = gql`\r\n  query dataForAverage($candExamSecretCode: String!) {\r\n    scores(candExamSecretCode: $candExamSecretCode) {\r\n      id\r\n      subjectAve\r\n      coeff\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleDivisionQuery = gql`\r\n  query singleDivisionQuery($id: ID!) {\r\n    division(id: $id) {\r\n      divName\r\n      divCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleRankQuery = gql`\r\n  query singleRankQuery($id: ID!) {\r\n    rank(id: $id) {\r\n      rankName\r\n      rankCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSubjectQuery = gql`\r\n  query singleSubjectQuery($id: ID!) {\r\n    subject(id: $id) {\r\n      subjectName\r\n      subjectCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSubjectGroupQuery = gql`\r\n  query singleSubjectGroupQuery($id: ID!) {\r\n    subjectGroup(id: $id) {\r\n      subjectGroupName\r\n      subjectGroupCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst singleSessionQuery = gql`\r\n  query singleSessionQuery($id: ID!) {\r\n    session(id: $id) {\r\n      sessionName\r\n      sessionCode\r\n      id\r\n    }\r\n  }\r\n`;\r\n///*****************End Single object queries */\r\n\r\nexport {\r\n  getAllSubjectSpecialtiesOfASpecialtyQuery,\r\n  getAllSpecialtiesOfAnEducationTypeQuery,\r\n  getAllExamsQuery,\r\n  getAllSessionsQuery,\r\n  getDivisionsOfARegionQuery,\r\n  getAllDivisionsQuery,\r\n  getSubDivisionsOfADivisionQuery,\r\n  getTownsOfASubDivisionQuery,\r\n  getCentersOfATownQuery,\r\n  getAllEducationTypesQuery,\r\n  getAllRanksQuery,\r\n  getAllCandidatesQuery,\r\n  getAllCentersQuery,\r\n  getSingleRegionQuery,\r\n  getAllSpecialtiesQuery,\r\n  getAllSubDivisionsQuery,\r\n  getAllSubjectsOfAnEducTypeQuery,\r\n  getScoreID,\r\n  singleSpecialtyQuery,\r\n  getRegistrations,\r\n  singleSubjectQuery,\r\n  singleCandidateQuery1,\r\n  getAllSubjectsWithEducTypesQuery,\r\n  singleCandidateQuery,\r\n  viewSingleCandidateQuery,\r\n  singleCenterQuery,\r\n  singleExamQuery,\r\n  singleTownQuery,\r\n  getAllCenterResultsQuery,\r\n  singleSessionQuery,\r\n  singleDivisionQuery,\r\n  singleSubDivisionQuery,\r\n  singleEducationTypeQuery,\r\n  singleRankQuery,\r\n  centerExamSessionSpecialtyForResultsQuery,\r\n  getAllCandidateRegistrationIDsQuery,\r\n  getCenterExamSessionSpecialtyQuery,\r\n  getExamSessionQuery,\r\n  getAllSpecialtiesOfACenterExamSessionQuery,\r\n  getCenterResultsQuery,\r\n  getCandidateRegistrationIDQuery,\r\n  registrationIDFromSecretCodeQuery,\r\n  getCandidateRegistrationIDsQuery,\r\n  centerExamSessionForResultsQuery,\r\n  getCandidateIDQuery,\r\n  getASingleCenterQuery,\r\n  getRegisteredCandidateCountQuery,\r\n  centersPerTownQuery,\r\n  getSingleCenterQuery,\r\n  getCandidateResultsQuery,\r\n  getCenterRegistrationIDsQuery,\r\n  getCandidateByCandCodeQuery,\r\n  getSingleCenterExamSessionQuery,\r\n  getEachCandidateResultsQuery,\r\n  getCenterIDFromCenterCodeQuery,\r\n  getRegistrationIDFromRegNumberQuery,\r\n  centerExamSessionSpecialtyResultsQuery,\r\n  dataForAverage,\r\n  getAllPhasesQuery,\r\n  getAllRegionsQuery,\r\n  getAllUsersQuery,\r\n  singleExaminerQuery,\r\n  getAllRegionsDivisionsAndTownsQuery,\r\n  getCandidateRegistrationInfoQuery,\r\n  getCESExaminerQuery,\r\n  getExaminerIDQuery,\r\n  getAllTownsQuery,\r\n  getSpecialtyFromCESSQuery,\r\n  getExaminerRegistrationQuery,\r\n  getSingleProfQuery,\r\n  getAllGroup1Query,\r\n  getAllSubjectsQuery,\r\n  getSingleCenterFromCenterSecretCodeQuery,\r\n  getSingleCenterExamSessionBySecretCodeQuery,\r\n  getAllGroup2Query,\r\n  singleSubjectGroupQuery,\r\n  getAllRegionsAndDivisionsQuery,\r\n  getRegisteredCandidatesPerSpecialty,\r\n  getAllSubjectGroupsQuery,\r\n  getAllRanksOfAnExamPhaseQuery,\r\n  currentUserQuery,\r\n  singlePhaseQuery,\r\n  getSingleCenterByCodeQuery,\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Link from \"next/link\";\r\nimport SygefexText from \"../../utils/table/ui/SygefexText\";\r\nimport DataTable from \"../../utils/table/DataTable\";\r\nimport Tr from \"../../utils/table/tr\";\r\nimport styled from \"styled-components\";\r\nimport { useApolloClient } from \"@apollo/react-hooks\";\r\nimport { centerExamSessionForResultsQuery } from \"../../queries&Mutations&Functions/Queries\";\r\n\r\nconst HeaderStyled = styled.tr`\r\n  display: grid;\r\n  grid-template-columns: 2fr 0.5fr 1fr 1fr 1fr 1fr 0.5fr;\r\n  td:nth-child(1) {\r\n    min-width: 8rem;\r\n  }\r\n\r\n  td:nth-child(2) {\r\n    min-width: 2rem;\r\n  }\r\n  td:nth-child(3) {\r\n    min-width: 5rem;\r\n  }\r\n  td:nth-child(4) {\r\n    min-width: 5rem;\r\n  }\r\n  td:nth-child(5) {\r\n    min-width: 5rem;\r\n  }\r\n  td:nth-child(6) {\r\n    min-width: 4rem;\r\n  }\r\n  td:nth-child(7) {\r\n    min-width: 2rem;\r\n  }\r\n`;\r\n\r\nconst RowStyled = styled.tr`\r\n  td:nth-child(1) {\r\n    min-width: 8rem;\r\n  }\r\n\r\n  td:nth-child(2) {\r\n    min-width: 2rem;\r\n  }\r\n  td:nth-child(3) {\r\n    min-width: 5rem;\r\n  }\r\n  td:nth-child(4) {\r\n    min-width: 5rem;\r\n  }\r\n  td:nth-child(5) {\r\n    min-width: 5rem;\r\n  }\r\n  td:nth-child(6) {\r\n    min-width: 4rem;\r\n  }\r\n  td:nth-child(7) {\r\n    min-width: 2rem;\r\n  }\r\n  display: grid;\r\n  grid-template-columns: 2fr 0.5fr 1fr 1fr 1fr 1fr 0.5fr;\r\n`;\r\n\r\nconst TablePresentation = styled.div`\r\n  margin: 0 auto;\r\n  display: grid;\r\n  min-width: 80rem;\r\n  grid-auto-flow: row;\r\n`;\r\n\r\nfunction pageData({ data, per = 2, page = 1 }) {\r\n  return data.slice(per * (page - 1), per * page);\r\n}\r\n\r\nconst searchableColumns = [\r\n  \"cand1stName\",\r\n  \"cand2ndName\",\r\n  \"cand3rdName\",\r\n  \"gender\",\r\n  \"specialtyCode\",\r\n  \"candRegistrationNumber\",\r\n];\r\n\r\nconst DivisionList = ({ id }) => {\r\n  const client = useApolloClient();\r\n\r\n  const [cand, setCand] = useState([]);\r\n  const [state, setState] = useState({\r\n    data: pageData({ data: cand && cand }),\r\n    loading: false,\r\n    page: 1,\r\n    sortedBy: null,\r\n  });\r\n  const [query, setQuery] = useState(\"\");\r\n  const [additionalData, setAdditionalData] = useState([]);\r\n\r\n  // const loadTitleData = async () => {\r\n  //   const { error, data } = await client.query({\r\n  //     query: centerExamSessionForResultsQuery,\r\n  //     variables: { id },\r\n  //   });\r\n  //   console.log(data);\r\n  //   const { centerExamSession } = { ...data };\r\n\r\n  //   setTitle({ centerExamSession });\r\n  // };\r\n\r\n  const loadCandScoreData = async () => {\r\n    const { error, data } = await client.query({\r\n      query: centerExamSessionForResultsQuery,\r\n      variables: { id },\r\n    });\r\n    console.log(data);\r\n    const { centerExamSession } = { ...data };\r\n    const { registration } = { ...centerExamSession };\r\n    const getCand =\r\n      registration &&\r\n      registration.map((item) => ({\r\n        candRegistrationNumber: item.candRegistrationNumber,\r\n        specialty: item.specialty.specialtyName,\r\n        specialtyCode: item.specialty.specialtyCode,\r\n        aptitude: item.aptitude,\r\n        EPF1: item.EPF1,\r\n        EPF2: item.EPF2,\r\n        ...item.candidate,\r\n      }));\r\n    console.log({ registration });\r\n    console.log({ getCand });\r\n    setState((prev) => ({ ...prev, data: getCand }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadCandScoreData();\r\n    // loadTitleData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!state.sortedBy) return;\r\n    const sortKey = Object.keys(state.sortedBy)[0];\r\n    const direction = state.sortedBy[sortKey];\r\n    setState((prev) => ({\r\n      ...prev,\r\n      data: prev.data.sort((a, b) => {\r\n        return direction === \"ascending\"\r\n          ? a[sortKey].localeCompare(b[sortKey])\r\n          : b[sortKey].localeCompare(a[sortKey]);\r\n      }),\r\n    }));\r\n  }, [state.sortedBy]);\r\n\r\n  useEffect(() => {\r\n    setState((prev) => ({\r\n      ...prev,\r\n      data: search(state.data),\r\n    }));\r\n  }, [query]);\r\n\r\n  const search = (data) => {\r\n    return (\r\n      data &&\r\n      data.filter((row) =>\r\n        searchableColumns.some(\r\n          (column) =>\r\n            row[column].toString().toLowerCase().indexOf(query.toLowerCase()) >\r\n            -1\r\n        )\r\n      )\r\n    );\r\n  };\r\n\r\n  const loadMore = () => {\r\n    if (state.loading) return;\r\n    setState((prev) => ({\r\n      ...prev,\r\n      loading: true,\r\n    }));\r\n\r\n    setState((prev) => ({\r\n      data: [...prev.data, ...pageData({ data: data, page: prev.page + 1 })],\r\n      loading: false,\r\n      page: prev.page + 1,\r\n    }));\r\n  };\r\n\r\n  const toggleAdditionalData = (row) => {\r\n    setAdditionalData((prev) =>\r\n      additionalData.includes(row.id)\r\n        ? prev.filter((id) => row.id !== id)\r\n        : [...prev, row.id]\r\n    );\r\n  };\r\n\r\n  return (\r\n    <TablePresentation>\r\n      <SygefexText\r\n        placeholder=\"Type here to filter results\"\r\n        value={query}\r\n        onChange={(val) => setQuery(val)}\r\n      />\r\n      <DataTable\r\n        loadMore={loadMore}\r\n        items={state.data}\r\n        renderHead={() => (\r\n          <RowStyled>\r\n            <Tr\r\n              label=\"No Inscription\"\r\n              sortedBy={state.sortedBy}\r\n              sort={{ key: \"candRegistrationNumber\", changer: setState }}\r\n            />\r\n            <Tr\r\n              label=\"Serie\"\r\n              sortedBy={state.sortedBy}\r\n              sort={{ key: \"specialtyCode\", changer: setState }}\r\n            />\r\n\r\n            <Tr\r\n              label=\"Prenom \"\r\n              sortedBy={state.sortedBy}\r\n              sort={{ key: \"cand1stName\", changer: setState }}\r\n            />\r\n            <Tr\r\n              label=\"Nom \"\r\n              sortedBy={state.sortedBy}\r\n              sort={{ key: \"cand2ndName\", changer: setState }}\r\n            />\r\n            <Tr\r\n              label=\"Autres Noms \"\r\n              sortedBy={state.sortedBy}\r\n              sort={{ key: \"cand3rdName\", changer: setState }}\r\n            />\r\n            <Tr\r\n              label=\"Sexe\"\r\n              sortedBy={state.sortedBy}\r\n              sort={{ key: \"gender\", changer: setState }}\r\n            />\r\n            <Tr\r\n              label=\"A/I\"\r\n              sortedBy={state.sortedBy}\r\n              sort={{ key: \"aptitude\", changer: setState }}\r\n            />\r\n          </RowStyled>\r\n        )}\r\n        renderRow={(row) => (\r\n          <HeaderStyled>\r\n            <td onClick={() => toggleAdditionalData(row)}>\r\n              <Link\r\n                href={{\r\n                  pathname: \"/show/results/candResults\",\r\n                  query: {id:row.id },\r\n                }}\r\n              >\r\n                <a target=\"_blank\">{row.candRegistrationNumber.substring(6)}</a>\r\n              </Link>\r\n            </td>\r\n            <td onClick={() => toggleAdditionalData(row)}>\r\n              {row.specialtyCode}\r\n            </td>\r\n            <td onClick={() => toggleAdditionalData(row)}>{row.cand1stName}</td>\r\n            <td onClick={() => toggleAdditionalData(row)}>{row.cand2ndName}</td>\r\n            <td onClick={() => toggleAdditionalData(row)}>{row.cand3rdName}</td>\r\n            <td onClick={() => toggleAdditionalData(row)}>{row.gender}</td>\r\n            <td onClick={() => toggleAdditionalData(row)}>{row.aptitude}</td>\r\n          </HeaderStyled>\r\n        )}\r\n      />\r\n    </TablePresentation>\r\n  );\r\n};\r\nexport default DivisionList;\r\n","import React, { useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst TableStyled = styled.table`\r\n  margin: 0 auto;\r\n  width: 60%;\r\n  box-sizing: border-box;\r\n  box-shadow: ${(props) => props.theme.formBS2};\r\n  justify-items: center;\r\n  border-radius: 0.9rem;\r\n  align-self: center;\r\n  border: 0;\r\n  margin-bottom: 2rem;\r\n  border-collapse: collapse;\r\n`;\r\n\r\nconst TBodyStyled = styled.tbody`\r\n  :hover {\r\n    cursor: pointer;\r\n  }\r\n  border-left: 0.1rem solid ${(props) => props.theme.pureWhite};\r\n  tr {\r\n    font-size: 1.4rem;\r\n\r\n    :nth-child(even) {\r\n      background: ${(props) => props.theme.warna};\r\n    }\r\n    :nth-child(odd) {\r\n      background: ${(props) => props.theme.tableLightBlue};\r\n    }\r\n\r\n    :last-child {\r\n      border-bottom-right-radius: 0.9rem;\r\n      border-bottom: 0.1rem solid ${(props) => props.theme.pureWhite};\r\n      border-bottom-left-radius: 0.9rem;\r\n    }\r\n\r\n    td {\r\n      border-collapse: collapse;\r\n      padding-left: 0.5rem;\r\n      padding-right: 0.5rem;\r\n      text-align: left;\r\n      border-top: 0.1rem solid ${(props) => props.theme.pureWhite};\r\n      :not(:last-child) {\r\n        border-right: 0.1rem solid ${(props) => props.theme.pureWhite};\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst THeadStyled = styled.thead`\r\n  padding: 1rem 0;\r\n  color: ${(props) => props.theme.pureWhite};\r\n  width: 100%;\r\n  font-size: 1.3rem;\r\n  th {\r\n    border-collapse:collapse;\r\n    border-top: 0.1rem solid ${(props) => props.theme.pureWhite};\r\n    border-right: 0.1rem solid ${(props) => props.theme.pureWhite};\r\n    text-align: left;\r\n    background: ${(props) => props.theme.darkRed};\r\n    padding: 0.5rem;\r\n     :not(:last-child) {\r\n        border-right: 0.1rem solid ${(props) => props.theme.pureWhite};\r\n      }\r\n    :last-child {\r\n      /* border-left: 0.1rem solid ${(props) => props.theme.pureWhite}; */\r\n      border-top-right-radius: 0.9rem;\r\n    }\r\n    :first-child {\r\n      border-left: 0.1rem solid ${(props) => props.theme.pureWhite};\r\n      border-top-left-radius: 0.9rem;\r\n    }\r\n  }\r\n`;\r\n\r\nconst RecordStyled = styled.tr`\r\n  border-collapse: collapse;\r\n  :last-child {\r\n    td:first-child {\r\n      border-bottom-left-radius: 0.9rem;\r\n    }\r\n    td:last-child {\r\n      border-bottom-right-radius: 0.9rem;\r\n    }\r\n  }\r\n`;\r\nconst FigureTable = styled.figure`\r\n  max-width: 98%;\r\n  overflow-x: scroll;\r\n`;\r\n\r\n// @media (max-width: 25rem) {\r\n//   table, caption, tbody, tr, th, td {\r\n//     display: block;\r\n//     text-align: left;\r\n//   }\r\n//   thead, th:empty, td:empty {\r\n//     display: none;\r\n//     visibility: hidden;\r\n//   }\r\n//   th[data-title]:before, td[data-title]:before {\r\n//     content: attr(data-title) \": \";\r\n//     display: inline-block;\r\n//     width: 3.5em;\r\n//   }\r\n// }\r\n\r\nconst DataTable = ({ items, renderHead, renderRow, loadMore }) => {\r\n  const ref = useRef(null);\r\n\r\n  const handleScroll = (e) => {\r\n    const cY = window.scrollY;\r\n    const tbh = ref.current.offsetHeight;\r\n    const thresh = 1000;\r\n    if (tbh - cY - thresh < 0) loadMore();\r\n  };\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"scroll\", handleScroll);\r\n    return () => {\r\n      document.removeEventListener(\"scroll\", handleScroll);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <FigureTable>\r\n      <TableStyled cellPadding={0} cellSpacing={0}>\r\n        <THeadStyled>\r\n          <RecordStyled>{renderHead()}</RecordStyled>\r\n        </THeadStyled>\r\n\r\n        <TBodyStyled ref={ref}>\r\n          {items.map((row) => renderRow(row))}\r\n        </TBodyStyled>\r\n      </TableStyled>\r\n    </FigureTable>\r\n  );\r\n};\r\n\r\nexport default DataTable;\r\n","import React from \"react\";\r\n\r\nconst Icon = ({ children, active = false, size = 20, onClick }) => {\r\n  return (\r\n    <svg\r\n      onClick={onClick}\r\n      style={{ height: size, width: size }}\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      fill={active ? \"black\" : \"white\"}\r\n      viewBox=\"0 0 24 24\"\r\n      stroke={active ? \"blue\" : \"white\"}\r\n    >\r\n      {children}\r\n    </svg>\r\n  );\r\n};\r\n\r\nexport default Icon;\r\n","import React from \"react\";\r\nimport Icon from \"../../../Icons\";\r\n\r\nconst AscendingIcon = ({ active, onClick }) => {\r\n  return (\r\n    <Icon active={active} onClick={onClick}>\r\n      <path\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        strokeWidth=\"2\"\r\n        d=\"M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12\"\r\n      ></path>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default AscendingIcon;\r\n","import React from \"react\";\r\nimport Icon from \"../../../Icons\";\r\n\r\nconst DescendingIcon = ({ active, onClick }) => {\r\n  return (\r\n    <Icon active={active} onClick={onClick}>\r\n      <path\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        strokeWidth=\"2\"\r\n        d=\"M3 4h13M3 8h9m-9 4h9m5-4v12m0 0l-4-4m4 4l4-4\"\r\n      ></path>\r\n    </Icon>\r\n  );\r\n};\r\n\r\nexport default DescendingIcon;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport AscIcon from \"../Icons/sort/ascending\";\r\nimport DesIcon from \"../Icons/sort/descending\";\r\n\r\nconst TitleStyled = styled.th`\r\n  display: grid;\r\n  /* grid-template-columns: 3fr 1fr;\r\n  grid-gap: 1rem; */\r\n  justify-items: center;\r\n`;\r\n\r\nconst Tr = ({ label, sort, sortedBy, sortField }) => {\r\n  const changeSortDirection = (direction) => {\r\n    sort.changer((prev) => ({\r\n      ...prev,\r\n      sortedBy: {\r\n        [sort.key]: direction,\r\n      },\r\n    }));\r\n  };\r\n\r\n  const ColumnHeader = styled.div`\r\n    text-align: right;\r\n  `;\r\n  const LabelHeader = styled.div`\r\n    text-align: left;\r\n  `;\r\n\r\n  return (\r\n    <TitleStyled>\r\n      <LabelHeader>{label} </LabelHeader>\r\n      {sort ? (\r\n        <ColumnHeader>\r\n          {sortedBy && sortedBy[sort.key] === \"ascending\" ? (\r\n            <AscIcon\r\n              active={sortedBy && sortedBy[sort.key] === \"ascending\"}\r\n              onClick={() => changeSortDirection(\"descending\")}\r\n            />\r\n          ) : (\r\n            <DesIcon\r\n              active={sortedBy && sortedBy[sort.key] === \"descending\"}\r\n              onClick={() => changeSortDirection(\"ascending\")}\r\n            />\r\n          )}\r\n        </ColumnHeader>\r\n      ) : null}\r\n    </TitleStyled>\r\n  );\r\n};\r\n\r\nexport default Tr;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst StyledTextField = styled.input`\r\n  padding: 0.5rem;\r\n  border-radius: 0.8rem;\r\n  font-size: 1.5rem;\r\n  box-sizing: border-box;\r\n  margin: 1rem auto;\r\n  border: 0.2rem solid ${(props) => props.theme.grey};\r\n`;\r\n\r\nconst SygefexText = ({ value, onChange, label, placeholder }) => {\r\n  return (\r\n    <StyledTextField\r\n      type=\"text\"\r\n      value={value}\r\n      placeholder={placeholder}\r\n      onChange={(e) => onChange(e.target.value, e)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default SygefexText;\r\n","module.exports = require(\"@apollo/react-hooks\");","module.exports = require(\"@babel/runtime/regenerator\");","module.exports = require(\"graphql-tag\");","module.exports = require(\"next/link\");","module.exports = require(\"react\");","module.exports = require(\"styled-components\");"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACxFA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;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","sourceRoot":""}